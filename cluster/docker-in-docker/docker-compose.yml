ambassador:
  image: cpuguy83/docker-grand-ambassador:0.9.1
  volumes:
  - /var/run/docker.sock:/var/run/docker.sock
  command: "-name dind_apiserver_1"
etcd:
  hostname: etcd
  image: quay.io/coreos/etcd:v2.2.5
  ports: [ "4001:4001" ]
  command: >
    --listen-client-urls 'http://etcd:4001'
    --advertise-client-urls 'http://etcd:4001'
    --initial-cluster-state new
node:
  hostname: node
  privileged: true
  image: k8s.io/kubernetes-dind
  ports: [ "10248","10249" ]
  entrypoint:
  - bash
  - -xc
  - >
    NAME=$$(cut -f2 -d/ <<<$${APISERVER_NAME}) &&
    N=$${NAME##*_} &&
    PUBLIC_RESOURCES="$$(if [ $${N} = 2 ]; then echo ";cpus(public):2;mem(public):640;ports(public):[7000-7999]"; fi)" &&
    DOCKER_NETWORK_OFFSET=0.0.$${N}.0
    exec wrapdocker hyperkube kubelet
    --hostname-override=$$(getent hosts node | cut -d' ' -f1 | sort -u | tail -1)
    --node-labels="rack=$${N},gen=201$${N}"
    --api-servers=http://apiserver:8888
    --allow-privileged
    --cluster-dns=10.10.10.10
    --cluster-domain=cluster.local
    --config=/var/lib/kubelet/manifests
  command: []
  environment:
  - VAR_LIB_DOCKER_SIZE=10
  - DOCKER_DAEMON_ARGS
  links:
  - etcd
  - "ambassador:apiserver"
apiserver:
  hostname: apiserver
  image: k8s.io/kubernetes-dind
  entrypoint:
  - /bin/bash
  - "-ceu"
  - >
    echo "Hostname: $$(hostname -f) ($$(hostname -f | xargs resolveip.sh))" &&
    await-health-check "-t=${DOCKER_IN_DOCKER_ETCD_TIMEOUT}" http://etcd:4001/health &&
    await-file "-t=${KUBE_KEYGEN_TIMEOUT}" /var/run/kubernetes/auth/apiserver.crt &&
    hyperkube apiserver
    --insecure-bind-address=$$(resolveip.sh apiserver)
    --external-hostname=apiserver
    --etcd-servers=http://etcd:4001
    --insecure-port=8888
    --admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota
    --authorization-mode=AlwaysAllow
    --token-auth-file=/var/run/kubernetes/auth/token-users
    --basic-auth-file=/var/run/kubernetes/auth/basic-users
    --service-account-key-file=/var/run/kubernetes/auth/service-accounts.key
    --service-cluster-ip-range=10.10.10.0/24
    --service-node-port-range=30000-32767
    --allow-privileged
    --tls-cert-file=/var/run/kubernetes/auth/apiserver.crt
    --tls-private-key-file=/var/run/kubernetes/auth/apiserver.key
    --runtime-config=api/all
    --v=4
  ports: [ "8888:8888", "6443:6443" ]
  volumes:
  - ${DOCKER_IN_DOCKER_WORK_DIR}/auth:/var/run/kubernetes/auth:ro
  links:
  - etcd
controller:
  hostname: controller
  image: k8s.io/kubernetes-dind
  entrypoint:
  - /bin/bash
  - "-ceu"
  - >
    echo "Hostname: $$(hostname -f) ($$(hostname -f | xargs resolveip.sh))" &&
    await-health-check "-t=${DOCKER_IN_DOCKER_API_TIMEOUT}" http://apiserver:8888/healthz &&
    hyperkube controller-manager
    --address=$$(resolveip.sh controller)
    --master=http://apiserver:8888
    --service-account-private-key-file=/var/run/kubernetes/auth/service-accounts.key
    --root-ca-file=/var/run/kubernetes/auth/root-ca.crt
    --v=4
  volumes:
  - ${DOCKER_IN_DOCKER_WORK_DIR}/auth:/var/run/kubernetes/auth:ro
  links:
  - apiserver
scheduler:
  hostname: scheduler
  image: k8s.io/kubernetes-dind
  entrypoint:
  - /bin/bash
  - "-ceu"
  - >
    echo "Hostname: $$(hostname -f) ($$(hostname -f | xargs resolveip.sh))" &&
    await-health-check "-t=${DOCKER_IN_DOCKER_API_TIMEOUT}" http://apiserver:8888/healthz &&
    hyperkube scheduler
    --address=$$(resolveip.sh scheduler)
    --master=http://apiserver:8888
    --v=4
  links:
  - apiserver
  volumes:
  - ./static-pod.json:/opt/static-pods/static-pod.json
keygen:
  image: mesosphere/kubernetes-keygen:v1.0.0
  command:
  - certgen
  - /var/run/kubernetes/auth
  - /var/run/kubernetes/auth
  - apiserver
  volumes:
  - ${DOCKER_IN_DOCKER_WORK_DIR}/auth:/var/run/kubernetes/auth
  links:
  - apiserver
