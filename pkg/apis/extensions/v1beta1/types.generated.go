/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg2_v1.ObjectMeta
		var v3 pkg3_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [3]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			yyq13[2] = x.TargetSelector != ""
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(3)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[2] {
					yym21 := z.EncBinary()
					_ = yym21
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq13[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetSelector))
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym23 := z.DecBinary()
	_ = yym23
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct24 := r.ContainerType()
		if yyct24 == codecSelferValueTypeMap1234 {
			yyl24 := r.ReadMapStart()
			if yyl24 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl24, d)
			}
		} else if yyct24 == codecSelferValueTypeArray1234 {
			yyl24 := r.ReadArrayStart()
			if yyl24 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl24, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys25Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys25Slc
	var yyhl25 bool = l >= 0
	for yyj25 := 0; ; yyj25++ {
		if yyhl25 {
			if yyj25 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys25Slc = r.DecodeBytes(yys25Slc, true, true)
		yys25 := string(yys25Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys25 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv27 := &x.Selector
				yym28 := z.DecBinary()
				_ = yym28
				if false {
				} else {
					z.F.DecMapStringStringX(yyv27, false, d)
				}
			}
		case "targetSelector":
			if r.TryDecodeAsNil() {
				x.TargetSelector = ""
			} else {
				x.TargetSelector = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys25)
		} // end switch yys25
	} // end for yyj25
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv32 := &x.Selector
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			z.F.DecMapStringStringX(yyv32, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetSelector = ""
	} else {
		x.TargetSelector = string(r.DecodeString())
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym35 := z.EncBinary()
		_ = yym35
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep36 := !z.EncBinary()
			yy2arr36 := z.EncBasicHandle().StructToArray
			var yyq36 [5]bool
			_, _, _ = yysep36, yyq36, yy2arr36
			const yyr36 bool = false
			yyq36[0] = x.Kind != ""
			yyq36[1] = x.APIVersion != ""
			yyq36[2] = true
			yyq36[3] = true
			yyq36[4] = true
			var yynn36 int
			if yyr36 || yy2arr36 {
				r.EncodeArrayStart(5)
			} else {
				yynn36 = 0
				for _, b := range yyq36 {
					if b {
						yynn36++
					}
				}
				r.EncodeMapStart(yynn36)
				yynn36 = 0
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[0] {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq36[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[1] {
					yym41 := z.EncBinary()
					_ = yym41
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq36[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[2] {
					yy44 := &x.ObjectMeta
					yym45 := z.EncBinary()
					_ = yym45
					if false {
					} else if z.HasExtensions() && z.EncExt(yy44) {
					} else {
						z.EncFallback(yy44)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy46 := &x.ObjectMeta
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else if z.HasExtensions() && z.EncExt(yy46) {
					} else {
						z.EncFallback(yy46)
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[3] {
					yy49 := &x.Spec
					yy49.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy50 := &x.Spec
					yy50.CodecEncodeSelf(e)
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[4] {
					yy52 := &x.Status
					yy52.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy53 := &x.Status
					yy53.CodecEncodeSelf(e)
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym54 := z.DecBinary()
	_ = yym54
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct55 := r.ContainerType()
		if yyct55 == codecSelferValueTypeMap1234 {
			yyl55 := r.ReadMapStart()
			if yyl55 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl55, d)
			}
		} else if yyct55 == codecSelferValueTypeArray1234 {
			yyl55 := r.ReadArrayStart()
			if yyl55 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl55, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys56Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys56Slc
	var yyhl56 bool = l >= 0
	for yyj56 := 0; ; yyj56++ {
		if yyhl56 {
			if yyj56 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys56Slc = r.DecodeBytes(yys56Slc, true, true)
		yys56 := string(yys56Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys56 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv59 := &x.ObjectMeta
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv61 := &x.Spec
				yyv61.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv62 := &x.Status
				yyv62.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys56)
		} // end switch yys56
	} // end for yyj56
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv66 := &x.ObjectMeta
		yym67 := z.DecBinary()
		_ = yym67
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv66) {
		} else {
			z.DecFallback(yyv66, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv68 := &x.Spec
		yyv68.CodecDecodeSelf(d)
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv69 := &x.Status
		yyv69.CodecDecodeSelf(d)
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym70 := z.EncBinary()
		_ = yym70
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep71 := !z.EncBinary()
			yy2arr71 := z.EncBasicHandle().StructToArray
			var yyq71 [2]bool
			_, _, _ = yysep71, yyq71, yy2arr71
			const yyr71 bool = false
			yyq71[0] = x.Kind != ""
			yyq71[1] = x.APIVersion != ""
			var yynn71 int
			if yyr71 || yy2arr71 {
				r.EncodeArrayStart(2)
			} else {
				yynn71 = 0
				for _, b := range yyq71 {
					if b {
						yynn71++
					}
				}
				r.EncodeMapStart(yynn71)
				yynn71 = 0
			}
			if yyr71 || yy2arr71 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq71[0] {
					yym73 := z.EncBinary()
					_ = yym73
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq71[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym74 := z.EncBinary()
					_ = yym74
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr71 || yy2arr71 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq71[1] {
					yym76 := z.EncBinary()
					_ = yym76
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq71[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym77 := z.EncBinary()
					_ = yym77
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr71 || yy2arr71 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym78 := z.DecBinary()
	_ = yym78
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct79 := r.ContainerType()
		if yyct79 == codecSelferValueTypeMap1234 {
			yyl79 := r.ReadMapStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl79, d)
			}
		} else if yyct79 == codecSelferValueTypeArray1234 {
			yyl79 := r.ReadArrayStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl79, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys80Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys80Slc
	var yyhl80 bool = l >= 0
	for yyj80 := 0; ; yyj80++ {
		if yyhl80 {
			if yyj80 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys80Slc = r.DecodeBytes(yys80Slc, true, true)
		yys80 := string(yys80Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys80 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys80)
		} // end switch yys80
	} // end for yyj80
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj83 int
	var yyb83 bool
	var yyhl83 bool = l >= 0
	yyj83++
	if yyhl83 {
		yyb83 = yyj83 > l
	} else {
		yyb83 = r.CheckBreak()
	}
	if yyb83 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj83++
	if yyhl83 {
		yyb83 = yyj83 > l
	} else {
		yyb83 = r.CheckBreak()
	}
	if yyb83 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj83++
		if yyhl83 {
			yyb83 = yyj83 > l
		} else {
			yyb83 = r.CheckBreak()
		}
		if yyb83 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj83-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym86 := z.EncBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep87 := !z.EncBinary()
			yy2arr87 := z.EncBasicHandle().StructToArray
			var yyq87 [4]bool
			_, _, _ = yysep87, yyq87, yy2arr87
			const yyr87 bool = false
			yyq87[0] = x.Kind != ""
			yyq87[1] = x.Name != ""
			yyq87[2] = x.APIVersion != ""
			yyq87[3] = x.Subresource != ""
			var yynn87 int
			if yyr87 || yy2arr87 {
				r.EncodeArrayStart(4)
			} else {
				yynn87 = 0
				for _, b := range yyq87 {
					if b {
						yynn87++
					}
				}
				r.EncodeMapStart(yynn87)
				yynn87 = 0
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[0] {
					yym89 := z.EncBinary()
					_ = yym89
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[1] {
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[2] {
					yym95 := z.EncBinary()
					_ = yym95
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym96 := z.EncBinary()
					_ = yym96
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[3] {
					yym98 := z.EncBinary()
					_ = yym98
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym99 := z.EncBinary()
					_ = yym99
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym100 := z.DecBinary()
	_ = yym100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct101 := r.ContainerType()
		if yyct101 == codecSelferValueTypeMap1234 {
			yyl101 := r.ReadMapStart()
			if yyl101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl101, d)
			}
		} else if yyct101 == codecSelferValueTypeArray1234 {
			yyl101 := r.ReadArrayStart()
			if yyl101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys102Slc
	var yyhl102 bool = l >= 0
	for yyj102 := 0; ; yyj102++ {
		if yyhl102 {
			if yyj102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys102Slc = r.DecodeBytes(yys102Slc, true, true)
		yys102 := string(yys102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys102 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys102)
		} // end switch yys102
	} // end for yyj102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj107 int
	var yyb107 bool
	var yyhl107 bool = l >= 0
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj107++
		if yyhl107 {
			yyb107 = yyj107 > l
		} else {
			yyb107 = r.CheckBreak()
		}
		if yyb107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym112 := z.EncBinary()
		_ = yym112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep113 := !z.EncBinary()
			yy2arr113 := z.EncBasicHandle().StructToArray
			var yyq113 [1]bool
			_, _, _ = yysep113, yyq113, yy2arr113
			const yyr113 bool = false
			var yynn113 int
			if yyr113 || yy2arr113 {
				r.EncodeArrayStart(1)
			} else {
				yynn113 = 1
				for _, b := range yyq113 {
					if b {
						yynn113++
					}
				}
				r.EncodeMapStart(yynn113)
				yynn113 = 0
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym115 := z.EncBinary()
				_ = yym115
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym116 := z.EncBinary()
				_ = yym116
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym117 := z.DecBinary()
	_ = yym117
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct118 := r.ContainerType()
		if yyct118 == codecSelferValueTypeMap1234 {
			yyl118 := r.ReadMapStart()
			if yyl118 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl118, d)
			}
		} else if yyct118 == codecSelferValueTypeArray1234 {
			yyl118 := r.ReadArrayStart()
			if yyl118 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl118, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys119Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys119Slc
	var yyhl119 bool = l >= 0
	for yyj119 := 0; ; yyj119++ {
		if yyhl119 {
			if yyj119 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys119Slc = r.DecodeBytes(yys119Slc, true, true)
		yys119 := string(yys119Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys119 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys119)
		} // end switch yys119
	} // end for yyj119
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj121 int
	var yyb121 bool
	var yyhl121 bool = l >= 0
	yyj121++
	if yyhl121 {
		yyb121 = yyj121 > l
	} else {
		yyb121 = r.CheckBreak()
	}
	if yyb121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int32(r.DecodeInt(32))
	}
	for {
		yyj121++
		if yyhl121 {
			yyb121 = yyj121 > l
		} else {
			yyb121 = r.CheckBreak()
		}
		if yyb121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym123 := z.EncBinary()
		_ = yym123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep124 := !z.EncBinary()
			yy2arr124 := z.EncBasicHandle().StructToArray
			var yyq124 [2]bool
			_, _, _ = yysep124, yyq124, yy2arr124
			const yyr124 bool = false
			var yynn124 int
			if yyr124 || yy2arr124 {
				r.EncodeArrayStart(2)
			} else {
				yynn124 = 2
				for _, b := range yyq124 {
					if b {
						yynn124++
					}
				}
				r.EncodeMapStart(yynn124)
				yynn124 = 0
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym126 := z.EncBinary()
				_ = yym126
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym127 := z.EncBinary()
				_ = yym127
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy129 := &x.TargetValue
				yym130 := z.EncBinary()
				_ = yym130
				if false {
				} else if z.HasExtensions() && z.EncExt(yy129) {
				} else if !yym130 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy129)
				} else {
					z.EncFallback(yy129)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy131 := &x.TargetValue
				yym132 := z.EncBinary()
				_ = yym132
				if false {
				} else if z.HasExtensions() && z.EncExt(yy131) {
				} else if !yym132 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy131)
				} else {
					z.EncFallback(yy131)
				}
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym133 := z.DecBinary()
	_ = yym133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct134 := r.ContainerType()
		if yyct134 == codecSelferValueTypeMap1234 {
			yyl134 := r.ReadMapStart()
			if yyl134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl134, d)
			}
		} else if yyct134 == codecSelferValueTypeArray1234 {
			yyl134 := r.ReadArrayStart()
			if yyl134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys135Slc
	var yyhl135 bool = l >= 0
	for yyj135 := 0; ; yyj135++ {
		if yyhl135 {
			if yyj135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys135Slc = r.DecodeBytes(yys135Slc, true, true)
		yys135 := string(yys135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys135 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv137 := &x.TargetValue
				yym138 := z.DecBinary()
				_ = yym138
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv137) {
				} else if !yym138 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv137)
				} else {
					z.DecFallback(yyv137, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys135)
		} // end switch yys135
	} // end for yyj135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj139 int
	var yyb139 bool
	var yyhl139 bool = l >= 0
	yyj139++
	if yyhl139 {
		yyb139 = yyj139 > l
	} else {
		yyb139 = r.CheckBreak()
	}
	if yyb139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj139++
	if yyhl139 {
		yyb139 = yyj139 > l
	} else {
		yyb139 = r.CheckBreak()
	}
	if yyb139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv141 := &x.TargetValue
		yym142 := z.DecBinary()
		_ = yym142
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv141) {
		} else if !yym142 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv141)
		} else {
			z.DecFallback(yyv141, false)
		}
	}
	for {
		yyj139++
		if yyhl139 {
			yyb139 = yyj139 > l
		} else {
			yyb139 = r.CheckBreak()
		}
		if yyb139 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj139-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [1]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(1)
			} else {
				yynn144 = 1
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym148 := z.DecBinary()
	_ = yym148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct149 := r.ContainerType()
		if yyct149 == codecSelferValueTypeMap1234 {
			yyl149 := r.ReadMapStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl149, d)
			}
		} else if yyct149 == codecSelferValueTypeArray1234 {
			yyl149 := r.ReadArrayStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys150Slc
	var yyhl150 bool = l >= 0
	for yyj150 := 0; ; yyj150++ {
		if yyhl150 {
			if yyj150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys150Slc = r.DecodeBytes(yys150Slc, true, true)
		yys150 := string(yys150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys150 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv151 := &x.Items
				yym152 := z.DecBinary()
				_ = yym152
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv151), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys150)
		} // end switch yys150
	} // end for yyj150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj153 int
	var yyb153 bool
	var yyhl153 bool = l >= 0
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv154 := &x.Items
		yym155 := z.DecBinary()
		_ = yym155
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv154), d)
		}
	}
	for {
		yyj153++
		if yyhl153 {
			yyb153 = yyj153 > l
		} else {
			yyb153 = r.CheckBreak()
		}
		if yyb153 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj153-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym156 := z.EncBinary()
		_ = yym156
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep157 := !z.EncBinary()
			yy2arr157 := z.EncBasicHandle().StructToArray
			var yyq157 [2]bool
			_, _, _ = yysep157, yyq157, yy2arr157
			const yyr157 bool = false
			var yynn157 int
			if yyr157 || yy2arr157 {
				r.EncodeArrayStart(2)
			} else {
				yynn157 = 2
				for _, b := range yyq157 {
					if b {
						yynn157++
					}
				}
				r.EncodeMapStart(yynn157)
				yynn157 = 0
			}
			if yyr157 || yy2arr157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym159 := z.EncBinary()
				_ = yym159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym160 := z.EncBinary()
				_ = yym160
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr157 || yy2arr157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy162 := &x.CurrentValue
				yym163 := z.EncBinary()
				_ = yym163
				if false {
				} else if z.HasExtensions() && z.EncExt(yy162) {
				} else if !yym163 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy162)
				} else {
					z.EncFallback(yy162)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy164 := &x.CurrentValue
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else if z.HasExtensions() && z.EncExt(yy164) {
				} else if !yym165 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy164)
				} else {
					z.EncFallback(yy164)
				}
			}
			if yyr157 || yy2arr157 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym166 := z.DecBinary()
	_ = yym166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct167 := r.ContainerType()
		if yyct167 == codecSelferValueTypeMap1234 {
			yyl167 := r.ReadMapStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl167, d)
			}
		} else if yyct167 == codecSelferValueTypeArray1234 {
			yyl167 := r.ReadArrayStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys168Slc
	var yyhl168 bool = l >= 0
	for yyj168 := 0; ; yyj168++ {
		if yyhl168 {
			if yyj168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys168Slc = r.DecodeBytes(yys168Slc, true, true)
		yys168 := string(yys168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys168 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv170 := &x.CurrentValue
				yym171 := z.DecBinary()
				_ = yym171
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv170) {
				} else if !yym171 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv170)
				} else {
					z.DecFallback(yyv170, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys168)
		} // end switch yys168
	} // end for yyj168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj172 int
	var yyb172 bool
	var yyhl172 bool = l >= 0
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv174 := &x.CurrentValue
		yym175 := z.DecBinary()
		_ = yym175
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv174) {
		} else if !yym175 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv174)
		} else {
			z.DecFallback(yyv174, false)
		}
	}
	for {
		yyj172++
		if yyhl172 {
			yyb172 = yyj172 > l
		} else {
			yyb172 = r.CheckBreak()
		}
		if yyb172 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj172-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym176 := z.EncBinary()
		_ = yym176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep177 := !z.EncBinary()
			yy2arr177 := z.EncBasicHandle().StructToArray
			var yyq177 [1]bool
			_, _, _ = yysep177, yyq177, yy2arr177
			const yyr177 bool = false
			var yynn177 int
			if yyr177 || yy2arr177 {
				r.EncodeArrayStart(1)
			} else {
				yynn177 = 1
				for _, b := range yyq177 {
					if b {
						yynn177++
					}
				}
				r.EncodeMapStart(yynn177)
				yynn177 = 0
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym180 := z.EncBinary()
					_ = yym180
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym181 := z.DecBinary()
	_ = yym181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct182 := r.ContainerType()
		if yyct182 == codecSelferValueTypeMap1234 {
			yyl182 := r.ReadMapStart()
			if yyl182 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl182, d)
			}
		} else if yyct182 == codecSelferValueTypeArray1234 {
			yyl182 := r.ReadArrayStart()
			if yyl182 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl182, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys183Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys183Slc
	var yyhl183 bool = l >= 0
	for yyj183 := 0; ; yyj183++ {
		if yyhl183 {
			if yyj183 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys183Slc = r.DecodeBytes(yys183Slc, true, true)
		yys183 := string(yys183Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys183 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv184 := &x.Items
				yym185 := z.DecBinary()
				_ = yym185
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv184), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys183)
		} // end switch yys183
	} // end for yyj183
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj186 int
	var yyb186 bool
	var yyhl186 bool = l >= 0
	yyj186++
	if yyhl186 {
		yyb186 = yyj186 > l
	} else {
		yyb186 = r.CheckBreak()
	}
	if yyb186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv187 := &x.Items
		yym188 := z.DecBinary()
		_ = yym188
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv187), d)
		}
	}
	for {
		yyj186++
		if yyhl186 {
			yyb186 = yyj186 > l
		} else {
			yyb186 = r.CheckBreak()
		}
		if yyb186 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj186-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym189 := z.EncBinary()
		_ = yym189
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep190 := !z.EncBinary()
			yy2arr190 := z.EncBasicHandle().StructToArray
			var yyq190 [4]bool
			_, _, _ = yysep190, yyq190, yy2arr190
			const yyr190 bool = false
			yyq190[1] = x.MinReplicas != nil
			yyq190[3] = x.CPUUtilization != nil
			var yynn190 int
			if yyr190 || yy2arr190 {
				r.EncodeArrayStart(4)
			} else {
				yynn190 = 2
				for _, b := range yyq190 {
					if b {
						yynn190++
					}
				}
				r.EncodeMapStart(yynn190)
				yynn190 = 0
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy192 := &x.ScaleRef
				yy192.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy193 := &x.ScaleRef
				yy193.CodecEncodeSelf(e)
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq190[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy195 := *x.MinReplicas
						yym196 := z.EncBinary()
						_ = yym196
						if false {
						} else {
							r.EncodeInt(int64(yy195))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq190[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy197 := *x.MinReplicas
						yym198 := z.EncBinary()
						_ = yym198
						if false {
						} else {
							r.EncodeInt(int64(yy197))
						}
					}
				}
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym200 := z.EncBinary()
				_ = yym200
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym201 := z.EncBinary()
				_ = yym201
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq190[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq190[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym203 := z.DecBinary()
	_ = yym203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct204 := r.ContainerType()
		if yyct204 == codecSelferValueTypeMap1234 {
			yyl204 := r.ReadMapStart()
			if yyl204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl204, d)
			}
		} else if yyct204 == codecSelferValueTypeArray1234 {
			yyl204 := r.ReadArrayStart()
			if yyl204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys205Slc
	var yyhl205 bool = l >= 0
	for yyj205 := 0; ; yyj205++ {
		if yyhl205 {
			if yyj205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys205Slc = r.DecodeBytes(yys205Slc, true, true)
		yys205 := string(yys205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys205 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv206 := &x.ScaleRef
				yyv206.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int32)
				}
				yym208 := z.DecBinary()
				_ = yym208
				if false {
				} else {
					*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int32(r.DecodeInt(32))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys205)
		} // end switch yys205
	} // end for yyj205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj211 int
	var yyb211 bool
	var yyhl211 bool = l >= 0
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv212 := &x.ScaleRef
		yyv212.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int32)
		}
		yym214 := z.DecBinary()
		_ = yym214
		if false {
		} else {
			*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int32(r.DecodeInt(32))
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj211++
		if yyhl211 {
			yyb211 = yyj211 > l
		} else {
			yyb211 = r.CheckBreak()
		}
		if yyb211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym217 := z.EncBinary()
		_ = yym217
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep218 := !z.EncBinary()
			yy2arr218 := z.EncBasicHandle().StructToArray
			var yyq218 [5]bool
			_, _, _ = yysep218, yyq218, yy2arr218
			const yyr218 bool = false
			yyq218[0] = x.ObservedGeneration != nil
			yyq218[1] = x.LastScaleTime != nil
			yyq218[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn218 int
			if yyr218 || yy2arr218 {
				r.EncodeArrayStart(5)
			} else {
				yynn218 = 2
				for _, b := range yyq218 {
					if b {
						yynn218++
					}
				}
				r.EncodeMapStart(yynn218)
				yynn218 = 0
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq218[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy220 := *x.ObservedGeneration
						yym221 := z.EncBinary()
						_ = yym221
						if false {
						} else {
							r.EncodeInt(int64(yy220))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq218[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy222 := *x.ObservedGeneration
						yym223 := z.EncBinary()
						_ = yym223
						if false {
						} else {
							r.EncodeInt(int64(yy222))
						}
					}
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq218[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym225 := z.EncBinary()
						_ = yym225
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym225 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym225 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq218[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym226 := z.EncBinary()
						_ = yym226
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym226 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym226 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym228 := z.EncBinary()
				_ = yym228
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym229 := z.EncBinary()
				_ = yym229
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym231 := z.EncBinary()
				_ = yym231
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym232 := z.EncBinary()
				_ = yym232
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq218[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy234 := *x.CurrentCPUUtilizationPercentage
						yym235 := z.EncBinary()
						_ = yym235
						if false {
						} else {
							r.EncodeInt(int64(yy234))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq218[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy236 := *x.CurrentCPUUtilizationPercentage
						yym237 := z.EncBinary()
						_ = yym237
						if false {
						} else {
							r.EncodeInt(int64(yy236))
						}
					}
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym238 := z.DecBinary()
	_ = yym238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct239 := r.ContainerType()
		if yyct239 == codecSelferValueTypeMap1234 {
			yyl239 := r.ReadMapStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl239, d)
			}
		} else if yyct239 == codecSelferValueTypeArray1234 {
			yyl239 := r.ReadArrayStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys240Slc
	var yyhl240 bool = l >= 0
	for yyj240 := 0; ; yyj240++ {
		if yyhl240 {
			if yyj240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys240Slc = r.DecodeBytes(yys240Slc, true, true)
		yys240 := string(yys240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys240 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym242 := z.DecBinary()
				_ = yym242
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym244 := z.DecBinary()
				_ = yym244
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym244 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym244 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int32(r.DecodeInt(32))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int32(r.DecodeInt(32))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int32)
				}
				yym248 := z.DecBinary()
				_ = yym248
				if false {
				} else {
					*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys240)
		} // end switch yys240
	} // end for yyj240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj249 int
	var yyb249 bool
	var yyhl249 bool = l >= 0
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym251 := z.DecBinary()
		_ = yym251
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym253 := z.DecBinary()
		_ = yym253
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym253 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym253 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int32(r.DecodeInt(32))
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int32(r.DecodeInt(32))
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int32)
		}
		yym257 := z.DecBinary()
		_ = yym257
		if false {
		} else {
			*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj249++
		if yyhl249 {
			yyb249 = yyj249 > l
		} else {
			yyb249 = r.CheckBreak()
		}
		if yyb249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym258 := z.EncBinary()
		_ = yym258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep259 := !z.EncBinary()
			yy2arr259 := z.EncBasicHandle().StructToArray
			var yyq259 [5]bool
			_, _, _ = yysep259, yyq259, yy2arr259
			const yyr259 bool = false
			yyq259[0] = x.Kind != ""
			yyq259[1] = x.APIVersion != ""
			yyq259[2] = true
			yyq259[3] = true
			yyq259[4] = true
			var yynn259 int
			if yyr259 || yy2arr259 {
				r.EncodeArrayStart(5)
			} else {
				yynn259 = 0
				for _, b := range yyq259 {
					if b {
						yynn259++
					}
				}
				r.EncodeMapStart(yynn259)
				yynn259 = 0
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[0] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[1] {
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[2] {
					yy267 := &x.ObjectMeta
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else if z.HasExtensions() && z.EncExt(yy267) {
					} else {
						z.EncFallback(yy267)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy269 := &x.ObjectMeta
					yym270 := z.EncBinary()
					_ = yym270
					if false {
					} else if z.HasExtensions() && z.EncExt(yy269) {
					} else {
						z.EncFallback(yy269)
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[3] {
					yy272 := &x.Spec
					yy272.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy273 := &x.Spec
					yy273.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[4] {
					yy275 := &x.Status
					yy275.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy276 := &x.Status
					yy276.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym277 := z.DecBinary()
	_ = yym277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct278 := r.ContainerType()
		if yyct278 == codecSelferValueTypeMap1234 {
			yyl278 := r.ReadMapStart()
			if yyl278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl278, d)
			}
		} else if yyct278 == codecSelferValueTypeArray1234 {
			yyl278 := r.ReadArrayStart()
			if yyl278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys279Slc
	var yyhl279 bool = l >= 0
	for yyj279 := 0; ; yyj279++ {
		if yyhl279 {
			if yyj279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys279Slc = r.DecodeBytes(yys279Slc, true, true)
		yys279 := string(yys279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys279 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv282 := &x.ObjectMeta
				yym283 := z.DecBinary()
				_ = yym283
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv282) {
				} else {
					z.DecFallback(yyv282, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv284 := &x.Spec
				yyv284.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv285 := &x.Status
				yyv285.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys279)
		} // end switch yys279
	} // end for yyj279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj286 int
	var yyb286 bool
	var yyhl286 bool = l >= 0
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv289 := &x.ObjectMeta
		yym290 := z.DecBinary()
		_ = yym290
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv289) {
		} else {
			z.DecFallback(yyv289, false)
		}
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv291 := &x.Spec
		yyv291.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv292 := &x.Status
		yyv292.CodecDecodeSelf(d)
	}
	for {
		yyj286++
		if yyhl286 {
			yyb286 = yyj286 > l
		} else {
			yyb286 = r.CheckBreak()
		}
		if yyb286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym293 := z.EncBinary()
		_ = yym293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep294 := !z.EncBinary()
			yy2arr294 := z.EncBasicHandle().StructToArray
			var yyq294 [4]bool
			_, _, _ = yysep294, yyq294, yy2arr294
			const yyr294 bool = false
			yyq294[0] = x.Kind != ""
			yyq294[1] = x.APIVersion != ""
			yyq294[2] = true
			var yynn294 int
			if yyr294 || yy2arr294 {
				r.EncodeArrayStart(4)
			} else {
				yynn294 = 1
				for _, b := range yyq294 {
					if b {
						yynn294++
					}
				}
				r.EncodeMapStart(yynn294)
				yynn294 = 0
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq294[0] {
					yym296 := z.EncBinary()
					_ = yym296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym297 := z.EncBinary()
					_ = yym297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq294[1] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq294[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq294[2] {
					yy302 := &x.ListMeta
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy302) {
					} else {
						z.EncFallback(yy302)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq294[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy304 := &x.ListMeta
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy304) {
					} else {
						z.EncFallback(yy304)
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym307 := z.EncBinary()
					_ = yym307
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv314 := &x.ListMeta
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv314) {
				} else {
					z.DecFallback(yyv314, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv316 := &x.Items
				yym317 := z.DecBinary()
				_ = yym317
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv316), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv321 := &x.ListMeta
		yym322 := z.DecBinary()
		_ = yym322
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv321) {
		} else {
			z.DecFallback(yyv321, false)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv323 := &x.Items
		yym324 := z.DecBinary()
		_ = yym324
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv323), d)
		}
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym325 := z.EncBinary()
		_ = yym325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep326 := !z.EncBinary()
			yy2arr326 := z.EncBasicHandle().StructToArray
			var yyq326 [5]bool
			_, _, _ = yysep326, yyq326, yy2arr326
			const yyr326 bool = false
			yyq326[0] = x.Kind != ""
			yyq326[1] = x.APIVersion != ""
			yyq326[2] = true
			yyq326[3] = x.Description != ""
			yyq326[4] = len(x.Versions) != 0
			var yynn326 int
			if yyr326 || yy2arr326 {
				r.EncodeArrayStart(5)
			} else {
				yynn326 = 0
				for _, b := range yyq326 {
					if b {
						yynn326++
					}
				}
				r.EncodeMapStart(yynn326)
				yynn326 = 0
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[0] {
					yym328 := z.EncBinary()
					_ = yym328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym329 := z.EncBinary()
					_ = yym329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[1] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[2] {
					yy334 := &x.ObjectMeta
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else if z.HasExtensions() && z.EncExt(yy334) {
					} else {
						z.EncFallback(yy334)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq326[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy336 := &x.ObjectMeta
					yym337 := z.EncBinary()
					_ = yym337
					if false {
					} else if z.HasExtensions() && z.EncExt(yy336) {
					} else {
						z.EncFallback(yy336)
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[3] {
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym340 := z.EncBinary()
					_ = yym340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym342 := z.EncBinary()
						_ = yym342
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq326[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym343 := z.EncBinary()
						_ = yym343
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym344 := z.DecBinary()
	_ = yym344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct345 := r.ContainerType()
		if yyct345 == codecSelferValueTypeMap1234 {
			yyl345 := r.ReadMapStart()
			if yyl345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl345, d)
			}
		} else if yyct345 == codecSelferValueTypeArray1234 {
			yyl345 := r.ReadArrayStart()
			if yyl345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys346Slc
	var yyhl346 bool = l >= 0
	for yyj346 := 0; ; yyj346++ {
		if yyhl346 {
			if yyj346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys346Slc = r.DecodeBytes(yys346Slc, true, true)
		yys346 := string(yys346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys346 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv349 := &x.ObjectMeta
				yym350 := z.DecBinary()
				_ = yym350
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv349) {
				} else {
					z.DecFallback(yyv349, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv352 := &x.Versions
				yym353 := z.DecBinary()
				_ = yym353
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv352), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys346)
		} // end switch yys346
	} // end for yyj346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj354 int
	var yyb354 bool
	var yyhl354 bool = l >= 0
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv357 := &x.ObjectMeta
		yym358 := z.DecBinary()
		_ = yym358
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv357) {
		} else {
			z.DecFallback(yyv357, false)
		}
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv360 := &x.Versions
		yym361 := z.DecBinary()
		_ = yym361
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv360), d)
		}
	}
	for {
		yyj354++
		if yyhl354 {
			yyb354 = yyj354 > l
		} else {
			yyb354 = r.CheckBreak()
		}
		if yyb354 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj354-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym362 := z.EncBinary()
		_ = yym362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep363 := !z.EncBinary()
			yy2arr363 := z.EncBasicHandle().StructToArray
			var yyq363 [4]bool
			_, _, _ = yysep363, yyq363, yy2arr363
			const yyr363 bool = false
			yyq363[0] = x.Kind != ""
			yyq363[1] = x.APIVersion != ""
			yyq363[2] = true
			var yynn363 int
			if yyr363 || yy2arr363 {
				r.EncodeArrayStart(4)
			} else {
				yynn363 = 1
				for _, b := range yyq363 {
					if b {
						yynn363++
					}
				}
				r.EncodeMapStart(yynn363)
				yynn363 = 0
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq363[0] {
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq363[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq363[1] {
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq363[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq363[2] {
					yy371 := &x.ListMeta
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else if z.HasExtensions() && z.EncExt(yy371) {
					} else {
						z.EncFallback(yy371)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq363[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy373 := &x.ListMeta
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else if z.HasExtensions() && z.EncExt(yy373) {
					} else {
						z.EncFallback(yy373)
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym376 := z.EncBinary()
					_ = yym376
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym378 := z.DecBinary()
	_ = yym378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct379 := r.ContainerType()
		if yyct379 == codecSelferValueTypeMap1234 {
			yyl379 := r.ReadMapStart()
			if yyl379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl379, d)
			}
		} else if yyct379 == codecSelferValueTypeArray1234 {
			yyl379 := r.ReadArrayStart()
			if yyl379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys380Slc
	var yyhl380 bool = l >= 0
	for yyj380 := 0; ; yyj380++ {
		if yyhl380 {
			if yyj380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys380Slc = r.DecodeBytes(yys380Slc, true, true)
		yys380 := string(yys380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv383 := &x.ListMeta
				yym384 := z.DecBinary()
				_ = yym384
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv383) {
				} else {
					z.DecFallback(yyv383, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv385 := &x.Items
				yym386 := z.DecBinary()
				_ = yym386
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv385), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys380)
		} // end switch yys380
	} // end for yyj380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj387 int
	var yyb387 bool
	var yyhl387 bool = l >= 0
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv390 := &x.ListMeta
		yym391 := z.DecBinary()
		_ = yym391
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv390) {
		} else {
			z.DecFallback(yyv390, false)
		}
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv392 := &x.Items
		yym393 := z.DecBinary()
		_ = yym393
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv392), d)
		}
	}
	for {
		yyj387++
		if yyhl387 {
			yyb387 = yyj387 > l
		} else {
			yyb387 = r.CheckBreak()
		}
		if yyb387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym394 := z.EncBinary()
		_ = yym394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep395 := !z.EncBinary()
			yy2arr395 := z.EncBasicHandle().StructToArray
			var yyq395 [1]bool
			_, _, _ = yysep395, yyq395, yy2arr395
			const yyr395 bool = false
			yyq395[0] = x.Name != ""
			var yynn395 int
			if yyr395 || yy2arr395 {
				r.EncodeArrayStart(1)
			} else {
				yynn395 = 0
				for _, b := range yyq395 {
					if b {
						yynn395++
					}
				}
				r.EncodeMapStart(yynn395)
				yynn395 = 0
			}
			if yyr395 || yy2arr395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq395[0] {
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq395[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr395 || yy2arr395 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym399 := z.DecBinary()
	_ = yym399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct400 := r.ContainerType()
		if yyct400 == codecSelferValueTypeMap1234 {
			yyl400 := r.ReadMapStart()
			if yyl400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl400, d)
			}
		} else if yyct400 == codecSelferValueTypeArray1234 {
			yyl400 := r.ReadArrayStart()
			if yyl400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys401Slc
	var yyhl401 bool = l >= 0
	for yyj401 := 0; ; yyj401++ {
		if yyhl401 {
			if yyj401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys401Slc = r.DecodeBytes(yys401Slc, true, true)
		yys401 := string(yys401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys401 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys401)
		} // end switch yys401
	} // end for yyj401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj403 int
	var yyb403 bool
	var yyhl403 bool = l >= 0
	yyj403++
	if yyhl403 {
		yyb403 = yyj403 > l
	} else {
		yyb403 = r.CheckBreak()
	}
	if yyb403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj403++
		if yyhl403 {
			yyb403 = yyj403 > l
		} else {
			yyb403 = r.CheckBreak()
		}
		if yyb403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym405 := z.EncBinary()
		_ = yym405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep406 := !z.EncBinary()
			yy2arr406 := z.EncBasicHandle().StructToArray
			var yyq406 [4]bool
			_, _, _ = yysep406, yyq406, yy2arr406
			const yyr406 bool = false
			yyq406[0] = x.Kind != ""
			yyq406[1] = x.APIVersion != ""
			yyq406[2] = true
			yyq406[3] = len(x.Data) != 0
			var yynn406 int
			if yyr406 || yy2arr406 {
				r.EncodeArrayStart(4)
			} else {
				yynn406 = 0
				for _, b := range yyq406 {
					if b {
						yynn406++
					}
				}
				r.EncodeMapStart(yynn406)
				yynn406 = 0
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[0] {
					yym408 := z.EncBinary()
					_ = yym408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym409 := z.EncBinary()
					_ = yym409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[1] {
					yym411 := z.EncBinary()
					_ = yym411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym412 := z.EncBinary()
					_ = yym412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[2] {
					yy414 := &x.ObjectMeta
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else if z.HasExtensions() && z.EncExt(yy414) {
					} else {
						z.EncFallback(yy414)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.ObjectMeta
					yym417 := z.EncBinary()
					_ = yym417
					if false {
					} else if z.HasExtensions() && z.EncExt(yy416) {
					} else {
						z.EncFallback(yy416)
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym419 := z.EncBinary()
						_ = yym419
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq406[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym420 := z.EncBinary()
						_ = yym420
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym421 := z.DecBinary()
	_ = yym421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct422 := r.ContainerType()
		if yyct422 == codecSelferValueTypeMap1234 {
			yyl422 := r.ReadMapStart()
			if yyl422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl422, d)
			}
		} else if yyct422 == codecSelferValueTypeArray1234 {
			yyl422 := r.ReadArrayStart()
			if yyl422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys423Slc
	var yyhl423 bool = l >= 0
	for yyj423 := 0; ; yyj423++ {
		if yyhl423 {
			if yyj423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys423Slc = r.DecodeBytes(yys423Slc, true, true)
		yys423 := string(yys423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys423 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv426 := &x.ObjectMeta
				yym427 := z.DecBinary()
				_ = yym427
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv426) {
				} else {
					z.DecFallback(yyv426, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv428 := &x.Data
				yym429 := z.DecBinary()
				_ = yym429
				if false {
				} else {
					*yyv428 = r.DecodeBytes(*(*[]byte)(yyv428), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys423)
		} // end switch yys423
	} // end for yyj423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj430 int
	var yyb430 bool
	var yyhl430 bool = l >= 0
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv433 := &x.ObjectMeta
		yym434 := z.DecBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv433) {
		} else {
			z.DecFallback(yyv433, false)
		}
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv435 := &x.Data
		yym436 := z.DecBinary()
		_ = yym436
		if false {
		} else {
			*yyv435 = r.DecodeBytes(*(*[]byte)(yyv435), false, false)
		}
	}
	for {
		yyj430++
		if yyhl430 {
			yyb430 = yyj430 > l
		} else {
			yyb430 = r.CheckBreak()
		}
		if yyb430 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj430-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym437 := z.EncBinary()
		_ = yym437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep438 := !z.EncBinary()
			yy2arr438 := z.EncBasicHandle().StructToArray
			var yyq438 [5]bool
			_, _, _ = yysep438, yyq438, yy2arr438
			const yyr438 bool = false
			yyq438[0] = x.Kind != ""
			yyq438[1] = x.APIVersion != ""
			yyq438[2] = true
			yyq438[3] = true
			yyq438[4] = true
			var yynn438 int
			if yyr438 || yy2arr438 {
				r.EncodeArrayStart(5)
			} else {
				yynn438 = 0
				for _, b := range yyq438 {
					if b {
						yynn438++
					}
				}
				r.EncodeMapStart(yynn438)
				yynn438 = 0
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[0] {
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[1] {
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[2] {
					yy446 := &x.ObjectMeta
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy446) {
					} else {
						z.EncFallback(yy446)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy448 := &x.ObjectMeta
					yym449 := z.EncBinary()
					_ = yym449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy448) {
					} else {
						z.EncFallback(yy448)
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[3] {
					yy451 := &x.Spec
					yy451.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy452 := &x.Spec
					yy452.CodecEncodeSelf(e)
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[4] {
					yy454 := &x.Status
					yy454.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy455 := &x.Status
					yy455.CodecEncodeSelf(e)
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym456 := z.DecBinary()
	_ = yym456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct457 := r.ContainerType()
		if yyct457 == codecSelferValueTypeMap1234 {
			yyl457 := r.ReadMapStart()
			if yyl457 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl457, d)
			}
		} else if yyct457 == codecSelferValueTypeArray1234 {
			yyl457 := r.ReadArrayStart()
			if yyl457 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl457, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys458Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys458Slc
	var yyhl458 bool = l >= 0
	for yyj458 := 0; ; yyj458++ {
		if yyhl458 {
			if yyj458 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys458Slc = r.DecodeBytes(yys458Slc, true, true)
		yys458 := string(yys458Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys458 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv461 := &x.ObjectMeta
				yym462 := z.DecBinary()
				_ = yym462
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv461) {
				} else {
					z.DecFallback(yyv461, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv463 := &x.Spec
				yyv463.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv464 := &x.Status
				yyv464.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys458)
		} // end switch yys458
	} // end for yyj458
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj465 int
	var yyb465 bool
	var yyhl465 bool = l >= 0
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv468 := &x.ObjectMeta
		yym469 := z.DecBinary()
		_ = yym469
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv468) {
		} else {
			z.DecFallback(yyv468, false)
		}
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv470 := &x.Spec
		yyv470.CodecDecodeSelf(d)
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv471 := &x.Status
		yyv471.CodecDecodeSelf(d)
	}
	for {
		yyj465++
		if yyhl465 {
			yyb465 = yyj465 > l
		} else {
			yyb465 = r.CheckBreak()
		}
		if yyb465 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj465-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym472 := z.EncBinary()
		_ = yym472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep473 := !z.EncBinary()
			yy2arr473 := z.EncBasicHandle().StructToArray
			var yyq473 [9]bool
			_, _, _ = yysep473, yyq473, yy2arr473
			const yyr473 bool = false
			yyq473[0] = x.Replicas != nil
			yyq473[1] = x.Selector != nil
			yyq473[3] = true
			yyq473[4] = x.MinReadySeconds != 0
			yyq473[5] = x.RevisionHistoryLimit != nil
			yyq473[6] = x.Paused != false
			yyq473[7] = x.RollbackTo != nil
			yyq473[8] = x.ProgressDeadlineSeconds != nil
			var yynn473 int
			if yyr473 || yy2arr473 {
				r.EncodeArrayStart(9)
			} else {
				yynn473 = 1
				for _, b := range yyq473 {
					if b {
						yynn473++
					}
				}
				r.EncodeMapStart(yynn473)
				yynn473 = 0
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy475 := *x.Replicas
						yym476 := z.EncBinary()
						_ = yym476
						if false {
						} else {
							r.EncodeInt(int64(yy475))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy477 := *x.Replicas
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							r.EncodeInt(int64(yy477))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym480 := z.EncBinary()
						_ = yym480
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym481 := z.EncBinary()
						_ = yym481
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy483 := &x.Template
				yym484 := z.EncBinary()
				_ = yym484
				if false {
				} else if z.HasExtensions() && z.EncExt(yy483) {
				} else {
					z.EncFallback(yy483)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy485 := &x.Template
				yym486 := z.EncBinary()
				_ = yym486
				if false {
				} else if z.HasExtensions() && z.EncExt(yy485) {
				} else {
					z.EncFallback(yy485)
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[3] {
					yy488 := &x.Strategy
					yy488.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy489 := &x.Strategy
					yy489.CodecEncodeSelf(e)
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[4] {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq473[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[5] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy494 := *x.RevisionHistoryLimit
						yym495 := z.EncBinary()
						_ = yym495
						if false {
						} else {
							r.EncodeInt(int64(yy494))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy496 := *x.RevisionHistoryLimit
						yym497 := z.EncBinary()
						_ = yym497
						if false {
						} else {
							r.EncodeInt(int64(yy496))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[6] {
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq473[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym500 := z.EncBinary()
					_ = yym500
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[8] {
					if x.ProgressDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy503 := *x.ProgressDeadlineSeconds
						yym504 := z.EncBinary()
						_ = yym504
						if false {
						} else {
							r.EncodeInt(int64(yy503))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("progressDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ProgressDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy505 := *x.ProgressDeadlineSeconds
						yym506 := z.EncBinary()
						_ = yym506
						if false {
						} else {
							r.EncodeInt(int64(yy505))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym507 := z.DecBinary()
	_ = yym507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct508 := r.ContainerType()
		if yyct508 == codecSelferValueTypeMap1234 {
			yyl508 := r.ReadMapStart()
			if yyl508 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl508, d)
			}
		} else if yyct508 == codecSelferValueTypeArray1234 {
			yyl508 := r.ReadArrayStart()
			if yyl508 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl508, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys509Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys509Slc
	var yyhl509 bool = l >= 0
	for yyj509 := 0; ; yyj509++ {
		if yyhl509 {
			if yyj509 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys509Slc = r.DecodeBytes(yys509Slc, true, true)
		yys509 := string(yys509Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys509 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym511 := z.DecBinary()
				_ = yym511
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym513 := z.DecBinary()
				_ = yym513
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv514 := &x.Template
				yym515 := z.DecBinary()
				_ = yym515
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv514) {
				} else {
					z.DecFallback(yyv514, false)
				}
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv516 := &x.Strategy
				yyv516.CodecDecodeSelf(d)
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int32)
				}
				yym519 := z.DecBinary()
				_ = yym519
				if false {
				} else {
					*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		case "progressDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ProgressDeadlineSeconds != nil {
					x.ProgressDeadlineSeconds = nil
				}
			} else {
				if x.ProgressDeadlineSeconds == nil {
					x.ProgressDeadlineSeconds = new(int32)
				}
				yym523 := z.DecBinary()
				_ = yym523
				if false {
				} else {
					*((*int32)(x.ProgressDeadlineSeconds)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys509)
		} // end switch yys509
	} // end for yyj509
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj524 int
	var yyb524 bool
	var yyhl524 bool = l >= 0
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym526 := z.DecBinary()
		_ = yym526
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym528 := z.DecBinary()
		_ = yym528
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv529 := &x.Template
		yym530 := z.DecBinary()
		_ = yym530
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv529) {
		} else {
			z.DecFallback(yyv529, false)
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv531 := &x.Strategy
		yyv531.CodecDecodeSelf(d)
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int32)
		}
		yym534 := z.DecBinary()
		_ = yym534
		if false {
		} else {
			*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ProgressDeadlineSeconds != nil {
			x.ProgressDeadlineSeconds = nil
		}
	} else {
		if x.ProgressDeadlineSeconds == nil {
			x.ProgressDeadlineSeconds = new(int32)
		}
		yym538 := z.DecBinary()
		_ = yym538
		if false {
		} else {
			*((*int32)(x.ProgressDeadlineSeconds)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj524++
		if yyhl524 {
			yyb524 = yyj524 > l
		} else {
			yyb524 = r.CheckBreak()
		}
		if yyb524 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj524-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym539 := z.EncBinary()
		_ = yym539
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep540 := !z.EncBinary()
			yy2arr540 := z.EncBasicHandle().StructToArray
			var yyq540 [5]bool
			_, _, _ = yysep540, yyq540, yy2arr540
			const yyr540 bool = false
			yyq540[0] = x.Kind != ""
			yyq540[1] = x.APIVersion != ""
			yyq540[3] = len(x.UpdatedAnnotations) != 0
			var yynn540 int
			if yyr540 || yy2arr540 {
				r.EncodeArrayStart(5)
			} else {
				yynn540 = 2
				for _, b := range yyq540 {
					if b {
						yynn540++
					}
				}
				r.EncodeMapStart(yynn540)
				yynn540 = 0
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq540[0] {
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq540[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq540[1] {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq540[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq540[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym551 := z.EncBinary()
						_ = yym551
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq540[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym552 := z.EncBinary()
						_ = yym552
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy554 := &x.RollbackTo
				yy554.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy555 := &x.RollbackTo
				yy555.CodecEncodeSelf(e)
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym556 := z.DecBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct557 := r.ContainerType()
		if yyct557 == codecSelferValueTypeMap1234 {
			yyl557 := r.ReadMapStart()
			if yyl557 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl557, d)
			}
		} else if yyct557 == codecSelferValueTypeArray1234 {
			yyl557 := r.ReadArrayStart()
			if yyl557 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys558Slc
	var yyhl558 bool = l >= 0
	for yyj558 := 0; ; yyj558++ {
		if yyhl558 {
			if yyj558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys558Slc = r.DecodeBytes(yys558Slc, true, true)
		yys558 := string(yys558Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys558 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv562 := &x.UpdatedAnnotations
				yym563 := z.DecBinary()
				_ = yym563
				if false {
				} else {
					z.F.DecMapStringStringX(yyv562, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv564 := &x.RollbackTo
				yyv564.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys558)
		} // end switch yys558
	} // end for yyj558
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj565 int
	var yyb565 bool
	var yyhl565 bool = l >= 0
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv569 := &x.UpdatedAnnotations
		yym570 := z.DecBinary()
		_ = yym570
		if false {
		} else {
			z.F.DecMapStringStringX(yyv569, false, d)
		}
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv571 := &x.RollbackTo
		yyv571.CodecDecodeSelf(d)
	}
	for {
		yyj565++
		if yyhl565 {
			yyb565 = yyj565 > l
		} else {
			yyb565 = r.CheckBreak()
		}
		if yyb565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym572 := z.EncBinary()
		_ = yym572
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep573 := !z.EncBinary()
			yy2arr573 := z.EncBasicHandle().StructToArray
			var yyq573 [1]bool
			_, _, _ = yysep573, yyq573, yy2arr573
			const yyr573 bool = false
			yyq573[0] = x.Revision != 0
			var yynn573 int
			if yyr573 || yy2arr573 {
				r.EncodeArrayStart(1)
			} else {
				yynn573 = 0
				for _, b := range yyq573 {
					if b {
						yynn573++
					}
				}
				r.EncodeMapStart(yynn573)
				yynn573 = 0
			}
			if yyr573 || yy2arr573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq573[0] {
					yym575 := z.EncBinary()
					_ = yym575
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq573[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym576 := z.EncBinary()
					_ = yym576
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr573 || yy2arr573 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym577 := z.DecBinary()
	_ = yym577
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct578 := r.ContainerType()
		if yyct578 == codecSelferValueTypeMap1234 {
			yyl578 := r.ReadMapStart()
			if yyl578 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl578, d)
			}
		} else if yyct578 == codecSelferValueTypeArray1234 {
			yyl578 := r.ReadArrayStart()
			if yyl578 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl578, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys579Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys579Slc
	var yyhl579 bool = l >= 0
	for yyj579 := 0; ; yyj579++ {
		if yyhl579 {
			if yyj579 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys579Slc = r.DecodeBytes(yys579Slc, true, true)
		yys579 := string(yys579Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys579 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys579)
		} // end switch yys579
	} // end for yyj579
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj581 int
	var yyb581 bool
	var yyhl581 bool = l >= 0
	yyj581++
	if yyhl581 {
		yyb581 = yyj581 > l
	} else {
		yyb581 = r.CheckBreak()
	}
	if yyb581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj581++
		if yyhl581 {
			yyb581 = yyj581 > l
		} else {
			yyb581 = r.CheckBreak()
		}
		if yyb581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym583 := z.EncBinary()
		_ = yym583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep584 := !z.EncBinary()
			yy2arr584 := z.EncBasicHandle().StructToArray
			var yyq584 [2]bool
			_, _, _ = yysep584, yyq584, yy2arr584
			const yyr584 bool = false
			yyq584[0] = x.Type != ""
			yyq584[1] = x.RollingUpdate != nil
			var yynn584 int
			if yyr584 || yy2arr584 {
				r.EncodeArrayStart(2)
			} else {
				yynn584 = 0
				for _, b := range yyq584 {
					if b {
						yynn584++
					}
				}
				r.EncodeMapStart(yynn584)
				yynn584 = 0
			}
			if yyr584 || yy2arr584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq584[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq584[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr584 || yy2arr584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq584[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq584[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr584 || yy2arr584 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym587 := z.DecBinary()
	_ = yym587
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct588 := r.ContainerType()
		if yyct588 == codecSelferValueTypeMap1234 {
			yyl588 := r.ReadMapStart()
			if yyl588 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl588, d)
			}
		} else if yyct588 == codecSelferValueTypeArray1234 {
			yyl588 := r.ReadArrayStart()
			if yyl588 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl588, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys589Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys589Slc
	var yyhl589 bool = l >= 0
	for yyj589 := 0; ; yyj589++ {
		if yyhl589 {
			if yyj589 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys589Slc = r.DecodeBytes(yys589Slc, true, true)
		yys589 := string(yys589Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys589 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys589)
		} // end switch yys589
	} // end for yyj589
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym595 := z.EncBinary()
	_ = yym595
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym597 := z.EncBinary()
		_ = yym597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep598 := !z.EncBinary()
			yy2arr598 := z.EncBasicHandle().StructToArray
			var yyq598 [2]bool
			_, _, _ = yysep598, yyq598, yy2arr598
			const yyr598 bool = false
			yyq598[0] = x.MaxUnavailable != nil
			yyq598[1] = x.MaxSurge != nil
			var yynn598 int
			if yyr598 || yy2arr598 {
				r.EncodeArrayStart(2)
			} else {
				yynn598 = 0
				for _, b := range yyq598 {
					if b {
						yynn598++
					}
				}
				r.EncodeMapStart(yynn598)
				yynn598 = 0
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym600 := z.EncBinary()
						_ = yym600
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym600 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym601 := z.EncBinary()
						_ = yym601
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym601 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[1] {
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym603 := z.EncBinary()
						_ = yym603
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym603 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq598[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym604 := z.EncBinary()
						_ = yym604
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym604 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym605 := z.DecBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct606 := r.ContainerType()
		if yyct606 == codecSelferValueTypeMap1234 {
			yyl606 := r.ReadMapStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl606, d)
			}
		} else if yyct606 == codecSelferValueTypeArray1234 {
			yyl606 := r.ReadArrayStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys607Slc
	var yyhl607 bool = l >= 0
	for yyj607 := 0; ; yyj607++ {
		if yyhl607 {
			if yyj607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys607Slc = r.DecodeBytes(yys607Slc, true, true)
		yys607 := string(yys607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys607 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg5_intstr.IntOrString)
				}
				yym609 := z.DecBinary()
				_ = yym609
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym609 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				if x.MaxSurge != nil {
					x.MaxSurge = nil
				}
			} else {
				if x.MaxSurge == nil {
					x.MaxSurge = new(pkg5_intstr.IntOrString)
				}
				yym611 := z.DecBinary()
				_ = yym611
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
				} else if !yym611 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxSurge)
				} else {
					z.DecFallback(x.MaxSurge, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys607)
		} // end switch yys607
	} // end for yyj607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj612 int
	var yyb612 bool
	var yyhl612 bool = l >= 0
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg5_intstr.IntOrString)
		}
		yym614 := z.DecBinary()
		_ = yym614
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym614 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxSurge != nil {
			x.MaxSurge = nil
		}
	} else {
		if x.MaxSurge == nil {
			x.MaxSurge = new(pkg5_intstr.IntOrString)
		}
		yym616 := z.DecBinary()
		_ = yym616
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
		} else if !yym616 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxSurge)
		} else {
			z.DecFallback(x.MaxSurge, false)
		}
	}
	for {
		yyj612++
		if yyhl612 {
			yyb612 = yyj612 > l
		} else {
			yyb612 = r.CheckBreak()
		}
		if yyb612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym617 := z.EncBinary()
		_ = yym617
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep618 := !z.EncBinary()
			yy2arr618 := z.EncBasicHandle().StructToArray
			var yyq618 [6]bool
			_, _, _ = yysep618, yyq618, yy2arr618
			const yyr618 bool = false
			yyq618[0] = x.ObservedGeneration != 0
			yyq618[1] = x.Replicas != 0
			yyq618[2] = x.UpdatedReplicas != 0
			yyq618[3] = x.AvailableReplicas != 0
			yyq618[4] = x.UnavailableReplicas != 0
			yyq618[5] = len(x.Conditions) != 0
			var yynn618 int
			if yyr618 || yy2arr618 {
				r.EncodeArrayStart(6)
			} else {
				yynn618 = 0
				for _, b := range yyq618 {
					if b {
						yynn618++
					}
				}
				r.EncodeMapStart(yynn618)
				yynn618 = 0
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[0] {
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[1] {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[2] {
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[3] {
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[4] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym635 := z.EncBinary()
						_ = yym635
						if false {
						} else {
							h.encSliceDeploymentCondition(([]DeploymentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq618[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym636 := z.EncBinary()
						_ = yym636
						if false {
						} else {
							h.encSliceDeploymentCondition(([]DeploymentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym637 := z.DecBinary()
	_ = yym637
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct638 := r.ContainerType()
		if yyct638 == codecSelferValueTypeMap1234 {
			yyl638 := r.ReadMapStart()
			if yyl638 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl638, d)
			}
		} else if yyct638 == codecSelferValueTypeArray1234 {
			yyl638 := r.ReadArrayStart()
			if yyl638 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl638, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys639Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys639Slc
	var yyhl639 bool = l >= 0
	for yyj639 := 0; ; yyj639++ {
		if yyhl639 {
			if yyj639 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys639Slc = r.DecodeBytes(yys639Slc, true, true)
		yys639 := string(yys639Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys639 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv645 := &x.Conditions
				yym646 := z.DecBinary()
				_ = yym646
				if false {
				} else {
					h.decSliceDeploymentCondition((*[]DeploymentCondition)(yyv645), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys639)
		} // end switch yys639
	} // end for yyj639
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj647 int
	var yyb647 bool
	var yyhl647 bool = l >= 0
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv653 := &x.Conditions
		yym654 := z.DecBinary()
		_ = yym654
		if false {
		} else {
			h.decSliceDeploymentCondition((*[]DeploymentCondition)(yyv653), d)
		}
	}
	for {
		yyj647++
		if yyhl647 {
			yyb647 = yyj647 > l
		} else {
			yyb647 = r.CheckBreak()
		}
		if yyb647 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj647-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym655 := z.EncBinary()
	_ = yym655
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym656 := z.DecBinary()
	_ = yym656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *DeploymentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym657 := z.EncBinary()
		_ = yym657
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep658 := !z.EncBinary()
			yy2arr658 := z.EncBasicHandle().StructToArray
			var yyq658 [6]bool
			_, _, _ = yysep658, yyq658, yy2arr658
			const yyr658 bool = false
			yyq658[2] = true
			yyq658[3] = true
			yyq658[4] = x.Reason != ""
			yyq658[5] = x.Message != ""
			var yynn658 int
			if yyr658 || yy2arr658 {
				r.EncodeArrayStart(6)
			} else {
				yynn658 = 2
				for _, b := range yyq658 {
					if b {
						yynn658++
					}
				}
				r.EncodeMapStart(yynn658)
				yynn658 = 0
			}
			if yyr658 || yy2arr658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr658 || yy2arr658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym661 := z.EncBinary()
				_ = yym661
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym662 := z.EncBinary()
				_ = yym662
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr658 || yy2arr658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq658[2] {
					yy664 := &x.LastUpdateTime
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else if z.HasExtensions() && z.EncExt(yy664) {
					} else if yym665 {
						z.EncBinaryMarshal(yy664)
					} else if !yym665 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy664)
					} else {
						z.EncFallback(yy664)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq658[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastUpdateTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy666 := &x.LastUpdateTime
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else if z.HasExtensions() && z.EncExt(yy666) {
					} else if yym667 {
						z.EncBinaryMarshal(yy666)
					} else if !yym667 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy666)
					} else {
						z.EncFallback(yy666)
					}
				}
			}
			if yyr658 || yy2arr658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq658[3] {
					yy669 := &x.LastTransitionTime
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else if z.HasExtensions() && z.EncExt(yy669) {
					} else if yym670 {
						z.EncBinaryMarshal(yy669)
					} else if !yym670 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy669)
					} else {
						z.EncFallback(yy669)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq658[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy671 := &x.LastTransitionTime
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else if z.HasExtensions() && z.EncExt(yy671) {
					} else if yym672 {
						z.EncBinaryMarshal(yy671)
					} else if !yym672 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy671)
					} else {
						z.EncFallback(yy671)
					}
				}
			}
			if yyr658 || yy2arr658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq658[4] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq658[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr658 || yy2arr658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq658[5] {
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq658[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr658 || yy2arr658 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym679 := z.DecBinary()
	_ = yym679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct680 := r.ContainerType()
		if yyct680 == codecSelferValueTypeMap1234 {
			yyl680 := r.ReadMapStart()
			if yyl680 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl680, d)
			}
		} else if yyct680 == codecSelferValueTypeArray1234 {
			yyl680 := r.ReadArrayStart()
			if yyl680 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl680, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys681Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys681Slc
	var yyhl681 bool = l >= 0
	for yyj681 := 0; ; yyj681++ {
		if yyhl681 {
			if yyj681 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys681Slc = r.DecodeBytes(yys681Slc, true, true)
		yys681 := string(yys681Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys681 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastUpdateTime":
			if r.TryDecodeAsNil() {
				x.LastUpdateTime = pkg1_unversioned.Time{}
			} else {
				yyv684 := &x.LastUpdateTime
				yym685 := z.DecBinary()
				_ = yym685
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv684) {
				} else if yym685 {
					z.DecBinaryUnmarshal(yyv684)
				} else if !yym685 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv684)
				} else {
					z.DecFallback(yyv684, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv686 := &x.LastTransitionTime
				yym687 := z.DecBinary()
				_ = yym687
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv686) {
				} else if yym687 {
					z.DecBinaryUnmarshal(yyv686)
				} else if !yym687 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv686)
				} else {
					z.DecFallback(yyv686, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys681)
		} // end switch yys681
	} // end for yyj681
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj690 int
	var yyb690 bool
	var yyhl690 bool = l >= 0
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentConditionType(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastUpdateTime = pkg1_unversioned.Time{}
	} else {
		yyv693 := &x.LastUpdateTime
		yym694 := z.DecBinary()
		_ = yym694
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv693) {
		} else if yym694 {
			z.DecBinaryUnmarshal(yyv693)
		} else if !yym694 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv693)
		} else {
			z.DecFallback(yyv693, false)
		}
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv695 := &x.LastTransitionTime
		yym696 := z.DecBinary()
		_ = yym696
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv695) {
		} else if yym696 {
			z.DecBinaryUnmarshal(yyv695)
		} else if !yym696 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv695)
		} else {
			z.DecFallback(yyv695, false)
		}
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj690++
		if yyhl690 {
			yyb690 = yyj690 > l
		} else {
			yyb690 = r.CheckBreak()
		}
		if yyb690 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj690-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym699 := z.EncBinary()
		_ = yym699
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep700 := !z.EncBinary()
			yy2arr700 := z.EncBasicHandle().StructToArray
			var yyq700 [4]bool
			_, _, _ = yysep700, yyq700, yy2arr700
			const yyr700 bool = false
			yyq700[0] = x.Kind != ""
			yyq700[1] = x.APIVersion != ""
			yyq700[2] = true
			var yynn700 int
			if yyr700 || yy2arr700 {
				r.EncodeArrayStart(4)
			} else {
				yynn700 = 1
				for _, b := range yyq700 {
					if b {
						yynn700++
					}
				}
				r.EncodeMapStart(yynn700)
				yynn700 = 0
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[0] {
					yym702 := z.EncBinary()
					_ = yym702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq700[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[1] {
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq700[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq700[2] {
					yy708 := &x.ListMeta
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else if z.HasExtensions() && z.EncExt(yy708) {
					} else {
						z.EncFallback(yy708)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq700[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy710 := &x.ListMeta
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else if z.HasExtensions() && z.EncExt(yy710) {
					} else {
						z.EncFallback(yy710)
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym713 := z.EncBinary()
					_ = yym713
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr700 || yy2arr700 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym715 := z.DecBinary()
	_ = yym715
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct716 := r.ContainerType()
		if yyct716 == codecSelferValueTypeMap1234 {
			yyl716 := r.ReadMapStart()
			if yyl716 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl716, d)
			}
		} else if yyct716 == codecSelferValueTypeArray1234 {
			yyl716 := r.ReadArrayStart()
			if yyl716 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl716, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys717Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys717Slc
	var yyhl717 bool = l >= 0
	for yyj717 := 0; ; yyj717++ {
		if yyhl717 {
			if yyj717 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys717Slc = r.DecodeBytes(yys717Slc, true, true)
		yys717 := string(yys717Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys717 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv720 := &x.ListMeta
				yym721 := z.DecBinary()
				_ = yym721
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv720) {
				} else {
					z.DecFallback(yyv720, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv722 := &x.Items
				yym723 := z.DecBinary()
				_ = yym723
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv722), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys717)
		} // end switch yys717
	} // end for yyj717
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj724 int
	var yyb724 bool
	var yyhl724 bool = l >= 0
	yyj724++
	if yyhl724 {
		yyb724 = yyj724 > l
	} else {
		yyb724 = r.CheckBreak()
	}
	if yyb724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj724++
	if yyhl724 {
		yyb724 = yyj724 > l
	} else {
		yyb724 = r.CheckBreak()
	}
	if yyb724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj724++
	if yyhl724 {
		yyb724 = yyj724 > l
	} else {
		yyb724 = r.CheckBreak()
	}
	if yyb724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv727 := &x.ListMeta
		yym728 := z.DecBinary()
		_ = yym728
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv727) {
		} else {
			z.DecFallback(yyv727, false)
		}
	}
	yyj724++
	if yyhl724 {
		yyb724 = yyj724 > l
	} else {
		yyb724 = r.CheckBreak()
	}
	if yyb724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv729 := &x.Items
		yym730 := z.DecBinary()
		_ = yym730
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv729), d)
		}
	}
	for {
		yyj724++
		if yyhl724 {
			yyb724 = yyj724 > l
		} else {
			yyb724 = r.CheckBreak()
		}
		if yyb724 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj724-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym731 := z.EncBinary()
		_ = yym731
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep732 := !z.EncBinary()
			yy2arr732 := z.EncBasicHandle().StructToArray
			var yyq732 [2]bool
			_, _, _ = yysep732, yyq732, yy2arr732
			const yyr732 bool = false
			yyq732[0] = x.Selector != nil
			var yynn732 int
			if yyr732 || yy2arr732 {
				r.EncodeArrayStart(2)
			} else {
				yynn732 = 1
				for _, b := range yyq732 {
					if b {
						yynn732++
					}
				}
				r.EncodeMapStart(yynn732)
				yynn732 = 0
			}
			if yyr732 || yy2arr732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq732[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym734 := z.EncBinary()
						_ = yym734
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq732[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym735 := z.EncBinary()
						_ = yym735
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr732 || yy2arr732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy737 := &x.Template
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else if z.HasExtensions() && z.EncExt(yy737) {
				} else {
					z.EncFallback(yy737)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy739 := &x.Template
				yym740 := z.EncBinary()
				_ = yym740
				if false {
				} else if z.HasExtensions() && z.EncExt(yy739) {
				} else {
					z.EncFallback(yy739)
				}
			}
			if yyr732 || yy2arr732 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym741 := z.DecBinary()
	_ = yym741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct742 := r.ContainerType()
		if yyct742 == codecSelferValueTypeMap1234 {
			yyl742 := r.ReadMapStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl742, d)
			}
		} else if yyct742 == codecSelferValueTypeArray1234 {
			yyl742 := r.ReadArrayStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys743Slc
	var yyhl743 bool = l >= 0
	for yyj743 := 0; ; yyj743++ {
		if yyhl743 {
			if yyj743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys743Slc = r.DecodeBytes(yys743Slc, true, true)
		yys743 := string(yys743Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys743 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym745 := z.DecBinary()
				_ = yym745
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv746 := &x.Template
				yym747 := z.DecBinary()
				_ = yym747
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv746) {
				} else {
					z.DecFallback(yyv746, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys743)
		} // end switch yys743
	} // end for yyj743
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj748 int
	var yyb748 bool
	var yyhl748 bool = l >= 0
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym750 := z.DecBinary()
		_ = yym750
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv751 := &x.Template
		yym752 := z.DecBinary()
		_ = yym752
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv751) {
		} else {
			z.DecFallback(yyv751, false)
		}
	}
	for {
		yyj748++
		if yyhl748 {
			yyb748 = yyj748 > l
		} else {
			yyb748 = r.CheckBreak()
		}
		if yyb748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [4]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			var yynn754 int
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(4)
			} else {
				yynn754 = 4
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
				yynn754 = 0
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym760 := z.EncBinary()
				_ = yym760
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberReady"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym767 := z.DecBinary()
	_ = yym767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct768 := r.ContainerType()
		if yyct768 == codecSelferValueTypeMap1234 {
			yyl768 := r.ReadMapStart()
			if yyl768 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl768, d)
			}
		} else if yyct768 == codecSelferValueTypeArray1234 {
			yyl768 := r.ReadArrayStart()
			if yyl768 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl768, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys769Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys769Slc
	var yyhl769 bool = l >= 0
	for yyj769 := 0; ; yyj769++ {
		if yyhl769 {
			if yyj769 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys769Slc = r.DecodeBytes(yys769Slc, true, true)
		yys769 := string(yys769Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys769 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberReady":
			if r.TryDecodeAsNil() {
				x.NumberReady = 0
			} else {
				x.NumberReady = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys769)
		} // end switch yys769
	} // end for yyj769
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj774 int
	var yyb774 bool
	var yyhl774 bool = l >= 0
	yyj774++
	if yyhl774 {
		yyb774 = yyj774 > l
	} else {
		yyb774 = r.CheckBreak()
	}
	if yyb774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj774++
	if yyhl774 {
		yyb774 = yyj774 > l
	} else {
		yyb774 = r.CheckBreak()
	}
	if yyb774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj774++
	if yyhl774 {
		yyb774 = yyj774 > l
	} else {
		yyb774 = r.CheckBreak()
	}
	if yyb774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj774++
	if yyhl774 {
		yyb774 = yyj774 > l
	} else {
		yyb774 = r.CheckBreak()
	}
	if yyb774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberReady = 0
	} else {
		x.NumberReady = int32(r.DecodeInt(32))
	}
	for {
		yyj774++
		if yyhl774 {
			yyb774 = yyj774 > l
		} else {
			yyb774 = r.CheckBreak()
		}
		if yyb774 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj774-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym779 := z.EncBinary()
		_ = yym779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep780 := !z.EncBinary()
			yy2arr780 := z.EncBasicHandle().StructToArray
			var yyq780 [5]bool
			_, _, _ = yysep780, yyq780, yy2arr780
			const yyr780 bool = false
			yyq780[0] = x.Kind != ""
			yyq780[1] = x.APIVersion != ""
			yyq780[2] = true
			yyq780[3] = true
			yyq780[4] = true
			var yynn780 int
			if yyr780 || yy2arr780 {
				r.EncodeArrayStart(5)
			} else {
				yynn780 = 0
				for _, b := range yyq780 {
					if b {
						yynn780++
					}
				}
				r.EncodeMapStart(yynn780)
				yynn780 = 0
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[0] {
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq780[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[1] {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[2] {
					yy788 := &x.ObjectMeta
					yym789 := z.EncBinary()
					_ = yym789
					if false {
					} else if z.HasExtensions() && z.EncExt(yy788) {
					} else {
						z.EncFallback(yy788)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq780[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy790 := &x.ObjectMeta
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else if z.HasExtensions() && z.EncExt(yy790) {
					} else {
						z.EncFallback(yy790)
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[3] {
					yy793 := &x.Spec
					yy793.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq780[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy794 := &x.Spec
					yy794.CodecEncodeSelf(e)
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[4] {
					yy796 := &x.Status
					yy796.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq780[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy797 := &x.Status
					yy797.CodecEncodeSelf(e)
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym798 := z.DecBinary()
	_ = yym798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct799 := r.ContainerType()
		if yyct799 == codecSelferValueTypeMap1234 {
			yyl799 := r.ReadMapStart()
			if yyl799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl799, d)
			}
		} else if yyct799 == codecSelferValueTypeArray1234 {
			yyl799 := r.ReadArrayStart()
			if yyl799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys800Slc
	var yyhl800 bool = l >= 0
	for yyj800 := 0; ; yyj800++ {
		if yyhl800 {
			if yyj800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys800Slc = r.DecodeBytes(yys800Slc, true, true)
		yys800 := string(yys800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys800 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv803 := &x.ObjectMeta
				yym804 := z.DecBinary()
				_ = yym804
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv803) {
				} else {
					z.DecFallback(yyv803, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv805 := &x.Spec
				yyv805.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv806 := &x.Status
				yyv806.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys800)
		} // end switch yys800
	} // end for yyj800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj807 int
	var yyb807 bool
	var yyhl807 bool = l >= 0
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv810 := &x.ObjectMeta
		yym811 := z.DecBinary()
		_ = yym811
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv810) {
		} else {
			z.DecFallback(yyv810, false)
		}
	}
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv812 := &x.Spec
		yyv812.CodecDecodeSelf(d)
	}
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv813 := &x.Status
		yyv813.CodecDecodeSelf(d)
	}
	for {
		yyj807++
		if yyhl807 {
			yyb807 = yyj807 > l
		} else {
			yyb807 = r.CheckBreak()
		}
		if yyb807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym814 := z.EncBinary()
		_ = yym814
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep815 := !z.EncBinary()
			yy2arr815 := z.EncBasicHandle().StructToArray
			var yyq815 [4]bool
			_, _, _ = yysep815, yyq815, yy2arr815
			const yyr815 bool = false
			yyq815[0] = x.Kind != ""
			yyq815[1] = x.APIVersion != ""
			yyq815[2] = true
			var yynn815 int
			if yyr815 || yy2arr815 {
				r.EncodeArrayStart(4)
			} else {
				yynn815 = 1
				for _, b := range yyq815 {
					if b {
						yynn815++
					}
				}
				r.EncodeMapStart(yynn815)
				yynn815 = 0
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[0] {
					yym817 := z.EncBinary()
					_ = yym817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq815[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym818 := z.EncBinary()
					_ = yym818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[1] {
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq815[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym821 := z.EncBinary()
					_ = yym821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq815[2] {
					yy823 := &x.ListMeta
					yym824 := z.EncBinary()
					_ = yym824
					if false {
					} else if z.HasExtensions() && z.EncExt(yy823) {
					} else {
						z.EncFallback(yy823)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq815[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy825 := &x.ListMeta
					yym826 := z.EncBinary()
					_ = yym826
					if false {
					} else if z.HasExtensions() && z.EncExt(yy825) {
					} else {
						z.EncFallback(yy825)
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr815 || yy2arr815 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym830 := z.DecBinary()
	_ = yym830
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct831 := r.ContainerType()
		if yyct831 == codecSelferValueTypeMap1234 {
			yyl831 := r.ReadMapStart()
			if yyl831 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl831, d)
			}
		} else if yyct831 == codecSelferValueTypeArray1234 {
			yyl831 := r.ReadArrayStart()
			if yyl831 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl831, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys832Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys832Slc
	var yyhl832 bool = l >= 0
	for yyj832 := 0; ; yyj832++ {
		if yyhl832 {
			if yyj832 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys832Slc = r.DecodeBytes(yys832Slc, true, true)
		yys832 := string(yys832Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys832 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv835 := &x.ListMeta
				yym836 := z.DecBinary()
				_ = yym836
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv835) {
				} else {
					z.DecFallback(yyv835, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv837 := &x.Items
				yym838 := z.DecBinary()
				_ = yym838
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv837), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys832)
		} // end switch yys832
	} // end for yyj832
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj839 int
	var yyb839 bool
	var yyhl839 bool = l >= 0
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv842 := &x.ListMeta
		yym843 := z.DecBinary()
		_ = yym843
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv842) {
		} else {
			z.DecFallback(yyv842, false)
		}
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv844 := &x.Items
		yym845 := z.DecBinary()
		_ = yym845
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv844), d)
		}
	}
	for {
		yyj839++
		if yyhl839 {
			yyb839 = yyj839 > l
		} else {
			yyb839 = r.CheckBreak()
		}
		if yyb839 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj839-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym846 := z.EncBinary()
		_ = yym846
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep847 := !z.EncBinary()
			yy2arr847 := z.EncBasicHandle().StructToArray
			var yyq847 [4]bool
			_, _, _ = yysep847, yyq847, yy2arr847
			const yyr847 bool = false
			yyq847[0] = x.Kind != ""
			yyq847[1] = x.APIVersion != ""
			yyq847[2] = true
			var yynn847 int
			if yyr847 || yy2arr847 {
				r.EncodeArrayStart(4)
			} else {
				yynn847 = 1
				for _, b := range yyq847 {
					if b {
						yynn847++
					}
				}
				r.EncodeMapStart(yynn847)
				yynn847 = 0
			}
			if yyr847 || yy2arr847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq847[0] {
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq847[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym850 := z.EncBinary()
					_ = yym850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr847 || yy2arr847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq847[1] {
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq847[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym853 := z.EncBinary()
					_ = yym853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr847 || yy2arr847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq847[2] {
					yy855 := &x.ListMeta
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else if z.HasExtensions() && z.EncExt(yy855) {
					} else {
						z.EncFallback(yy855)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq847[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy857 := &x.ListMeta
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else if z.HasExtensions() && z.EncExt(yy857) {
					} else {
						z.EncFallback(yy857)
					}
				}
			}
			if yyr847 || yy2arr847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr847 || yy2arr847 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym862 := z.DecBinary()
	_ = yym862
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct863 := r.ContainerType()
		if yyct863 == codecSelferValueTypeMap1234 {
			yyl863 := r.ReadMapStart()
			if yyl863 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl863, d)
			}
		} else if yyct863 == codecSelferValueTypeArray1234 {
			yyl863 := r.ReadArrayStart()
			if yyl863 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl863, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys864Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys864Slc
	var yyhl864 bool = l >= 0
	for yyj864 := 0; ; yyj864++ {
		if yyhl864 {
			if yyj864 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys864Slc = r.DecodeBytes(yys864Slc, true, true)
		yys864 := string(yys864Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys864 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv867 := &x.ListMeta
				yym868 := z.DecBinary()
				_ = yym868
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv867) {
				} else {
					z.DecFallback(yyv867, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv869 := &x.Items
				yym870 := z.DecBinary()
				_ = yym870
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv869), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys864)
		} // end switch yys864
	} // end for yyj864
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj871 int
	var yyb871 bool
	var yyhl871 bool = l >= 0
	yyj871++
	if yyhl871 {
		yyb871 = yyj871 > l
	} else {
		yyb871 = r.CheckBreak()
	}
	if yyb871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj871++
	if yyhl871 {
		yyb871 = yyj871 > l
	} else {
		yyb871 = r.CheckBreak()
	}
	if yyb871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj871++
	if yyhl871 {
		yyb871 = yyj871 > l
	} else {
		yyb871 = r.CheckBreak()
	}
	if yyb871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv874 := &x.ListMeta
		yym875 := z.DecBinary()
		_ = yym875
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv874) {
		} else {
			z.DecFallback(yyv874, false)
		}
	}
	yyj871++
	if yyhl871 {
		yyb871 = yyj871 > l
	} else {
		yyb871 = r.CheckBreak()
	}
	if yyb871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv876 := &x.Items
		yym877 := z.DecBinary()
		_ = yym877
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv876), d)
		}
	}
	for {
		yyj871++
		if yyhl871 {
			yyb871 = yyj871 > l
		} else {
			yyb871 = r.CheckBreak()
		}
		if yyb871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym878 := z.EncBinary()
		_ = yym878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep879 := !z.EncBinary()
			yy2arr879 := z.EncBasicHandle().StructToArray
			var yyq879 [5]bool
			_, _, _ = yysep879, yyq879, yy2arr879
			const yyr879 bool = false
			yyq879[0] = x.Kind != ""
			yyq879[1] = x.APIVersion != ""
			yyq879[2] = true
			yyq879[3] = true
			yyq879[4] = true
			var yynn879 int
			if yyr879 || yy2arr879 {
				r.EncodeArrayStart(5)
			} else {
				yynn879 = 0
				for _, b := range yyq879 {
					if b {
						yynn879++
					}
				}
				r.EncodeMapStart(yynn879)
				yynn879 = 0
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[0] {
					yym881 := z.EncBinary()
					_ = yym881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq879[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[1] {
					yym884 := z.EncBinary()
					_ = yym884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[2] {
					yy887 := &x.ObjectMeta
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else if z.HasExtensions() && z.EncExt(yy887) {
					} else {
						z.EncFallback(yy887)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq879[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy889 := &x.ObjectMeta
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else if z.HasExtensions() && z.EncExt(yy889) {
					} else {
						z.EncFallback(yy889)
					}
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[3] {
					yy892 := &x.Spec
					yy892.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq879[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy893 := &x.Spec
					yy893.CodecEncodeSelf(e)
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[4] {
					yy895 := &x.Status
					yy895.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq879[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy896 := &x.Status
					yy896.CodecEncodeSelf(e)
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym897 := z.DecBinary()
	_ = yym897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct898 := r.ContainerType()
		if yyct898 == codecSelferValueTypeMap1234 {
			yyl898 := r.ReadMapStart()
			if yyl898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl898, d)
			}
		} else if yyct898 == codecSelferValueTypeArray1234 {
			yyl898 := r.ReadArrayStart()
			if yyl898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys899Slc
	var yyhl899 bool = l >= 0
	for yyj899 := 0; ; yyj899++ {
		if yyhl899 {
			if yyj899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys899Slc = r.DecodeBytes(yys899Slc, true, true)
		yys899 := string(yys899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys899 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv902 := &x.ObjectMeta
				yym903 := z.DecBinary()
				_ = yym903
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv902) {
				} else {
					z.DecFallback(yyv902, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv904 := &x.Spec
				yyv904.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv905 := &x.Status
				yyv905.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys899)
		} // end switch yys899
	} // end for yyj899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj906 int
	var yyb906 bool
	var yyhl906 bool = l >= 0
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv909 := &x.ObjectMeta
		yym910 := z.DecBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv909) {
		} else {
			z.DecFallback(yyv909, false)
		}
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv911 := &x.Spec
		yyv911.CodecDecodeSelf(d)
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv912 := &x.Status
		yyv912.CodecDecodeSelf(d)
	}
	for {
		yyj906++
		if yyhl906 {
			yyb906 = yyj906 > l
		} else {
			yyb906 = r.CheckBreak()
		}
		if yyb906 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj906-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym913 := z.EncBinary()
		_ = yym913
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep914 := !z.EncBinary()
			yy2arr914 := z.EncBasicHandle().StructToArray
			var yyq914 [4]bool
			_, _, _ = yysep914, yyq914, yy2arr914
			const yyr914 bool = false
			yyq914[0] = x.Kind != ""
			yyq914[1] = x.APIVersion != ""
			yyq914[2] = true
			var yynn914 int
			if yyr914 || yy2arr914 {
				r.EncodeArrayStart(4)
			} else {
				yynn914 = 1
				for _, b := range yyq914 {
					if b {
						yynn914++
					}
				}
				r.EncodeMapStart(yynn914)
				yynn914 = 0
			}
			if yyr914 || yy2arr914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq914[0] {
					yym916 := z.EncBinary()
					_ = yym916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq914[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr914 || yy2arr914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq914[1] {
					yym919 := z.EncBinary()
					_ = yym919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq914[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym920 := z.EncBinary()
					_ = yym920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr914 || yy2arr914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq914[2] {
					yy922 := &x.ListMeta
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else if z.HasExtensions() && z.EncExt(yy922) {
					} else {
						z.EncFallback(yy922)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq914[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy924 := &x.ListMeta
					yym925 := z.EncBinary()
					_ = yym925
					if false {
					} else if z.HasExtensions() && z.EncExt(yy924) {
					} else {
						z.EncFallback(yy924)
					}
				}
			}
			if yyr914 || yy2arr914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr914 || yy2arr914 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym929 := z.DecBinary()
	_ = yym929
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct930 := r.ContainerType()
		if yyct930 == codecSelferValueTypeMap1234 {
			yyl930 := r.ReadMapStart()
			if yyl930 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl930, d)
			}
		} else if yyct930 == codecSelferValueTypeArray1234 {
			yyl930 := r.ReadArrayStart()
			if yyl930 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl930, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys931Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys931Slc
	var yyhl931 bool = l >= 0
	for yyj931 := 0; ; yyj931++ {
		if yyhl931 {
			if yyj931 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys931Slc = r.DecodeBytes(yys931Slc, true, true)
		yys931 := string(yys931Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys931 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv934 := &x.ListMeta
				yym935 := z.DecBinary()
				_ = yym935
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv934) {
				} else {
					z.DecFallback(yyv934, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv936 := &x.Items
				yym937 := z.DecBinary()
				_ = yym937
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv936), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys931)
		} // end switch yys931
	} // end for yyj931
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj938 int
	var yyb938 bool
	var yyhl938 bool = l >= 0
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv941 := &x.ListMeta
		yym942 := z.DecBinary()
		_ = yym942
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv941) {
		} else {
			z.DecFallback(yyv941, false)
		}
	}
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv943 := &x.Items
		yym944 := z.DecBinary()
		_ = yym944
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv943), d)
		}
	}
	for {
		yyj938++
		if yyhl938 {
			yyb938 = yyj938 > l
		} else {
			yyb938 = r.CheckBreak()
		}
		if yyb938 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj938-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym945 := z.EncBinary()
		_ = yym945
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep946 := !z.EncBinary()
			yy2arr946 := z.EncBasicHandle().StructToArray
			var yyq946 [6]bool
			_, _, _ = yysep946, yyq946, yy2arr946
			const yyr946 bool = false
			yyq946[0] = x.Parallelism != nil
			yyq946[1] = x.Completions != nil
			yyq946[2] = x.ActiveDeadlineSeconds != nil
			yyq946[3] = x.Selector != nil
			yyq946[4] = x.AutoSelector != nil
			var yynn946 int
			if yyr946 || yy2arr946 {
				r.EncodeArrayStart(6)
			} else {
				yynn946 = 1
				for _, b := range yyq946 {
					if b {
						yynn946++
					}
				}
				r.EncodeMapStart(yynn946)
				yynn946 = 0
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy948 := *x.Parallelism
						yym949 := z.EncBinary()
						_ = yym949
						if false {
						} else {
							r.EncodeInt(int64(yy948))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq946[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy950 := *x.Parallelism
						yym951 := z.EncBinary()
						_ = yym951
						if false {
						} else {
							r.EncodeInt(int64(yy950))
						}
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy953 := *x.Completions
						yym954 := z.EncBinary()
						_ = yym954
						if false {
						} else {
							r.EncodeInt(int64(yy953))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq946[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy955 := *x.Completions
						yym956 := z.EncBinary()
						_ = yym956
						if false {
						} else {
							r.EncodeInt(int64(yy955))
						}
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy958 := *x.ActiveDeadlineSeconds
						yym959 := z.EncBinary()
						_ = yym959
						if false {
						} else {
							r.EncodeInt(int64(yy958))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq946[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy960 := *x.ActiveDeadlineSeconds
						yym961 := z.EncBinary()
						_ = yym961
						if false {
						} else {
							r.EncodeInt(int64(yy960))
						}
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym963 := z.EncBinary()
						_ = yym963
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq946[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym964 := z.EncBinary()
						_ = yym964
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[4] {
					if x.AutoSelector == nil {
						r.EncodeNil()
					} else {
						yy966 := *x.AutoSelector
						yym967 := z.EncBinary()
						_ = yym967
						if false {
						} else {
							r.EncodeBool(bool(yy966))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq946[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("autoSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AutoSelector == nil {
						r.EncodeNil()
					} else {
						yy968 := *x.AutoSelector
						yym969 := z.EncBinary()
						_ = yym969
						if false {
						} else {
							r.EncodeBool(bool(yy968))
						}
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy971 := &x.Template
				yym972 := z.EncBinary()
				_ = yym972
				if false {
				} else if z.HasExtensions() && z.EncExt(yy971) {
				} else {
					z.EncFallback(yy971)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy973 := &x.Template
				yym974 := z.EncBinary()
				_ = yym974
				if false {
				} else if z.HasExtensions() && z.EncExt(yy973) {
				} else {
					z.EncFallback(yy973)
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym975 := z.DecBinary()
	_ = yym975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct976 := r.ContainerType()
		if yyct976 == codecSelferValueTypeMap1234 {
			yyl976 := r.ReadMapStart()
			if yyl976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl976, d)
			}
		} else if yyct976 == codecSelferValueTypeArray1234 {
			yyl976 := r.ReadArrayStart()
			if yyl976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys977Slc
	var yyhl977 bool = l >= 0
	for yyj977 := 0; ; yyj977++ {
		if yyhl977 {
			if yyj977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys977Slc = r.DecodeBytes(yys977Slc, true, true)
		yys977 := string(yys977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys977 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int32)
				}
				yym979 := z.DecBinary()
				_ = yym979
				if false {
				} else {
					*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int32)
				}
				yym981 := z.DecBinary()
				_ = yym981
				if false {
				} else {
					*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym983 := z.DecBinary()
				_ = yym983
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym985 := z.DecBinary()
				_ = yym985
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "autoSelector":
			if r.TryDecodeAsNil() {
				if x.AutoSelector != nil {
					x.AutoSelector = nil
				}
			} else {
				if x.AutoSelector == nil {
					x.AutoSelector = new(bool)
				}
				yym987 := z.DecBinary()
				_ = yym987
				if false {
				} else {
					*((*bool)(x.AutoSelector)) = r.DecodeBool()
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv988 := &x.Template
				yym989 := z.DecBinary()
				_ = yym989
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv988) {
				} else {
					z.DecFallback(yyv988, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys977)
		} // end switch yys977
	} // end for yyj977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj990 int
	var yyb990 bool
	var yyhl990 bool = l >= 0
	yyj990++
	if yyhl990 {
		yyb990 = yyj990 > l
	} else {
		yyb990 = r.CheckBreak()
	}
	if yyb990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int32)
		}
		yym992 := z.DecBinary()
		_ = yym992
		if false {
		} else {
			*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
		}
	}
	yyj990++
	if yyhl990 {
		yyb990 = yyj990 > l
	} else {
		yyb990 = r.CheckBreak()
	}
	if yyb990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int32)
		}
		yym994 := z.DecBinary()
		_ = yym994
		if false {
		} else {
			*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
		}
	}
	yyj990++
	if yyhl990 {
		yyb990 = yyj990 > l
	} else {
		yyb990 = r.CheckBreak()
	}
	if yyb990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym996 := z.DecBinary()
		_ = yym996
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj990++
	if yyhl990 {
		yyb990 = yyj990 > l
	} else {
		yyb990 = r.CheckBreak()
	}
	if yyb990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym998 := z.DecBinary()
		_ = yym998
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj990++
	if yyhl990 {
		yyb990 = yyj990 > l
	} else {
		yyb990 = r.CheckBreak()
	}
	if yyb990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AutoSelector != nil {
			x.AutoSelector = nil
		}
	} else {
		if x.AutoSelector == nil {
			x.AutoSelector = new(bool)
		}
		yym1000 := z.DecBinary()
		_ = yym1000
		if false {
		} else {
			*((*bool)(x.AutoSelector)) = r.DecodeBool()
		}
	}
	yyj990++
	if yyhl990 {
		yyb990 = yyj990 > l
	} else {
		yyb990 = r.CheckBreak()
	}
	if yyb990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv1001 := &x.Template
		yym1002 := z.DecBinary()
		_ = yym1002
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1001) {
		} else {
			z.DecFallback(yyv1001, false)
		}
	}
	for {
		yyj990++
		if yyhl990 {
			yyb990 = yyj990 > l
		} else {
			yyb990 = r.CheckBreak()
		}
		if yyb990 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj990-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1003 := z.EncBinary()
		_ = yym1003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1004 := !z.EncBinary()
			yy2arr1004 := z.EncBasicHandle().StructToArray
			var yyq1004 [6]bool
			_, _, _ = yysep1004, yyq1004, yy2arr1004
			const yyr1004 bool = false
			yyq1004[0] = len(x.Conditions) != 0
			yyq1004[1] = x.StartTime != nil
			yyq1004[2] = x.CompletionTime != nil
			yyq1004[3] = x.Active != 0
			yyq1004[4] = x.Succeeded != 0
			yyq1004[5] = x.Failed != 0
			var yynn1004 int
			if yyr1004 || yy2arr1004 {
				r.EncodeArrayStart(6)
			} else {
				yynn1004 = 0
				for _, b := range yyq1004 {
					if b {
						yynn1004++
					}
				}
				r.EncodeMapStart(yynn1004)
				yynn1004 = 0
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1004[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1006 := z.EncBinary()
						_ = yym1006
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1004[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1007 := z.EncBinary()
						_ = yym1007
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1004[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1009 := z.EncBinary()
						_ = yym1009
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1009 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1009 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1004[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1010 := z.EncBinary()
						_ = yym1010
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1010 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1010 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1004[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym1012 := z.EncBinary()
						_ = yym1012
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym1012 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym1012 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1004[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym1013 := z.EncBinary()
						_ = yym1013
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym1013 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym1013 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1004[3] {
					yym1015 := z.EncBinary()
					_ = yym1015
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1004[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1004[4] {
					yym1018 := z.EncBinary()
					_ = yym1018
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1004[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1004[5] {
					yym1021 := z.EncBinary()
					_ = yym1021
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1004[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr1004 || yy2arr1004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1023 := z.DecBinary()
	_ = yym1023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1024 := r.ContainerType()
		if yyct1024 == codecSelferValueTypeMap1234 {
			yyl1024 := r.ReadMapStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1024, d)
			}
		} else if yyct1024 == codecSelferValueTypeArray1234 {
			yyl1024 := r.ReadArrayStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1025Slc
	var yyhl1025 bool = l >= 0
	for yyj1025 := 0; ; yyj1025++ {
		if yyhl1025 {
			if yyj1025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1025Slc = r.DecodeBytes(yys1025Slc, true, true)
		yys1025 := string(yys1025Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1025 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1026 := &x.Conditions
				yym1027 := z.DecBinary()
				_ = yym1027
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv1026), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym1029 := z.DecBinary()
				_ = yym1029
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1029 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1029 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym1031 := z.DecBinary()
				_ = yym1031
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym1031 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym1031 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int32(r.DecodeInt(32))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int32(r.DecodeInt(32))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1025)
		} // end switch yys1025
	} // end for yyj1025
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1035 int
	var yyb1035 bool
	var yyhl1035 bool = l >= 0
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1036 := &x.Conditions
		yym1037 := z.DecBinary()
		_ = yym1037
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv1036), d)
		}
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym1039 := z.DecBinary()
		_ = yym1039
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1039 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1039 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym1041 := z.DecBinary()
		_ = yym1041
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym1041 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym1041 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int32(r.DecodeInt(32))
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int32(r.DecodeInt(32))
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int32(r.DecodeInt(32))
	}
	for {
		yyj1035++
		if yyhl1035 {
			yyb1035 = yyj1035 > l
		} else {
			yyb1035 = r.CheckBreak()
		}
		if yyb1035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1045 := z.EncBinary()
	_ = yym1045
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1046 := z.DecBinary()
	_ = yym1046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1047 := z.EncBinary()
		_ = yym1047
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1048 := !z.EncBinary()
			yy2arr1048 := z.EncBasicHandle().StructToArray
			var yyq1048 [6]bool
			_, _, _ = yysep1048, yyq1048, yy2arr1048
			const yyr1048 bool = false
			yyq1048[2] = true
			yyq1048[3] = true
			yyq1048[4] = x.Reason != ""
			yyq1048[5] = x.Message != ""
			var yynn1048 int
			if yyr1048 || yy2arr1048 {
				r.EncodeArrayStart(6)
			} else {
				yynn1048 = 2
				for _, b := range yyq1048 {
					if b {
						yynn1048++
					}
				}
				r.EncodeMapStart(yynn1048)
				yynn1048 = 0
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1051 := z.EncBinary()
				_ = yym1051
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1052 := z.EncBinary()
				_ = yym1052
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[2] {
					yy1054 := &x.LastProbeTime
					yym1055 := z.EncBinary()
					_ = yym1055
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1054) {
					} else if yym1055 {
						z.EncBinaryMarshal(yy1054)
					} else if !yym1055 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1054)
					} else {
						z.EncFallback(yy1054)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1056 := &x.LastProbeTime
					yym1057 := z.EncBinary()
					_ = yym1057
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1056) {
					} else if yym1057 {
						z.EncBinaryMarshal(yy1056)
					} else if !yym1057 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1056)
					} else {
						z.EncFallback(yy1056)
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[3] {
					yy1059 := &x.LastTransitionTime
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1059) {
					} else if yym1060 {
						z.EncBinaryMarshal(yy1059)
					} else if !yym1060 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1059)
					} else {
						z.EncFallback(yy1059)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1048[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1061 := &x.LastTransitionTime
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1061) {
					} else if yym1062 {
						z.EncBinaryMarshal(yy1061)
					} else if !yym1062 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1061)
					} else {
						z.EncFallback(yy1061)
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[4] {
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1048[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[5] {
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1048[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1069 := z.DecBinary()
	_ = yym1069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1070 := r.ContainerType()
		if yyct1070 == codecSelferValueTypeMap1234 {
			yyl1070 := r.ReadMapStart()
			if yyl1070 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1070, d)
			}
		} else if yyct1070 == codecSelferValueTypeArray1234 {
			yyl1070 := r.ReadArrayStart()
			if yyl1070 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1070, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1071Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1071Slc
	var yyhl1071 bool = l >= 0
	for yyj1071 := 0; ; yyj1071++ {
		if yyhl1071 {
			if yyj1071 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1071Slc = r.DecodeBytes(yys1071Slc, true, true)
		yys1071 := string(yys1071Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1071 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1074 := &x.LastProbeTime
				yym1075 := z.DecBinary()
				_ = yym1075
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1074) {
				} else if yym1075 {
					z.DecBinaryUnmarshal(yyv1074)
				} else if !yym1075 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1074)
				} else {
					z.DecFallback(yyv1074, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1076 := &x.LastTransitionTime
				yym1077 := z.DecBinary()
				_ = yym1077
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1076) {
				} else if yym1077 {
					z.DecBinaryUnmarshal(yyv1076)
				} else if !yym1077 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1076)
				} else {
					z.DecFallback(yyv1076, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1071)
		} // end switch yys1071
	} // end for yyj1071
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1080 int
	var yyb1080 bool
	var yyhl1080 bool = l >= 0
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1083 := &x.LastProbeTime
		yym1084 := z.DecBinary()
		_ = yym1084
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1083) {
		} else if yym1084 {
			z.DecBinaryUnmarshal(yyv1083)
		} else if !yym1084 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1083)
		} else {
			z.DecFallback(yyv1083, false)
		}
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1085 := &x.LastTransitionTime
		yym1086 := z.DecBinary()
		_ = yym1086
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1085) {
		} else if yym1086 {
			z.DecBinaryUnmarshal(yyv1085)
		} else if !yym1086 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1085)
		} else {
			z.DecFallback(yyv1085, false)
		}
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1080++
		if yyhl1080 {
			yyb1080 = yyj1080 > l
		} else {
			yyb1080 = r.CheckBreak()
		}
		if yyb1080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1089 := z.EncBinary()
		_ = yym1089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1090 := !z.EncBinary()
			yy2arr1090 := z.EncBasicHandle().StructToArray
			var yyq1090 [5]bool
			_, _, _ = yysep1090, yyq1090, yy2arr1090
			const yyr1090 bool = false
			yyq1090[0] = x.Kind != ""
			yyq1090[1] = x.APIVersion != ""
			yyq1090[2] = true
			yyq1090[3] = true
			yyq1090[4] = true
			var yynn1090 int
			if yyr1090 || yy2arr1090 {
				r.EncodeArrayStart(5)
			} else {
				yynn1090 = 0
				for _, b := range yyq1090 {
					if b {
						yynn1090++
					}
				}
				r.EncodeMapStart(yynn1090)
				yynn1090 = 0
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1090[0] {
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1090[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1093 := z.EncBinary()
					_ = yym1093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1090[1] {
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1090[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1090[2] {
					yy1098 := &x.ObjectMeta
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1098) {
					} else {
						z.EncFallback(yy1098)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1100 := &x.ObjectMeta
					yym1101 := z.EncBinary()
					_ = yym1101
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1100) {
					} else {
						z.EncFallback(yy1100)
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1090[3] {
					yy1103 := &x.Spec
					yy1103.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1104 := &x.Spec
					yy1104.CodecEncodeSelf(e)
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1090[4] {
					yy1106 := &x.Status
					yy1106.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1107 := &x.Status
					yy1107.CodecEncodeSelf(e)
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1108 := z.DecBinary()
	_ = yym1108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1109 := r.ContainerType()
		if yyct1109 == codecSelferValueTypeMap1234 {
			yyl1109 := r.ReadMapStart()
			if yyl1109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1109, d)
			}
		} else if yyct1109 == codecSelferValueTypeArray1234 {
			yyl1109 := r.ReadArrayStart()
			if yyl1109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1110Slc
	var yyhl1110 bool = l >= 0
	for yyj1110 := 0; ; yyj1110++ {
		if yyhl1110 {
			if yyj1110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1110Slc = r.DecodeBytes(yys1110Slc, true, true)
		yys1110 := string(yys1110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1110 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1113 := &x.ObjectMeta
				yym1114 := z.DecBinary()
				_ = yym1114
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1113) {
				} else {
					z.DecFallback(yyv1113, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv1115 := &x.Spec
				yyv1115.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv1116 := &x.Status
				yyv1116.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1110)
		} // end switch yys1110
	} // end for yyj1110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1117 int
	var yyb1117 bool
	var yyhl1117 bool = l >= 0
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1120 := &x.ObjectMeta
		yym1121 := z.DecBinary()
		_ = yym1121
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1120) {
		} else {
			z.DecFallback(yyv1120, false)
		}
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv1122 := &x.Spec
		yyv1122.CodecDecodeSelf(d)
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv1123 := &x.Status
		yyv1123.CodecDecodeSelf(d)
	}
	for {
		yyj1117++
		if yyhl1117 {
			yyb1117 = yyj1117 > l
		} else {
			yyb1117 = r.CheckBreak()
		}
		if yyb1117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1124 := z.EncBinary()
		_ = yym1124
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1125 := !z.EncBinary()
			yy2arr1125 := z.EncBasicHandle().StructToArray
			var yyq1125 [4]bool
			_, _, _ = yysep1125, yyq1125, yy2arr1125
			const yyr1125 bool = false
			yyq1125[0] = x.Kind != ""
			yyq1125[1] = x.APIVersion != ""
			yyq1125[2] = true
			var yynn1125 int
			if yyr1125 || yy2arr1125 {
				r.EncodeArrayStart(4)
			} else {
				yynn1125 = 1
				for _, b := range yyq1125 {
					if b {
						yynn1125++
					}
				}
				r.EncodeMapStart(yynn1125)
				yynn1125 = 0
			}
			if yyr1125 || yy2arr1125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1125[0] {
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1125[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1125 || yy2arr1125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1125[1] {
					yym1130 := z.EncBinary()
					_ = yym1130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1125[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1131 := z.EncBinary()
					_ = yym1131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1125 || yy2arr1125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1125[2] {
					yy1133 := &x.ListMeta
					yym1134 := z.EncBinary()
					_ = yym1134
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1133) {
					} else {
						z.EncFallback(yy1133)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1125[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1135 := &x.ListMeta
					yym1136 := z.EncBinary()
					_ = yym1136
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1135) {
					} else {
						z.EncFallback(yy1135)
					}
				}
			}
			if yyr1125 || yy2arr1125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1138 := z.EncBinary()
					_ = yym1138
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr1125 || yy2arr1125 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1140 := z.DecBinary()
	_ = yym1140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1141 := r.ContainerType()
		if yyct1141 == codecSelferValueTypeMap1234 {
			yyl1141 := r.ReadMapStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1141, d)
			}
		} else if yyct1141 == codecSelferValueTypeArray1234 {
			yyl1141 := r.ReadArrayStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1142Slc
	var yyhl1142 bool = l >= 0
	for yyj1142 := 0; ; yyj1142++ {
		if yyhl1142 {
			if yyj1142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1142Slc = r.DecodeBytes(yys1142Slc, true, true)
		yys1142 := string(yys1142Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1142 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1145 := &x.ListMeta
				yym1146 := z.DecBinary()
				_ = yym1146
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1145) {
				} else {
					z.DecFallback(yyv1145, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1147 := &x.Items
				yym1148 := z.DecBinary()
				_ = yym1148
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv1147), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1142)
		} // end switch yys1142
	} // end for yyj1142
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1149 int
	var yyb1149 bool
	var yyhl1149 bool = l >= 0
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1152 := &x.ListMeta
		yym1153 := z.DecBinary()
		_ = yym1153
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1152) {
		} else {
			z.DecFallback(yyv1152, false)
		}
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1154 := &x.Items
		yym1155 := z.DecBinary()
		_ = yym1155
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv1154), d)
		}
	}
	for {
		yyj1149++
		if yyhl1149 {
			yyb1149 = yyj1149 > l
		} else {
			yyb1149 = r.CheckBreak()
		}
		if yyb1149 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1149-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1156 := z.EncBinary()
		_ = yym1156
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1157 := !z.EncBinary()
			yy2arr1157 := z.EncBasicHandle().StructToArray
			var yyq1157 [3]bool
			_, _, _ = yysep1157, yyq1157, yy2arr1157
			const yyr1157 bool = false
			yyq1157[0] = x.Backend != nil
			yyq1157[1] = len(x.TLS) != 0
			yyq1157[2] = len(x.Rules) != 0
			var yynn1157 int
			if yyr1157 || yy2arr1157 {
				r.EncodeArrayStart(3)
			} else {
				yynn1157 = 0
				for _, b := range yyq1157 {
					if b {
						yynn1157++
					}
				}
				r.EncodeMapStart(yynn1157)
				yynn1157 = 0
			}
			if yyr1157 || yy2arr1157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1157[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1157[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1157 || yy2arr1157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1157[1] {
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym1160 := z.EncBinary()
						_ = yym1160
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1157[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tls"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym1161 := z.EncBinary()
						_ = yym1161
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				}
			}
			if yyr1157 || yy2arr1157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1157[2] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1163 := z.EncBinary()
						_ = yym1163
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1157[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1164 := z.EncBinary()
						_ = yym1164
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr1157 || yy2arr1157 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1165 := z.DecBinary()
	_ = yym1165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1166 := r.ContainerType()
		if yyct1166 == codecSelferValueTypeMap1234 {
			yyl1166 := r.ReadMapStart()
			if yyl1166 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1166, d)
			}
		} else if yyct1166 == codecSelferValueTypeArray1234 {
			yyl1166 := r.ReadArrayStart()
			if yyl1166 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1167Slc
	var yyhl1167 bool = l >= 0
	for yyj1167 := 0; ; yyj1167++ {
		if yyhl1167 {
			if yyj1167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1167Slc = r.DecodeBytes(yys1167Slc, true, true)
		yys1167 := string(yys1167Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1167 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "tls":
			if r.TryDecodeAsNil() {
				x.TLS = nil
			} else {
				yyv1169 := &x.TLS
				yym1170 := z.DecBinary()
				_ = yym1170
				if false {
				} else {
					h.decSliceIngressTLS((*[]IngressTLS)(yyv1169), d)
				}
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv1171 := &x.Rules
				yym1172 := z.DecBinary()
				_ = yym1172
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv1171), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1167)
		} // end switch yys1167
	} // end for yyj1167
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1173 int
	var yyb1173 bool
	var yyhl1173 bool = l >= 0
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TLS = nil
	} else {
		yyv1175 := &x.TLS
		yym1176 := z.DecBinary()
		_ = yym1176
		if false {
		} else {
			h.decSliceIngressTLS((*[]IngressTLS)(yyv1175), d)
		}
	}
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv1177 := &x.Rules
		yym1178 := z.DecBinary()
		_ = yym1178
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv1177), d)
		}
	}
	for {
		yyj1173++
		if yyhl1173 {
			yyb1173 = yyj1173 > l
		} else {
			yyb1173 = r.CheckBreak()
		}
		if yyb1173 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1173-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressTLS) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1179 := z.EncBinary()
		_ = yym1179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1180 := !z.EncBinary()
			yy2arr1180 := z.EncBasicHandle().StructToArray
			var yyq1180 [2]bool
			_, _, _ = yysep1180, yyq1180, yy2arr1180
			const yyr1180 bool = false
			yyq1180[0] = len(x.Hosts) != 0
			yyq1180[1] = x.SecretName != ""
			var yynn1180 int
			if yyr1180 || yy2arr1180 {
				r.EncodeArrayStart(2)
			} else {
				yynn1180 = 0
				for _, b := range yyq1180 {
					if b {
						yynn1180++
					}
				}
				r.EncodeMapStart(yynn1180)
				yynn1180 = 0
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1180[0] {
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym1182 := z.EncBinary()
						_ = yym1182
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1180[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hosts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym1183 := z.EncBinary()
						_ = yym1183
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1180[1] {
					yym1185 := z.EncBinary()
					_ = yym1185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1180[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressTLS) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1187 := z.DecBinary()
	_ = yym1187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1188 := r.ContainerType()
		if yyct1188 == codecSelferValueTypeMap1234 {
			yyl1188 := r.ReadMapStart()
			if yyl1188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1188, d)
			}
		} else if yyct1188 == codecSelferValueTypeArray1234 {
			yyl1188 := r.ReadArrayStart()
			if yyl1188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressTLS) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1189Slc
	var yyhl1189 bool = l >= 0
	for yyj1189 := 0; ; yyj1189++ {
		if yyhl1189 {
			if yyj1189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1189Slc = r.DecodeBytes(yys1189Slc, true, true)
		yys1189 := string(yys1189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1189 {
		case "hosts":
			if r.TryDecodeAsNil() {
				x.Hosts = nil
			} else {
				yyv1190 := &x.Hosts
				yym1191 := z.DecBinary()
				_ = yym1191
				if false {
				} else {
					z.F.DecSliceStringX(yyv1190, false, d)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1189)
		} // end switch yys1189
	} // end for yyj1189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressTLS) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1193 int
	var yyb1193 bool
	var yyhl1193 bool = l >= 0
	yyj1193++
	if yyhl1193 {
		yyb1193 = yyj1193 > l
	} else {
		yyb1193 = r.CheckBreak()
	}
	if yyb1193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hosts = nil
	} else {
		yyv1194 := &x.Hosts
		yym1195 := z.DecBinary()
		_ = yym1195
		if false {
		} else {
			z.F.DecSliceStringX(yyv1194, false, d)
		}
	}
	yyj1193++
	if yyhl1193 {
		yyb1193 = yyj1193 > l
	} else {
		yyb1193 = r.CheckBreak()
	}
	if yyb1193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj1193++
		if yyhl1193 {
			yyb1193 = yyj1193 > l
		} else {
			yyb1193 = r.CheckBreak()
		}
		if yyb1193 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1193-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1197 := z.EncBinary()
		_ = yym1197
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1198 := !z.EncBinary()
			yy2arr1198 := z.EncBasicHandle().StructToArray
			var yyq1198 [1]bool
			_, _, _ = yysep1198, yyq1198, yy2arr1198
			const yyr1198 bool = false
			yyq1198[0] = true
			var yynn1198 int
			if yyr1198 || yy2arr1198 {
				r.EncodeArrayStart(1)
			} else {
				yynn1198 = 0
				for _, b := range yyq1198 {
					if b {
						yynn1198++
					}
				}
				r.EncodeMapStart(yynn1198)
				yynn1198 = 0
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1198[0] {
					yy1200 := &x.LoadBalancer
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1200) {
					} else {
						z.EncFallback(yy1200)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1198[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1202 := &x.LoadBalancer
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1202) {
					} else {
						z.EncFallback(yy1202)
					}
				}
			}
			if yyr1198 || yy2arr1198 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1204 := z.DecBinary()
	_ = yym1204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1205 := r.ContainerType()
		if yyct1205 == codecSelferValueTypeMap1234 {
			yyl1205 := r.ReadMapStart()
			if yyl1205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1205, d)
			}
		} else if yyct1205 == codecSelferValueTypeArray1234 {
			yyl1205 := r.ReadArrayStart()
			if yyl1205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1206Slc
	var yyhl1206 bool = l >= 0
	for yyj1206 := 0; ; yyj1206++ {
		if yyhl1206 {
			if yyj1206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1206Slc = r.DecodeBytes(yys1206Slc, true, true)
		yys1206 := string(yys1206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1206 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
			} else {
				yyv1207 := &x.LoadBalancer
				yym1208 := z.DecBinary()
				_ = yym1208
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1207) {
				} else {
					z.DecFallback(yyv1207, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1206)
		} // end switch yys1206
	} // end for yyj1206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1209 int
	var yyb1209 bool
	var yyhl1209 bool = l >= 0
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
	} else {
		yyv1210 := &x.LoadBalancer
		yym1211 := z.DecBinary()
		_ = yym1211
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1210) {
		} else {
			z.DecFallback(yyv1210, false)
		}
	}
	for {
		yyj1209++
		if yyhl1209 {
			yyb1209 = yyj1209 > l
		} else {
			yyb1209 = r.CheckBreak()
		}
		if yyb1209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1212 := z.EncBinary()
		_ = yym1212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1213 := !z.EncBinary()
			yy2arr1213 := z.EncBasicHandle().StructToArray
			var yyq1213 [2]bool
			_, _, _ = yysep1213, yyq1213, yy2arr1213
			const yyr1213 bool = false
			yyq1213[0] = x.Host != ""
			yyq1213[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1213 int
			if yyr1213 || yy2arr1213 {
				r.EncodeArrayStart(2)
			} else {
				yynn1213 = 0
				for _, b := range yyq1213 {
					if b {
						yynn1213++
					}
				}
				r.EncodeMapStart(yynn1213)
				yynn1213 = 0
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1213[0] {
					yym1215 := z.EncBinary()
					_ = yym1215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1213[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1216 := z.EncBinary()
					_ = yym1216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1217 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1217 = true
				goto LABEL1217
			}
		LABEL1217:
			if yyr1213 || yy2arr1213 {
				if yyn1217 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1213[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1213[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1217 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1218 := z.DecBinary()
	_ = yym1218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1219 := r.ContainerType()
		if yyct1219 == codecSelferValueTypeMap1234 {
			yyl1219 := r.ReadMapStart()
			if yyl1219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1219, d)
			}
		} else if yyct1219 == codecSelferValueTypeArray1234 {
			yyl1219 := r.ReadArrayStart()
			if yyl1219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1220Slc
	var yyhl1220 bool = l >= 0
	for yyj1220 := 0; ; yyj1220++ {
		if yyhl1220 {
			if yyj1220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1220Slc = r.DecodeBytes(yys1220Slc, true, true)
		yys1220 := string(yys1220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1220 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1220)
		} // end switch yys1220
	} // end for yyj1220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1223 int
	var yyb1223 bool
	var yyhl1223 bool = l >= 0
	yyj1223++
	if yyhl1223 {
		yyb1223 = yyj1223 > l
	} else {
		yyb1223 = r.CheckBreak()
	}
	if yyb1223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1223++
	if yyhl1223 {
		yyb1223 = yyj1223 > l
	} else {
		yyb1223 = r.CheckBreak()
	}
	if yyb1223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1223++
		if yyhl1223 {
			yyb1223 = yyj1223 > l
		} else {
			yyb1223 = r.CheckBreak()
		}
		if yyb1223 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1223-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1226 := z.EncBinary()
		_ = yym1226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1227 := !z.EncBinary()
			yy2arr1227 := z.EncBasicHandle().StructToArray
			var yyq1227 [1]bool
			_, _, _ = yysep1227, yyq1227, yy2arr1227
			const yyr1227 bool = false
			yyq1227[0] = x.HTTP != nil
			var yynn1227 int
			if yyr1227 || yy2arr1227 {
				r.EncodeArrayStart(1)
			} else {
				yynn1227 = 0
				for _, b := range yyq1227 {
					if b {
						yynn1227++
					}
				}
				r.EncodeMapStart(yynn1227)
				yynn1227 = 0
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1227[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1227[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1227 || yy2arr1227 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1229 := z.DecBinary()
	_ = yym1229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1230 := r.ContainerType()
		if yyct1230 == codecSelferValueTypeMap1234 {
			yyl1230 := r.ReadMapStart()
			if yyl1230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1230, d)
			}
		} else if yyct1230 == codecSelferValueTypeArray1234 {
			yyl1230 := r.ReadArrayStart()
			if yyl1230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1231Slc
	var yyhl1231 bool = l >= 0
	for yyj1231 := 0; ; yyj1231++ {
		if yyhl1231 {
			if yyj1231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1231Slc = r.DecodeBytes(yys1231Slc, true, true)
		yys1231 := string(yys1231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1231 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1231)
		} // end switch yys1231
	} // end for yyj1231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1233 int
	var yyb1233 bool
	var yyhl1233 bool = l >= 0
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1233++
		if yyhl1233 {
			yyb1233 = yyj1233 > l
		} else {
			yyb1233 = r.CheckBreak()
		}
		if yyb1233 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1233-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1235 := z.EncBinary()
		_ = yym1235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1236 := !z.EncBinary()
			yy2arr1236 := z.EncBasicHandle().StructToArray
			var yyq1236 [1]bool
			_, _, _ = yysep1236, yyq1236, yy2arr1236
			const yyr1236 bool = false
			var yynn1236 int
			if yyr1236 || yy2arr1236 {
				r.EncodeArrayStart(1)
			} else {
				yynn1236 = 1
				for _, b := range yyq1236 {
					if b {
						yynn1236++
					}
				}
				r.EncodeMapStart(yynn1236)
				yynn1236 = 0
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1238 := z.EncBinary()
					_ = yym1238
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1240 := z.DecBinary()
	_ = yym1240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1241 := r.ContainerType()
		if yyct1241 == codecSelferValueTypeMap1234 {
			yyl1241 := r.ReadMapStart()
			if yyl1241 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1241, d)
			}
		} else if yyct1241 == codecSelferValueTypeArray1234 {
			yyl1241 := r.ReadArrayStart()
			if yyl1241 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1242Slc
	var yyhl1242 bool = l >= 0
	for yyj1242 := 0; ; yyj1242++ {
		if yyhl1242 {
			if yyj1242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1242Slc = r.DecodeBytes(yys1242Slc, true, true)
		yys1242 := string(yys1242Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1242 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1243 := &x.Paths
				yym1244 := z.DecBinary()
				_ = yym1244
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1243), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1242)
		} // end switch yys1242
	} // end for yyj1242
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1245 int
	var yyb1245 bool
	var yyhl1245 bool = l >= 0
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1246 := &x.Paths
		yym1247 := z.DecBinary()
		_ = yym1247
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1246), d)
		}
	}
	for {
		yyj1245++
		if yyhl1245 {
			yyb1245 = yyj1245 > l
		} else {
			yyb1245 = r.CheckBreak()
		}
		if yyb1245 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1245-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1248 := z.EncBinary()
		_ = yym1248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1249 := !z.EncBinary()
			yy2arr1249 := z.EncBasicHandle().StructToArray
			var yyq1249 [2]bool
			_, _, _ = yysep1249, yyq1249, yy2arr1249
			const yyr1249 bool = false
			yyq1249[0] = x.Path != ""
			var yynn1249 int
			if yyr1249 || yy2arr1249 {
				r.EncodeArrayStart(2)
			} else {
				yynn1249 = 1
				for _, b := range yyq1249 {
					if b {
						yynn1249++
					}
				}
				r.EncodeMapStart(yynn1249)
				yynn1249 = 0
			}
			if yyr1249 || yy2arr1249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1249[0] {
					yym1251 := z.EncBinary()
					_ = yym1251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1249[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1249 || yy2arr1249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1254 := &x.Backend
				yy1254.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1255 := &x.Backend
				yy1255.CodecEncodeSelf(e)
			}
			if yyr1249 || yy2arr1249 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1256 := z.DecBinary()
	_ = yym1256
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1257 := r.ContainerType()
		if yyct1257 == codecSelferValueTypeMap1234 {
			yyl1257 := r.ReadMapStart()
			if yyl1257 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1257, d)
			}
		} else if yyct1257 == codecSelferValueTypeArray1234 {
			yyl1257 := r.ReadArrayStart()
			if yyl1257 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1257, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1258Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1258Slc
	var yyhl1258 bool = l >= 0
	for yyj1258 := 0; ; yyj1258++ {
		if yyhl1258 {
			if yyj1258 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1258Slc = r.DecodeBytes(yys1258Slc, true, true)
		yys1258 := string(yys1258Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1258 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1260 := &x.Backend
				yyv1260.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1258)
		} // end switch yys1258
	} // end for yyj1258
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1261 int
	var yyb1261 bool
	var yyhl1261 bool = l >= 0
	yyj1261++
	if yyhl1261 {
		yyb1261 = yyj1261 > l
	} else {
		yyb1261 = r.CheckBreak()
	}
	if yyb1261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1261++
	if yyhl1261 {
		yyb1261 = yyj1261 > l
	} else {
		yyb1261 = r.CheckBreak()
	}
	if yyb1261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1263 := &x.Backend
		yyv1263.CodecDecodeSelf(d)
	}
	for {
		yyj1261++
		if yyhl1261 {
			yyb1261 = yyj1261 > l
		} else {
			yyb1261 = r.CheckBreak()
		}
		if yyb1261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1264 := z.EncBinary()
		_ = yym1264
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1265 := !z.EncBinary()
			yy2arr1265 := z.EncBasicHandle().StructToArray
			var yyq1265 [2]bool
			_, _, _ = yysep1265, yyq1265, yy2arr1265
			const yyr1265 bool = false
			var yynn1265 int
			if yyr1265 || yy2arr1265 {
				r.EncodeArrayStart(2)
			} else {
				yynn1265 = 2
				for _, b := range yyq1265 {
					if b {
						yynn1265++
					}
				}
				r.EncodeMapStart(yynn1265)
				yynn1265 = 0
			}
			if yyr1265 || yy2arr1265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1267 := z.EncBinary()
				_ = yym1267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1268 := z.EncBinary()
				_ = yym1268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1265 || yy2arr1265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1270 := &x.ServicePort
				yym1271 := z.EncBinary()
				_ = yym1271
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1270) {
				} else if !yym1271 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1270)
				} else {
					z.EncFallback(yy1270)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1272 := &x.ServicePort
				yym1273 := z.EncBinary()
				_ = yym1273
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1272) {
				} else if !yym1273 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1272)
				} else {
					z.EncFallback(yy1272)
				}
			}
			if yyr1265 || yy2arr1265 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1274 := z.DecBinary()
	_ = yym1274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1275 := r.ContainerType()
		if yyct1275 == codecSelferValueTypeMap1234 {
			yyl1275 := r.ReadMapStart()
			if yyl1275 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1275, d)
			}
		} else if yyct1275 == codecSelferValueTypeArray1234 {
			yyl1275 := r.ReadArrayStart()
			if yyl1275 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1275, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1276Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1276Slc
	var yyhl1276 bool = l >= 0
	for yyj1276 := 0; ; yyj1276++ {
		if yyhl1276 {
			if yyj1276 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1276Slc = r.DecodeBytes(yys1276Slc, true, true)
		yys1276 := string(yys1276Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1276 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg5_intstr.IntOrString{}
			} else {
				yyv1278 := &x.ServicePort
				yym1279 := z.DecBinary()
				_ = yym1279
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1278) {
				} else if !yym1279 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1278)
				} else {
					z.DecFallback(yyv1278, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1276)
		} // end switch yys1276
	} // end for yyj1276
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1280 int
	var yyb1280 bool
	var yyhl1280 bool = l >= 0
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg5_intstr.IntOrString{}
	} else {
		yyv1282 := &x.ServicePort
		yym1283 := z.DecBinary()
		_ = yym1283
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1282) {
		} else if !yym1283 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1282)
		} else {
			z.DecFallback(yyv1282, false)
		}
	}
	for {
		yyj1280++
		if yyhl1280 {
			yyb1280 = yyj1280 > l
		} else {
			yyb1280 = r.CheckBreak()
		}
		if yyb1280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1284 := z.EncBinary()
		_ = yym1284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1285 := !z.EncBinary()
			yy2arr1285 := z.EncBasicHandle().StructToArray
			var yyq1285 [4]bool
			_, _, _ = yysep1285, yyq1285, yy2arr1285
			const yyr1285 bool = false
			yyq1285[0] = x.Kind != ""
			yyq1285[1] = x.APIVersion != ""
			var yynn1285 int
			if yyr1285 || yy2arr1285 {
				r.EncodeArrayStart(4)
			} else {
				yynn1285 = 2
				for _, b := range yyq1285 {
					if b {
						yynn1285++
					}
				}
				r.EncodeMapStart(yynn1285)
				yynn1285 = 0
			}
			if yyr1285 || yy2arr1285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1285[0] {
					yym1287 := z.EncBinary()
					_ = yym1287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1285[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1288 := z.EncBinary()
					_ = yym1288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1285 || yy2arr1285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1285[1] {
					yym1290 := z.EncBinary()
					_ = yym1290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1285[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1285 || yy2arr1285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1293 := z.EncBinary()
				_ = yym1293
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1294 := z.EncBinary()
				_ = yym1294
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr1285 || yy2arr1285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1296 := z.EncBinary()
				_ = yym1296
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1297 := z.EncBinary()
				_ = yym1297
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr1285 || yy2arr1285 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1298 := z.DecBinary()
	_ = yym1298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1299 := r.ContainerType()
		if yyct1299 == codecSelferValueTypeMap1234 {
			yyl1299 := r.ReadMapStart()
			if yyl1299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1299, d)
			}
		} else if yyct1299 == codecSelferValueTypeArray1234 {
			yyl1299 := r.ReadArrayStart()
			if yyl1299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1300Slc
	var yyhl1300 bool = l >= 0
	for yyj1300 := 0; ; yyj1300++ {
		if yyhl1300 {
			if yyj1300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1300Slc = r.DecodeBytes(yys1300Slc, true, true)
		yys1300 := string(yys1300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1300 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1300)
		} // end switch yys1300
	} // end for yyj1300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1305 int
	var yyb1305 bool
	var yyhl1305 bool = l >= 0
	yyj1305++
	if yyhl1305 {
		yyb1305 = yyj1305 > l
	} else {
		yyb1305 = r.CheckBreak()
	}
	if yyb1305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1305++
	if yyhl1305 {
		yyb1305 = yyj1305 > l
	} else {
		yyb1305 = r.CheckBreak()
	}
	if yyb1305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1305++
	if yyhl1305 {
		yyb1305 = yyj1305 > l
	} else {
		yyb1305 = r.CheckBreak()
	}
	if yyb1305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj1305++
	if yyhl1305 {
		yyb1305 = yyj1305 > l
	} else {
		yyb1305 = r.CheckBreak()
	}
	if yyb1305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj1305++
		if yyhl1305 {
			yyb1305 = yyj1305 > l
		} else {
			yyb1305 = r.CheckBreak()
		}
		if yyb1305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1310 := z.EncBinary()
		_ = yym1310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1311 := !z.EncBinary()
			yy2arr1311 := z.EncBasicHandle().StructToArray
			var yyq1311 [5]bool
			_, _, _ = yysep1311, yyq1311, yy2arr1311
			const yyr1311 bool = false
			yyq1311[0] = x.Kind != ""
			yyq1311[1] = x.APIVersion != ""
			yyq1311[2] = true
			yyq1311[3] = true
			yyq1311[4] = true
			var yynn1311 int
			if yyr1311 || yy2arr1311 {
				r.EncodeArrayStart(5)
			} else {
				yynn1311 = 0
				for _, b := range yyq1311 {
					if b {
						yynn1311++
					}
				}
				r.EncodeMapStart(yynn1311)
				yynn1311 = 0
			}
			if yyr1311 || yy2arr1311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1311[0] {
					yym1313 := z.EncBinary()
					_ = yym1313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1311[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1314 := z.EncBinary()
					_ = yym1314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1311 || yy2arr1311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1311[1] {
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1311[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1311 || yy2arr1311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1311[2] {
					yy1319 := &x.ObjectMeta
					yym1320 := z.EncBinary()
					_ = yym1320
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1319) {
					} else {
						z.EncFallback(yy1319)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1311[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1321 := &x.ObjectMeta
					yym1322 := z.EncBinary()
					_ = yym1322
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1321) {
					} else {
						z.EncFallback(yy1321)
					}
				}
			}
			if yyr1311 || yy2arr1311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1311[3] {
					yy1324 := &x.Spec
					yy1324.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1311[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1325 := &x.Spec
					yy1325.CodecEncodeSelf(e)
				}
			}
			if yyr1311 || yy2arr1311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1311[4] {
					yy1327 := &x.Status
					yy1327.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1311[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1328 := &x.Status
					yy1328.CodecEncodeSelf(e)
				}
			}
			if yyr1311 || yy2arr1311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1329 := z.DecBinary()
	_ = yym1329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1330 := r.ContainerType()
		if yyct1330 == codecSelferValueTypeMap1234 {
			yyl1330 := r.ReadMapStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1330, d)
			}
		} else if yyct1330 == codecSelferValueTypeArray1234 {
			yyl1330 := r.ReadArrayStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1331Slc
	var yyhl1331 bool = l >= 0
	for yyj1331 := 0; ; yyj1331++ {
		if yyhl1331 {
			if yyj1331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1331Slc = r.DecodeBytes(yys1331Slc, true, true)
		yys1331 := string(yys1331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1331 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1334 := &x.ObjectMeta
				yym1335 := z.DecBinary()
				_ = yym1335
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1334) {
				} else {
					z.DecFallback(yyv1334, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1336 := &x.Spec
				yyv1336.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1337 := &x.Status
				yyv1337.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1331)
		} // end switch yys1331
	} // end for yyj1331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1338 int
	var yyb1338 bool
	var yyhl1338 bool = l >= 0
	yyj1338++
	if yyhl1338 {
		yyb1338 = yyj1338 > l
	} else {
		yyb1338 = r.CheckBreak()
	}
	if yyb1338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1338++
	if yyhl1338 {
		yyb1338 = yyj1338 > l
	} else {
		yyb1338 = r.CheckBreak()
	}
	if yyb1338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1338++
	if yyhl1338 {
		yyb1338 = yyj1338 > l
	} else {
		yyb1338 = r.CheckBreak()
	}
	if yyb1338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1341 := &x.ObjectMeta
		yym1342 := z.DecBinary()
		_ = yym1342
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1341) {
		} else {
			z.DecFallback(yyv1341, false)
		}
	}
	yyj1338++
	if yyhl1338 {
		yyb1338 = yyj1338 > l
	} else {
		yyb1338 = r.CheckBreak()
	}
	if yyb1338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1343 := &x.Spec
		yyv1343.CodecDecodeSelf(d)
	}
	yyj1338++
	if yyhl1338 {
		yyb1338 = yyj1338 > l
	} else {
		yyb1338 = r.CheckBreak()
	}
	if yyb1338 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1344 := &x.Status
		yyv1344.CodecDecodeSelf(d)
	}
	for {
		yyj1338++
		if yyhl1338 {
			yyb1338 = yyj1338 > l
		} else {
			yyb1338 = r.CheckBreak()
		}
		if yyb1338 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1338-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1345 := z.EncBinary()
		_ = yym1345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1346 := !z.EncBinary()
			yy2arr1346 := z.EncBasicHandle().StructToArray
			var yyq1346 [4]bool
			_, _, _ = yysep1346, yyq1346, yy2arr1346
			const yyr1346 bool = false
			yyq1346[0] = x.Kind != ""
			yyq1346[1] = x.APIVersion != ""
			yyq1346[2] = true
			var yynn1346 int
			if yyr1346 || yy2arr1346 {
				r.EncodeArrayStart(4)
			} else {
				yynn1346 = 1
				for _, b := range yyq1346 {
					if b {
						yynn1346++
					}
				}
				r.EncodeMapStart(yynn1346)
				yynn1346 = 0
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[0] {
					yym1348 := z.EncBinary()
					_ = yym1348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[1] {
					yym1351 := z.EncBinary()
					_ = yym1351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1352 := z.EncBinary()
					_ = yym1352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[2] {
					yy1354 := &x.ListMeta
					yym1355 := z.EncBinary()
					_ = yym1355
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1354) {
					} else {
						z.EncFallback(yy1354)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1346[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1356 := &x.ListMeta
					yym1357 := z.EncBinary()
					_ = yym1357
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1356) {
					} else {
						z.EncFallback(yy1356)
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1360 := z.EncBinary()
					_ = yym1360
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1361 := z.DecBinary()
	_ = yym1361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1362 := r.ContainerType()
		if yyct1362 == codecSelferValueTypeMap1234 {
			yyl1362 := r.ReadMapStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1362, d)
			}
		} else if yyct1362 == codecSelferValueTypeArray1234 {
			yyl1362 := r.ReadArrayStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1362, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1363Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1363Slc
	var yyhl1363 bool = l >= 0
	for yyj1363 := 0; ; yyj1363++ {
		if yyhl1363 {
			if yyj1363 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1363Slc = r.DecodeBytes(yys1363Slc, true, true)
		yys1363 := string(yys1363Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1363 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1366 := &x.ListMeta
				yym1367 := z.DecBinary()
				_ = yym1367
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1366) {
				} else {
					z.DecFallback(yyv1366, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1368 := &x.Items
				yym1369 := z.DecBinary()
				_ = yym1369
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1368), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1363)
		} // end switch yys1363
	} // end for yyj1363
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1370 int
	var yyb1370 bool
	var yyhl1370 bool = l >= 0
	yyj1370++
	if yyhl1370 {
		yyb1370 = yyj1370 > l
	} else {
		yyb1370 = r.CheckBreak()
	}
	if yyb1370 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1370++
	if yyhl1370 {
		yyb1370 = yyj1370 > l
	} else {
		yyb1370 = r.CheckBreak()
	}
	if yyb1370 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1370++
	if yyhl1370 {
		yyb1370 = yyj1370 > l
	} else {
		yyb1370 = r.CheckBreak()
	}
	if yyb1370 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1373 := &x.ListMeta
		yym1374 := z.DecBinary()
		_ = yym1374
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1373) {
		} else {
			z.DecFallback(yyv1373, false)
		}
	}
	yyj1370++
	if yyhl1370 {
		yyb1370 = yyj1370 > l
	} else {
		yyb1370 = r.CheckBreak()
	}
	if yyb1370 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1375 := &x.Items
		yym1376 := z.DecBinary()
		_ = yym1376
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1375), d)
		}
	}
	for {
		yyj1370++
		if yyhl1370 {
			yyb1370 = yyj1370 > l
		} else {
			yyb1370 = r.CheckBreak()
		}
		if yyb1370 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1370-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1377 := z.EncBinary()
		_ = yym1377
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1378 := !z.EncBinary()
			yy2arr1378 := z.EncBasicHandle().StructToArray
			var yyq1378 [4]bool
			_, _, _ = yysep1378, yyq1378, yy2arr1378
			const yyr1378 bool = false
			yyq1378[0] = x.Replicas != nil
			yyq1378[1] = x.MinReadySeconds != 0
			yyq1378[2] = x.Selector != nil
			yyq1378[3] = true
			var yynn1378 int
			if yyr1378 || yy2arr1378 {
				r.EncodeArrayStart(4)
			} else {
				yynn1378 = 0
				for _, b := range yyq1378 {
					if b {
						yynn1378++
					}
				}
				r.EncodeMapStart(yynn1378)
				yynn1378 = 0
			}
			if yyr1378 || yy2arr1378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1378[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1380 := *x.Replicas
						yym1381 := z.EncBinary()
						_ = yym1381
						if false {
						} else {
							r.EncodeInt(int64(yy1380))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1378[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1382 := *x.Replicas
						yym1383 := z.EncBinary()
						_ = yym1383
						if false {
						} else {
							r.EncodeInt(int64(yy1382))
						}
					}
				}
			}
			if yyr1378 || yy2arr1378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1378[1] {
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1378[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1386 := z.EncBinary()
					_ = yym1386
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr1378 || yy2arr1378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1378[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1388 := z.EncBinary()
						_ = yym1388
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1378[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1389 := z.EncBinary()
						_ = yym1389
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr1378 || yy2arr1378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1378[3] {
					yy1391 := &x.Template
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1391) {
					} else {
						z.EncFallback(yy1391)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1378[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1393 := &x.Template
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1393) {
					} else {
						z.EncFallback(yy1393)
					}
				}
			}
			if yyr1378 || yy2arr1378 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1395 := z.DecBinary()
	_ = yym1395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1396 := r.ContainerType()
		if yyct1396 == codecSelferValueTypeMap1234 {
			yyl1396 := r.ReadMapStart()
			if yyl1396 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1396, d)
			}
		} else if yyct1396 == codecSelferValueTypeArray1234 {
			yyl1396 := r.ReadArrayStart()
			if yyl1396 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1396, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1397Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1397Slc
	var yyhl1397 bool = l >= 0
	for yyj1397 := 0; ; yyj1397++ {
		if yyhl1397 {
			if yyj1397 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1397Slc = r.DecodeBytes(yys1397Slc, true, true)
		yys1397 := string(yys1397Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1397 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym1399 := z.DecBinary()
				_ = yym1399
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym1402 := z.DecBinary()
				_ = yym1402
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv1403 := &x.Template
				yym1404 := z.DecBinary()
				_ = yym1404
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1403) {
				} else {
					z.DecFallback(yyv1403, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1397)
		} // end switch yys1397
	} // end for yyj1397
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1405 int
	var yyb1405 bool
	var yyhl1405 bool = l >= 0
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym1407 := z.DecBinary()
		_ = yym1407
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym1410 := z.DecBinary()
		_ = yym1410
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv1411 := &x.Template
		yym1412 := z.DecBinary()
		_ = yym1412
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1411) {
		} else {
			z.DecFallback(yyv1411, false)
		}
	}
	for {
		yyj1405++
		if yyhl1405 {
			yyb1405 = yyj1405 > l
		} else {
			yyb1405 = r.CheckBreak()
		}
		if yyb1405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1413 := z.EncBinary()
		_ = yym1413
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1414 := !z.EncBinary()
			yy2arr1414 := z.EncBasicHandle().StructToArray
			var yyq1414 [6]bool
			_, _, _ = yysep1414, yyq1414, yy2arr1414
			const yyr1414 bool = false
			yyq1414[1] = x.FullyLabeledReplicas != 0
			yyq1414[2] = x.ReadyReplicas != 0
			yyq1414[3] = x.AvailableReplicas != 0
			yyq1414[4] = x.ObservedGeneration != 0
			yyq1414[5] = len(x.Conditions) != 0
			var yynn1414 int
			if yyr1414 || yy2arr1414 {
				r.EncodeArrayStart(6)
			} else {
				yynn1414 = 1
				for _, b := range yyq1414 {
					if b {
						yynn1414++
					}
				}
				r.EncodeMapStart(yynn1414)
				yynn1414 = 0
			}
			if yyr1414 || yy2arr1414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1416 := z.EncBinary()
				_ = yym1416
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1417 := z.EncBinary()
				_ = yym1417
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1414 || yy2arr1414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1414[1] {
					yym1419 := z.EncBinary()
					_ = yym1419
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1414[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1420 := z.EncBinary()
					_ = yym1420
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr1414 || yy2arr1414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1414[2] {
					yym1422 := z.EncBinary()
					_ = yym1422
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1414[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr1414 || yy2arr1414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1414[3] {
					yym1425 := z.EncBinary()
					_ = yym1425
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1414[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1426 := z.EncBinary()
					_ = yym1426
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr1414 || yy2arr1414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1414[4] {
					yym1428 := z.EncBinary()
					_ = yym1428
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1414[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1429 := z.EncBinary()
					_ = yym1429
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1414 || yy2arr1414 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1414[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1431 := z.EncBinary()
						_ = yym1431
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1414[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1432 := z.EncBinary()
						_ = yym1432
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1414 || yy2arr1414 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1433 := z.DecBinary()
	_ = yym1433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1434 := r.ContainerType()
		if yyct1434 == codecSelferValueTypeMap1234 {
			yyl1434 := r.ReadMapStart()
			if yyl1434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1434, d)
			}
		} else if yyct1434 == codecSelferValueTypeArray1234 {
			yyl1434 := r.ReadArrayStart()
			if yyl1434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1435Slc
	var yyhl1435 bool = l >= 0
	for yyj1435 := 0; ; yyj1435++ {
		if yyhl1435 {
			if yyj1435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1435Slc = r.DecodeBytes(yys1435Slc, true, true)
		yys1435 := string(yys1435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1435 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1441 := &x.Conditions
				yym1442 := z.DecBinary()
				_ = yym1442
				if false {
				} else {
					h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv1441), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1435)
		} // end switch yys1435
	} // end for yyj1435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1443 int
	var yyb1443 bool
	var yyhl1443 bool = l >= 0
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj1443++
	if yyhl1443 {
		yyb1443 = yyj1443 > l
	} else {
		yyb1443 = r.CheckBreak()
	}
	if yyb1443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1449 := &x.Conditions
		yym1450 := z.DecBinary()
		_ = yym1450
		if false {
		} else {
			h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv1449), d)
		}
	}
	for {
		yyj1443++
		if yyhl1443 {
			yyb1443 = yyj1443 > l
		} else {
			yyb1443 = r.CheckBreak()
		}
		if yyb1443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicaSetConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1451 := z.EncBinary()
	_ = yym1451
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicaSetConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1452 := z.DecBinary()
	_ = yym1452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSetCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1453 := z.EncBinary()
		_ = yym1453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1454 := !z.EncBinary()
			yy2arr1454 := z.EncBasicHandle().StructToArray
			var yyq1454 [5]bool
			_, _, _ = yysep1454, yyq1454, yy2arr1454
			const yyr1454 bool = false
			yyq1454[2] = true
			yyq1454[3] = x.Reason != ""
			yyq1454[4] = x.Message != ""
			var yynn1454 int
			if yyr1454 || yy2arr1454 {
				r.EncodeArrayStart(5)
			} else {
				yynn1454 = 2
				for _, b := range yyq1454 {
					if b {
						yynn1454++
					}
				}
				r.EncodeMapStart(yynn1454)
				yynn1454 = 0
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1457 := z.EncBinary()
				_ = yym1457
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1458 := z.EncBinary()
				_ = yym1458
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1454[2] {
					yy1460 := &x.LastTransitionTime
					yym1461 := z.EncBinary()
					_ = yym1461
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1460) {
					} else if yym1461 {
						z.EncBinaryMarshal(yy1460)
					} else if !yym1461 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1460)
					} else {
						z.EncFallback(yy1460)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1454[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1462 := &x.LastTransitionTime
					yym1463 := z.EncBinary()
					_ = yym1463
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1462) {
					} else if yym1463 {
						z.EncBinaryMarshal(yy1462)
					} else if !yym1463 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1462)
					} else {
						z.EncFallback(yy1462)
					}
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1454[3] {
					yym1465 := z.EncBinary()
					_ = yym1465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1454[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1466 := z.EncBinary()
					_ = yym1466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1454[4] {
					yym1468 := z.EncBinary()
					_ = yym1468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1454[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1469 := z.EncBinary()
					_ = yym1469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1454 || yy2arr1454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1470 := z.DecBinary()
	_ = yym1470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1471 := r.ContainerType()
		if yyct1471 == codecSelferValueTypeMap1234 {
			yyl1471 := r.ReadMapStart()
			if yyl1471 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1471, d)
			}
		} else if yyct1471 == codecSelferValueTypeArray1234 {
			yyl1471 := r.ReadArrayStart()
			if yyl1471 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1471, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1472Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1472Slc
	var yyhl1472 bool = l >= 0
	for yyj1472 := 0; ; yyj1472++ {
		if yyhl1472 {
			if yyj1472 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1472Slc = r.DecodeBytes(yys1472Slc, true, true)
		yys1472 := string(yys1472Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1472 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicaSetConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1475 := &x.LastTransitionTime
				yym1476 := z.DecBinary()
				_ = yym1476
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1475) {
				} else if yym1476 {
					z.DecBinaryUnmarshal(yyv1475)
				} else if !yym1476 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1475)
				} else {
					z.DecFallback(yyv1475, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1472)
		} // end switch yys1472
	} // end for yyj1472
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1479 int
	var yyb1479 bool
	var yyhl1479 bool = l >= 0
	yyj1479++
	if yyhl1479 {
		yyb1479 = yyj1479 > l
	} else {
		yyb1479 = r.CheckBreak()
	}
	if yyb1479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicaSetConditionType(r.DecodeString())
	}
	yyj1479++
	if yyhl1479 {
		yyb1479 = yyj1479 > l
	} else {
		yyb1479 = r.CheckBreak()
	}
	if yyb1479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj1479++
	if yyhl1479 {
		yyb1479 = yyj1479 > l
	} else {
		yyb1479 = r.CheckBreak()
	}
	if yyb1479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1482 := &x.LastTransitionTime
		yym1483 := z.DecBinary()
		_ = yym1483
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1482) {
		} else if yym1483 {
			z.DecBinaryUnmarshal(yyv1482)
		} else if !yym1483 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1482)
		} else {
			z.DecFallback(yyv1482, false)
		}
	}
	yyj1479++
	if yyhl1479 {
		yyb1479 = yyj1479 > l
	} else {
		yyb1479 = r.CheckBreak()
	}
	if yyb1479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1479++
	if yyhl1479 {
		yyb1479 = yyj1479 > l
	} else {
		yyb1479 = r.CheckBreak()
	}
	if yyb1479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1479++
		if yyhl1479 {
			yyb1479 = yyj1479 > l
		} else {
			yyb1479 = r.CheckBreak()
		}
		if yyb1479 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1479-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1486 := z.EncBinary()
		_ = yym1486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1487 := !z.EncBinary()
			yy2arr1487 := z.EncBasicHandle().StructToArray
			var yyq1487 [4]bool
			_, _, _ = yysep1487, yyq1487, yy2arr1487
			const yyr1487 bool = false
			yyq1487[0] = x.Kind != ""
			yyq1487[1] = x.APIVersion != ""
			yyq1487[2] = true
			yyq1487[3] = true
			var yynn1487 int
			if yyr1487 || yy2arr1487 {
				r.EncodeArrayStart(4)
			} else {
				yynn1487 = 0
				for _, b := range yyq1487 {
					if b {
						yynn1487++
					}
				}
				r.EncodeMapStart(yynn1487)
				yynn1487 = 0
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[0] {
					yym1489 := z.EncBinary()
					_ = yym1489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1487[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1490 := z.EncBinary()
					_ = yym1490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[1] {
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[2] {
					yy1495 := &x.ObjectMeta
					yym1496 := z.EncBinary()
					_ = yym1496
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1495) {
					} else {
						z.EncFallback(yy1495)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1497 := &x.ObjectMeta
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1497) {
					} else {
						z.EncFallback(yy1497)
					}
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1487[3] {
					yy1500 := &x.Spec
					yy1500.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1487[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1501 := &x.Spec
					yy1501.CodecEncodeSelf(e)
				}
			}
			if yyr1487 || yy2arr1487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1502 := z.DecBinary()
	_ = yym1502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1503 := r.ContainerType()
		if yyct1503 == codecSelferValueTypeMap1234 {
			yyl1503 := r.ReadMapStart()
			if yyl1503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1503, d)
			}
		} else if yyct1503 == codecSelferValueTypeArray1234 {
			yyl1503 := r.ReadArrayStart()
			if yyl1503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1504Slc
	var yyhl1504 bool = l >= 0
	for yyj1504 := 0; ; yyj1504++ {
		if yyhl1504 {
			if yyj1504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1504Slc = r.DecodeBytes(yys1504Slc, true, true)
		yys1504 := string(yys1504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1504 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1507 := &x.ObjectMeta
				yym1508 := z.DecBinary()
				_ = yym1508
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1507) {
				} else {
					z.DecFallback(yyv1507, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSecurityPolicySpec{}
			} else {
				yyv1509 := &x.Spec
				yyv1509.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1504)
		} // end switch yys1504
	} // end for yyj1504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1510 int
	var yyb1510 bool
	var yyhl1510 bool = l >= 0
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1513 := &x.ObjectMeta
		yym1514 := z.DecBinary()
		_ = yym1514
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1513) {
		} else {
			z.DecFallback(yyv1513, false)
		}
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSecurityPolicySpec{}
	} else {
		yyv1515 := &x.Spec
		yyv1515.CodecDecodeSelf(d)
	}
	for {
		yyj1510++
		if yyhl1510 {
			yyb1510 = yyj1510 > l
		} else {
			yyb1510 = r.CheckBreak()
		}
		if yyb1510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1516 := z.EncBinary()
		_ = yym1516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1517 := !z.EncBinary()
			yy2arr1517 := z.EncBasicHandle().StructToArray
			var yyq1517 [14]bool
			_, _, _ = yysep1517, yyq1517, yy2arr1517
			const yyr1517 bool = false
			yyq1517[0] = x.Privileged != false
			yyq1517[1] = len(x.DefaultAddCapabilities) != 0
			yyq1517[2] = len(x.RequiredDropCapabilities) != 0
			yyq1517[3] = len(x.AllowedCapabilities) != 0
			yyq1517[4] = len(x.Volumes) != 0
			yyq1517[5] = x.HostNetwork != false
			yyq1517[6] = len(x.HostPorts) != 0
			yyq1517[7] = x.HostPID != false
			yyq1517[8] = x.HostIPC != false
			yyq1517[13] = x.ReadOnlyRootFilesystem != false
			var yynn1517 int
			if yyr1517 || yy2arr1517 {
				r.EncodeArrayStart(14)
			} else {
				yynn1517 = 4
				for _, b := range yyq1517 {
					if b {
						yynn1517++
					}
				}
				r.EncodeMapStart(yynn1517)
				yynn1517 = 0
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1517[0] {
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1517[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1517[1] {
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1522 := z.EncBinary()
						_ = yym1522
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1517[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultAddCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1523 := z.EncBinary()
						_ = yym1523
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1517[2] {
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1525 := z.EncBinary()
						_ = yym1525
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1517[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDropCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1526 := z.EncBinary()
						_ = yym1526
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1517[3] {
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1528 := z.EncBinary()
						_ = yym1528
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.AllowedCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1517[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allowedCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.AllowedCapabilities), e)
						}
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1517[4] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1531 := z.EncBinary()
						_ = yym1531
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1517[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1532 := z.EncBinary()
						_ = yym1532
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1517[5] {
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1517[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1517[6] {
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1537 := z.EncBinary()
						_ = yym1537
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1517[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPorts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1538 := z.EncBinary()
						_ = yym1538
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1517[7] {
					yym1540 := z.EncBinary()
					_ = yym1540
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1517[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1541 := z.EncBinary()
					_ = yym1541
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1517[8] {
					yym1543 := z.EncBinary()
					_ = yym1543
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1517[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1544 := z.EncBinary()
					_ = yym1544
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1546 := &x.SELinux
				yy1546.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("seLinux"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1547 := &x.SELinux
				yy1547.CodecEncodeSelf(e)
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1549 := &x.RunAsUser
				yy1549.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1550 := &x.RunAsUser
				yy1550.CodecEncodeSelf(e)
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1552 := &x.SupplementalGroups
				yy1552.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1553 := &x.SupplementalGroups
				yy1553.CodecEncodeSelf(e)
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1555 := &x.FSGroup
				yy1555.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1556 := &x.FSGroup
				yy1556.CodecEncodeSelf(e)
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1517[13] {
					yym1558 := z.EncBinary()
					_ = yym1558
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1517[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				}
			}
			if yyr1517 || yy2arr1517 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1560 := z.DecBinary()
	_ = yym1560
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1561 := r.ContainerType()
		if yyct1561 == codecSelferValueTypeMap1234 {
			yyl1561 := r.ReadMapStart()
			if yyl1561 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1561, d)
			}
		} else if yyct1561 == codecSelferValueTypeArray1234 {
			yyl1561 := r.ReadArrayStart()
			if yyl1561 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1561, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1562Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1562Slc
	var yyhl1562 bool = l >= 0
	for yyj1562 := 0; ; yyj1562++ {
		if yyhl1562 {
			if yyj1562 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1562Slc = r.DecodeBytes(yys1562Slc, true, true)
		yys1562 := string(yys1562Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1562 {
		case "privileged":
			if r.TryDecodeAsNil() {
				x.Privileged = false
			} else {
				x.Privileged = bool(r.DecodeBool())
			}
		case "defaultAddCapabilities":
			if r.TryDecodeAsNil() {
				x.DefaultAddCapabilities = nil
			} else {
				yyv1564 := &x.DefaultAddCapabilities
				yym1565 := z.DecBinary()
				_ = yym1565
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1564), d)
				}
			}
		case "requiredDropCapabilities":
			if r.TryDecodeAsNil() {
				x.RequiredDropCapabilities = nil
			} else {
				yyv1566 := &x.RequiredDropCapabilities
				yym1567 := z.DecBinary()
				_ = yym1567
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1566), d)
				}
			}
		case "allowedCapabilities":
			if r.TryDecodeAsNil() {
				x.AllowedCapabilities = nil
			} else {
				yyv1568 := &x.AllowedCapabilities
				yym1569 := z.DecBinary()
				_ = yym1569
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1568), d)
				}
			}
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1570 := &x.Volumes
				yym1571 := z.DecBinary()
				_ = yym1571
				if false {
				} else {
					h.decSliceFSType((*[]FSType)(yyv1570), d)
				}
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPorts":
			if r.TryDecodeAsNil() {
				x.HostPorts = nil
			} else {
				yyv1573 := &x.HostPorts
				yym1574 := z.DecBinary()
				_ = yym1574
				if false {
				} else {
					h.decSliceHostPortRange((*[]HostPortRange)(yyv1573), d)
				}
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinux":
			if r.TryDecodeAsNil() {
				x.SELinux = SELinuxStrategyOptions{}
			} else {
				yyv1577 := &x.SELinux
				yyv1577.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				x.RunAsUser = RunAsUserStrategyOptions{}
			} else {
				yyv1578 := &x.RunAsUser
				yyv1578.CodecDecodeSelf(d)
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
			} else {
				yyv1579 := &x.SupplementalGroups
				yyv1579.CodecDecodeSelf(d)
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				x.FSGroup = FSGroupStrategyOptions{}
			} else {
				yyv1580 := &x.FSGroup
				yyv1580.CodecDecodeSelf(d)
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				x.ReadOnlyRootFilesystem = false
			} else {
				x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1562)
		} // end switch yys1562
	} // end for yyj1562
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1582 int
	var yyb1582 bool
	var yyhl1582 bool = l >= 0
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Privileged = false
	} else {
		x.Privileged = bool(r.DecodeBool())
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultAddCapabilities = nil
	} else {
		yyv1584 := &x.DefaultAddCapabilities
		yym1585 := z.DecBinary()
		_ = yym1585
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1584), d)
		}
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDropCapabilities = nil
	} else {
		yyv1586 := &x.RequiredDropCapabilities
		yym1587 := z.DecBinary()
		_ = yym1587
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1586), d)
		}
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AllowedCapabilities = nil
	} else {
		yyv1588 := &x.AllowedCapabilities
		yym1589 := z.DecBinary()
		_ = yym1589
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1588), d)
		}
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1590 := &x.Volumes
		yym1591 := z.DecBinary()
		_ = yym1591
		if false {
		} else {
			h.decSliceFSType((*[]FSType)(yyv1590), d)
		}
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPorts = nil
	} else {
		yyv1593 := &x.HostPorts
		yym1594 := z.DecBinary()
		_ = yym1594
		if false {
		} else {
			h.decSliceHostPortRange((*[]HostPortRange)(yyv1593), d)
		}
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SELinux = SELinuxStrategyOptions{}
	} else {
		yyv1597 := &x.SELinux
		yyv1597.CodecDecodeSelf(d)
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RunAsUser = RunAsUserStrategyOptions{}
	} else {
		yyv1598 := &x.RunAsUser
		yyv1598.CodecDecodeSelf(d)
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
	} else {
		yyv1599 := &x.SupplementalGroups
		yyv1599.CodecDecodeSelf(d)
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSGroup = FSGroupStrategyOptions{}
	} else {
		yyv1600 := &x.FSGroup
		yyv1600.CodecDecodeSelf(d)
	}
	yyj1582++
	if yyhl1582 {
		yyb1582 = yyj1582 > l
	} else {
		yyb1582 = r.CheckBreak()
	}
	if yyb1582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnlyRootFilesystem = false
	} else {
		x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
	}
	for {
		yyj1582++
		if yyhl1582 {
			yyb1582 = yyj1582 > l
		} else {
			yyb1582 = r.CheckBreak()
		}
		if yyb1582 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1582-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1602 := z.EncBinary()
	_ = yym1602
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1603 := z.DecBinary()
	_ = yym1603
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPortRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1604 := z.EncBinary()
		_ = yym1604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1605 := !z.EncBinary()
			yy2arr1605 := z.EncBasicHandle().StructToArray
			var yyq1605 [2]bool
			_, _, _ = yysep1605, yyq1605, yy2arr1605
			const yyr1605 bool = false
			var yynn1605 int
			if yyr1605 || yy2arr1605 {
				r.EncodeArrayStart(2)
			} else {
				yynn1605 = 2
				for _, b := range yyq1605 {
					if b {
						yynn1605++
					}
				}
				r.EncodeMapStart(yynn1605)
				yynn1605 = 0
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1607 := z.EncBinary()
				_ = yym1607
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1608 := z.EncBinary()
				_ = yym1608
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1610 := z.EncBinary()
				_ = yym1610
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1611 := z.EncBinary()
				_ = yym1611
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPortRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1612 := z.DecBinary()
	_ = yym1612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1613 := r.ContainerType()
		if yyct1613 == codecSelferValueTypeMap1234 {
			yyl1613 := r.ReadMapStart()
			if yyl1613 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1613, d)
			}
		} else if yyct1613 == codecSelferValueTypeArray1234 {
			yyl1613 := r.ReadArrayStart()
			if yyl1613 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1613, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPortRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1614Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1614Slc
	var yyhl1614 bool = l >= 0
	for yyj1614 := 0; ; yyj1614++ {
		if yyhl1614 {
			if yyj1614 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1614Slc = r.DecodeBytes(yys1614Slc, true, true)
		yys1614 := string(yys1614Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1614 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int32(r.DecodeInt(32))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1614)
		} // end switch yys1614
	} // end for yyj1614
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPortRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1617 int
	var yyb1617 bool
	var yyhl1617 bool = l >= 0
	yyj1617++
	if yyhl1617 {
		yyb1617 = yyj1617 > l
	} else {
		yyb1617 = r.CheckBreak()
	}
	if yyb1617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int32(r.DecodeInt(32))
	}
	yyj1617++
	if yyhl1617 {
		yyb1617 = yyj1617 > l
	} else {
		yyb1617 = r.CheckBreak()
	}
	if yyb1617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int32(r.DecodeInt(32))
	}
	for {
		yyj1617++
		if yyhl1617 {
			yyb1617 = yyj1617 > l
		} else {
			yyb1617 = r.CheckBreak()
		}
		if yyb1617 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1617-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1620 := z.EncBinary()
		_ = yym1620
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1621 := !z.EncBinary()
			yy2arr1621 := z.EncBasicHandle().StructToArray
			var yyq1621 [2]bool
			_, _, _ = yysep1621, yyq1621, yy2arr1621
			const yyr1621 bool = false
			yyq1621[1] = x.SELinuxOptions != nil
			var yynn1621 int
			if yyr1621 || yy2arr1621 {
				r.EncodeArrayStart(2)
			} else {
				yynn1621 = 1
				for _, b := range yyq1621 {
					if b {
						yynn1621++
					}
				}
				r.EncodeMapStart(yynn1621)
				yynn1621 = 0
			}
			if yyr1621 || yy2arr1621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1621 || yy2arr1621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1621[1] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						yym1624 := z.EncBinary()
						_ = yym1624
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SELinuxOptions) {
						} else {
							z.EncFallback(x.SELinuxOptions)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1621[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						yym1625 := z.EncBinary()
						_ = yym1625
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SELinuxOptions) {
						} else {
							z.EncFallback(x.SELinuxOptions)
						}
					}
				}
			}
			if yyr1621 || yy2arr1621 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1626 := z.DecBinary()
	_ = yym1626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1627 := r.ContainerType()
		if yyct1627 == codecSelferValueTypeMap1234 {
			yyl1627 := r.ReadMapStart()
			if yyl1627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1627, d)
			}
		} else if yyct1627 == codecSelferValueTypeArray1234 {
			yyl1627 := r.ReadArrayStart()
			if yyl1627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1628Slc
	var yyhl1628 bool = l >= 0
	for yyj1628 := 0; ; yyj1628++ {
		if yyhl1628 {
			if yyj1628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1628Slc = r.DecodeBytes(yys1628Slc, true, true)
		yys1628 := string(yys1628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1628 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SELinuxStrategy(r.DecodeString())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(pkg2_v1.SELinuxOptions)
				}
				yym1631 := z.DecBinary()
				_ = yym1631
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SELinuxOptions) {
				} else {
					z.DecFallback(x.SELinuxOptions, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1628)
		} // end switch yys1628
	} // end for yyj1628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1632 int
	var yyb1632 bool
	var yyhl1632 bool = l >= 0
	yyj1632++
	if yyhl1632 {
		yyb1632 = yyj1632 > l
	} else {
		yyb1632 = r.CheckBreak()
	}
	if yyb1632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SELinuxStrategy(r.DecodeString())
	}
	yyj1632++
	if yyhl1632 {
		yyb1632 = yyj1632 > l
	} else {
		yyb1632 = r.CheckBreak()
	}
	if yyb1632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(pkg2_v1.SELinuxOptions)
		}
		yym1635 := z.DecBinary()
		_ = yym1635
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SELinuxOptions) {
		} else {
			z.DecFallback(x.SELinuxOptions, false)
		}
	}
	for {
		yyj1632++
		if yyhl1632 {
			yyb1632 = yyj1632 > l
		} else {
			yyb1632 = r.CheckBreak()
		}
		if yyb1632 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1632-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SELinuxStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1636 := z.EncBinary()
	_ = yym1636
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SELinuxStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1637 := z.DecBinary()
	_ = yym1637
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RunAsUserStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1638 := z.EncBinary()
		_ = yym1638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1639 := !z.EncBinary()
			yy2arr1639 := z.EncBasicHandle().StructToArray
			var yyq1639 [2]bool
			_, _, _ = yysep1639, yyq1639, yy2arr1639
			const yyr1639 bool = false
			yyq1639[1] = len(x.Ranges) != 0
			var yynn1639 int
			if yyr1639 || yy2arr1639 {
				r.EncodeArrayStart(2)
			} else {
				yynn1639 = 1
				for _, b := range yyq1639 {
					if b {
						yynn1639++
					}
				}
				r.EncodeMapStart(yynn1639)
				yynn1639 = 0
			}
			if yyr1639 || yy2arr1639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1639 || yy2arr1639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1639[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1642 := z.EncBinary()
						_ = yym1642
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1639[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1643 := z.EncBinary()
						_ = yym1643
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1639 || yy2arr1639 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RunAsUserStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1644 := z.DecBinary()
	_ = yym1644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1645 := r.ContainerType()
		if yyct1645 == codecSelferValueTypeMap1234 {
			yyl1645 := r.ReadMapStart()
			if yyl1645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1645, d)
			}
		} else if yyct1645 == codecSelferValueTypeArray1234 {
			yyl1645 := r.ReadArrayStart()
			if yyl1645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1646Slc
	var yyhl1646 bool = l >= 0
	for yyj1646 := 0; ; yyj1646++ {
		if yyhl1646 {
			if yyj1646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1646Slc = r.DecodeBytes(yys1646Slc, true, true)
		yys1646 := string(yys1646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1646 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = RunAsUserStrategy(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1648 := &x.Ranges
				yym1649 := z.DecBinary()
				_ = yym1649
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1648), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1646)
		} // end switch yys1646
	} // end for yyj1646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1650 int
	var yyb1650 bool
	var yyhl1650 bool = l >= 0
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = RunAsUserStrategy(r.DecodeString())
	}
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1652 := &x.Ranges
		yym1653 := z.DecBinary()
		_ = yym1653
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1652), d)
		}
	}
	for {
		yyj1650++
		if yyhl1650 {
			yyb1650 = yyj1650 > l
		} else {
			yyb1650 = r.CheckBreak()
		}
		if yyb1650 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1650-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IDRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1654 := z.EncBinary()
		_ = yym1654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1655 := !z.EncBinary()
			yy2arr1655 := z.EncBasicHandle().StructToArray
			var yyq1655 [2]bool
			_, _, _ = yysep1655, yyq1655, yy2arr1655
			const yyr1655 bool = false
			var yynn1655 int
			if yyr1655 || yy2arr1655 {
				r.EncodeArrayStart(2)
			} else {
				yynn1655 = 2
				for _, b := range yyq1655 {
					if b {
						yynn1655++
					}
				}
				r.EncodeMapStart(yynn1655)
				yynn1655 = 0
			}
			if yyr1655 || yy2arr1655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1657 := z.EncBinary()
				_ = yym1657
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1658 := z.EncBinary()
				_ = yym1658
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1655 || yy2arr1655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1660 := z.EncBinary()
				_ = yym1660
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1661 := z.EncBinary()
				_ = yym1661
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1655 || yy2arr1655 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IDRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1662 := z.DecBinary()
	_ = yym1662
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1663 := r.ContainerType()
		if yyct1663 == codecSelferValueTypeMap1234 {
			yyl1663 := r.ReadMapStart()
			if yyl1663 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1663, d)
			}
		} else if yyct1663 == codecSelferValueTypeArray1234 {
			yyl1663 := r.ReadArrayStart()
			if yyl1663 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1663, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IDRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1664Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1664Slc
	var yyhl1664 bool = l >= 0
	for yyj1664 := 0; ; yyj1664++ {
		if yyhl1664 {
			if yyj1664 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1664Slc = r.DecodeBytes(yys1664Slc, true, true)
		yys1664 := string(yys1664Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1664 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int64(r.DecodeInt(64))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1664)
		} // end switch yys1664
	} // end for yyj1664
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IDRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1667 int
	var yyb1667 bool
	var yyhl1667 bool = l >= 0
	yyj1667++
	if yyhl1667 {
		yyb1667 = yyj1667 > l
	} else {
		yyb1667 = r.CheckBreak()
	}
	if yyb1667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int64(r.DecodeInt(64))
	}
	yyj1667++
	if yyhl1667 {
		yyb1667 = yyj1667 > l
	} else {
		yyb1667 = r.CheckBreak()
	}
	if yyb1667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int64(r.DecodeInt(64))
	}
	for {
		yyj1667++
		if yyhl1667 {
			yyb1667 = yyj1667 > l
		} else {
			yyb1667 = r.CheckBreak()
		}
		if yyb1667 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1667-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RunAsUserStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1670 := z.EncBinary()
	_ = yym1670
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RunAsUserStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1671 := z.DecBinary()
	_ = yym1671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *FSGroupStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1672 := z.EncBinary()
		_ = yym1672
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1673 := !z.EncBinary()
			yy2arr1673 := z.EncBasicHandle().StructToArray
			var yyq1673 [2]bool
			_, _, _ = yysep1673, yyq1673, yy2arr1673
			const yyr1673 bool = false
			yyq1673[0] = x.Rule != ""
			yyq1673[1] = len(x.Ranges) != 0
			var yynn1673 int
			if yyr1673 || yy2arr1673 {
				r.EncodeArrayStart(2)
			} else {
				yynn1673 = 0
				for _, b := range yyq1673 {
					if b {
						yynn1673++
					}
				}
				r.EncodeMapStart(yynn1673)
				yynn1673 = 0
			}
			if yyr1673 || yy2arr1673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1673[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1673[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1673 || yy2arr1673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1673[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1676 := z.EncBinary()
						_ = yym1676
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1673[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1677 := z.EncBinary()
						_ = yym1677
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1673 || yy2arr1673 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FSGroupStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1678 := z.DecBinary()
	_ = yym1678
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1679 := r.ContainerType()
		if yyct1679 == codecSelferValueTypeMap1234 {
			yyl1679 := r.ReadMapStart()
			if yyl1679 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1679, d)
			}
		} else if yyct1679 == codecSelferValueTypeArray1234 {
			yyl1679 := r.ReadArrayStart()
			if yyl1679 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1679, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1680Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1680Slc
	var yyhl1680 bool = l >= 0
	for yyj1680 := 0; ; yyj1680++ {
		if yyhl1680 {
			if yyj1680 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1680Slc = r.DecodeBytes(yys1680Slc, true, true)
		yys1680 := string(yys1680Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1680 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = FSGroupStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1682 := &x.Ranges
				yym1683 := z.DecBinary()
				_ = yym1683
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1682), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1680)
		} // end switch yys1680
	} // end for yyj1680
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1684 int
	var yyb1684 bool
	var yyhl1684 bool = l >= 0
	yyj1684++
	if yyhl1684 {
		yyb1684 = yyj1684 > l
	} else {
		yyb1684 = r.CheckBreak()
	}
	if yyb1684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = FSGroupStrategyType(r.DecodeString())
	}
	yyj1684++
	if yyhl1684 {
		yyb1684 = yyj1684 > l
	} else {
		yyb1684 = r.CheckBreak()
	}
	if yyb1684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1686 := &x.Ranges
		yym1687 := z.DecBinary()
		_ = yym1687
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1686), d)
		}
	}
	for {
		yyj1684++
		if yyhl1684 {
			yyb1684 = yyj1684 > l
		} else {
			yyb1684 = r.CheckBreak()
		}
		if yyb1684 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1684-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSGroupStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1688 := z.EncBinary()
	_ = yym1688
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSGroupStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1689 := z.DecBinary()
	_ = yym1689
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1690 := z.EncBinary()
		_ = yym1690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1691 := !z.EncBinary()
			yy2arr1691 := z.EncBasicHandle().StructToArray
			var yyq1691 [2]bool
			_, _, _ = yysep1691, yyq1691, yy2arr1691
			const yyr1691 bool = false
			yyq1691[0] = x.Rule != ""
			yyq1691[1] = len(x.Ranges) != 0
			var yynn1691 int
			if yyr1691 || yy2arr1691 {
				r.EncodeArrayStart(2)
			} else {
				yynn1691 = 0
				for _, b := range yyq1691 {
					if b {
						yynn1691++
					}
				}
				r.EncodeMapStart(yynn1691)
				yynn1691 = 0
			}
			if yyr1691 || yy2arr1691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1691[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1691[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1691 || yy2arr1691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1691[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1694 := z.EncBinary()
						_ = yym1694
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1691[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1695 := z.EncBinary()
						_ = yym1695
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1691 || yy2arr1691 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1696 := z.DecBinary()
	_ = yym1696
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1697 := r.ContainerType()
		if yyct1697 == codecSelferValueTypeMap1234 {
			yyl1697 := r.ReadMapStart()
			if yyl1697 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1697, d)
			}
		} else if yyct1697 == codecSelferValueTypeArray1234 {
			yyl1697 := r.ReadArrayStart()
			if yyl1697 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1697, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1698Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1698Slc
	var yyhl1698 bool = l >= 0
	for yyj1698 := 0; ; yyj1698++ {
		if yyhl1698 {
			if yyj1698 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1698Slc = r.DecodeBytes(yys1698Slc, true, true)
		yys1698 := string(yys1698Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1698 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1700 := &x.Ranges
				yym1701 := z.DecBinary()
				_ = yym1701
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1700), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1698)
		} // end switch yys1698
	} // end for yyj1698
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1702 int
	var yyb1702 bool
	var yyhl1702 bool = l >= 0
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1704 := &x.Ranges
		yym1705 := z.DecBinary()
		_ = yym1705
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1704), d)
		}
	}
	for {
		yyj1702++
		if yyhl1702 {
			yyb1702 = yyj1702 > l
		} else {
			yyb1702 = r.CheckBreak()
		}
		if yyb1702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SupplementalGroupsStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1706 := z.EncBinary()
	_ = yym1706
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SupplementalGroupsStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1707 := z.DecBinary()
	_ = yym1707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSecurityPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1708 := z.EncBinary()
		_ = yym1708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1709 := !z.EncBinary()
			yy2arr1709 := z.EncBasicHandle().StructToArray
			var yyq1709 [4]bool
			_, _, _ = yysep1709, yyq1709, yy2arr1709
			const yyr1709 bool = false
			yyq1709[0] = x.Kind != ""
			yyq1709[1] = x.APIVersion != ""
			yyq1709[2] = true
			var yynn1709 int
			if yyr1709 || yy2arr1709 {
				r.EncodeArrayStart(4)
			} else {
				yynn1709 = 1
				for _, b := range yyq1709 {
					if b {
						yynn1709++
					}
				}
				r.EncodeMapStart(yynn1709)
				yynn1709 = 0
			}
			if yyr1709 || yy2arr1709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1709[0] {
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1709[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1712 := z.EncBinary()
					_ = yym1712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1709 || yy2arr1709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1709[1] {
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1709[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1715 := z.EncBinary()
					_ = yym1715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1709 || yy2arr1709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1709[2] {
					yy1717 := &x.ListMeta
					yym1718 := z.EncBinary()
					_ = yym1718
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1717) {
					} else {
						z.EncFallback(yy1717)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1709[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1719 := &x.ListMeta
					yym1720 := z.EncBinary()
					_ = yym1720
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1719) {
					} else {
						z.EncFallback(yy1719)
					}
				}
			}
			if yyr1709 || yy2arr1709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1722 := z.EncBinary()
					_ = yym1722
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1723 := z.EncBinary()
					_ = yym1723
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			}
			if yyr1709 || yy2arr1709 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1724 := z.DecBinary()
	_ = yym1724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1725 := r.ContainerType()
		if yyct1725 == codecSelferValueTypeMap1234 {
			yyl1725 := r.ReadMapStart()
			if yyl1725 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1725, d)
			}
		} else if yyct1725 == codecSelferValueTypeArray1234 {
			yyl1725 := r.ReadArrayStart()
			if yyl1725 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1725, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1726Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1726Slc
	var yyhl1726 bool = l >= 0
	for yyj1726 := 0; ; yyj1726++ {
		if yyhl1726 {
			if yyj1726 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1726Slc = r.DecodeBytes(yys1726Slc, true, true)
		yys1726 := string(yys1726Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1726 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1729 := &x.ListMeta
				yym1730 := z.DecBinary()
				_ = yym1730
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1729) {
				} else {
					z.DecFallback(yyv1729, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1731 := &x.Items
				yym1732 := z.DecBinary()
				_ = yym1732
				if false {
				} else {
					h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1731), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1726)
		} // end switch yys1726
	} // end for yyj1726
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1733 int
	var yyb1733 bool
	var yyhl1733 bool = l >= 0
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1736 := &x.ListMeta
		yym1737 := z.DecBinary()
		_ = yym1737
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1736) {
		} else {
			z.DecFallback(yyv1736, false)
		}
	}
	yyj1733++
	if yyhl1733 {
		yyb1733 = yyj1733 > l
	} else {
		yyb1733 = r.CheckBreak()
	}
	if yyb1733 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1738 := &x.Items
		yym1739 := z.DecBinary()
		_ = yym1739
		if false {
		} else {
			h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1738), d)
		}
	}
	for {
		yyj1733++
		if yyhl1733 {
			yyb1733 = yyj1733 > l
		} else {
			yyb1733 = r.CheckBreak()
		}
		if yyb1733 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1733-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1740 := z.EncBinary()
		_ = yym1740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1741 := !z.EncBinary()
			yy2arr1741 := z.EncBasicHandle().StructToArray
			var yyq1741 [4]bool
			_, _, _ = yysep1741, yyq1741, yy2arr1741
			const yyr1741 bool = false
			yyq1741[0] = x.Kind != ""
			yyq1741[1] = x.APIVersion != ""
			yyq1741[2] = true
			yyq1741[3] = true
			var yynn1741 int
			if yyr1741 || yy2arr1741 {
				r.EncodeArrayStart(4)
			} else {
				yynn1741 = 0
				for _, b := range yyq1741 {
					if b {
						yynn1741++
					}
				}
				r.EncodeMapStart(yynn1741)
				yynn1741 = 0
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[0] {
					yym1743 := z.EncBinary()
					_ = yym1743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1741[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1744 := z.EncBinary()
					_ = yym1744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[1] {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1741[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1747 := z.EncBinary()
					_ = yym1747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[2] {
					yy1749 := &x.ObjectMeta
					yym1750 := z.EncBinary()
					_ = yym1750
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1749) {
					} else {
						z.EncFallback(yy1749)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1741[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1751 := &x.ObjectMeta
					yym1752 := z.EncBinary()
					_ = yym1752
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1751) {
					} else {
						z.EncFallback(yy1751)
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[3] {
					yy1754 := &x.Spec
					yy1754.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1741[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1755 := &x.Spec
					yy1755.CodecEncodeSelf(e)
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1756 := z.DecBinary()
	_ = yym1756
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1757 := r.ContainerType()
		if yyct1757 == codecSelferValueTypeMap1234 {
			yyl1757 := r.ReadMapStart()
			if yyl1757 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1757, d)
			}
		} else if yyct1757 == codecSelferValueTypeArray1234 {
			yyl1757 := r.ReadArrayStart()
			if yyl1757 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1757, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1758Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1758Slc
	var yyhl1758 bool = l >= 0
	for yyj1758 := 0; ; yyj1758++ {
		if yyhl1758 {
			if yyj1758 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1758Slc = r.DecodeBytes(yys1758Slc, true, true)
		yys1758 := string(yys1758Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1758 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1761 := &x.ObjectMeta
				yym1762 := z.DecBinary()
				_ = yym1762
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1761) {
				} else {
					z.DecFallback(yyv1761, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkPolicySpec{}
			} else {
				yyv1763 := &x.Spec
				yyv1763.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1758)
		} // end switch yys1758
	} // end for yyj1758
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1764 int
	var yyb1764 bool
	var yyhl1764 bool = l >= 0
	yyj1764++
	if yyhl1764 {
		yyb1764 = yyj1764 > l
	} else {
		yyb1764 = r.CheckBreak()
	}
	if yyb1764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1764++
	if yyhl1764 {
		yyb1764 = yyj1764 > l
	} else {
		yyb1764 = r.CheckBreak()
	}
	if yyb1764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1764++
	if yyhl1764 {
		yyb1764 = yyj1764 > l
	} else {
		yyb1764 = r.CheckBreak()
	}
	if yyb1764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1767 := &x.ObjectMeta
		yym1768 := z.DecBinary()
		_ = yym1768
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1767) {
		} else {
			z.DecFallback(yyv1767, false)
		}
	}
	yyj1764++
	if yyhl1764 {
		yyb1764 = yyj1764 > l
	} else {
		yyb1764 = r.CheckBreak()
	}
	if yyb1764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NetworkPolicySpec{}
	} else {
		yyv1769 := &x.Spec
		yyv1769.CodecDecodeSelf(d)
	}
	for {
		yyj1764++
		if yyhl1764 {
			yyb1764 = yyj1764 > l
		} else {
			yyb1764 = r.CheckBreak()
		}
		if yyb1764 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1764-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1770 := z.EncBinary()
		_ = yym1770
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1771 := !z.EncBinary()
			yy2arr1771 := z.EncBasicHandle().StructToArray
			var yyq1771 [2]bool
			_, _, _ = yysep1771, yyq1771, yy2arr1771
			const yyr1771 bool = false
			yyq1771[1] = len(x.Ingress) != 0
			var yynn1771 int
			if yyr1771 || yy2arr1771 {
				r.EncodeArrayStart(2)
			} else {
				yynn1771 = 1
				for _, b := range yyq1771 {
					if b {
						yynn1771++
					}
				}
				r.EncodeMapStart(yynn1771)
				yynn1771 = 0
			}
			if yyr1771 || yy2arr1771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1773 := &x.PodSelector
				yym1774 := z.EncBinary()
				_ = yym1774
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1773) {
				} else {
					z.EncFallback(yy1773)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1775 := &x.PodSelector
				yym1776 := z.EncBinary()
				_ = yym1776
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1775) {
				} else {
					z.EncFallback(yy1775)
				}
			}
			if yyr1771 || yy2arr1771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1771[1] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1778 := z.EncBinary()
						_ = yym1778
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1771[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1779 := z.EncBinary()
						_ = yym1779
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1771 || yy2arr1771 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1780 := z.DecBinary()
	_ = yym1780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1781 := r.ContainerType()
		if yyct1781 == codecSelferValueTypeMap1234 {
			yyl1781 := r.ReadMapStart()
			if yyl1781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1781, d)
			}
		} else if yyct1781 == codecSelferValueTypeArray1234 {
			yyl1781 := r.ReadArrayStart()
			if yyl1781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1782Slc
	var yyhl1782 bool = l >= 0
	for yyj1782 := 0; ; yyj1782++ {
		if yyhl1782 {
			if yyj1782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1782Slc = r.DecodeBytes(yys1782Slc, true, true)
		yys1782 := string(yys1782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1782 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				x.PodSelector = pkg1_unversioned.LabelSelector{}
			} else {
				yyv1783 := &x.PodSelector
				yym1784 := z.DecBinary()
				_ = yym1784
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1783) {
				} else {
					z.DecFallback(yyv1783, false)
				}
			}
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1785 := &x.Ingress
				yym1786 := z.DecBinary()
				_ = yym1786
				if false {
				} else {
					h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1785), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1782)
		} // end switch yys1782
	} // end for yyj1782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1787 int
	var yyb1787 bool
	var yyhl1787 bool = l >= 0
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSelector = pkg1_unversioned.LabelSelector{}
	} else {
		yyv1788 := &x.PodSelector
		yym1789 := z.DecBinary()
		_ = yym1789
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1788) {
		} else {
			z.DecFallback(yyv1788, false)
		}
	}
	yyj1787++
	if yyhl1787 {
		yyb1787 = yyj1787 > l
	} else {
		yyb1787 = r.CheckBreak()
	}
	if yyb1787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1790 := &x.Ingress
		yym1791 := z.DecBinary()
		_ = yym1791
		if false {
		} else {
			h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1790), d)
		}
	}
	for {
		yyj1787++
		if yyhl1787 {
			yyb1787 = yyj1787 > l
		} else {
			yyb1787 = r.CheckBreak()
		}
		if yyb1787 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1787-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyIngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1792 := z.EncBinary()
		_ = yym1792
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1793 := !z.EncBinary()
			yy2arr1793 := z.EncBasicHandle().StructToArray
			var yyq1793 [2]bool
			_, _, _ = yysep1793, yyq1793, yy2arr1793
			const yyr1793 bool = false
			yyq1793[0] = len(x.Ports) != 0
			yyq1793[1] = len(x.From) != 0
			var yynn1793 int
			if yyr1793 || yy2arr1793 {
				r.EncodeArrayStart(2)
			} else {
				yynn1793 = 0
				for _, b := range yyq1793 {
					if b {
						yynn1793++
					}
				}
				r.EncodeMapStart(yynn1793)
				yynn1793 = 0
			}
			if yyr1793 || yy2arr1793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1793[0] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1795 := z.EncBinary()
						_ = yym1795
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1793[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1796 := z.EncBinary()
						_ = yym1796
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1793 || yy2arr1793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1793[1] {
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1798 := z.EncBinary()
						_ = yym1798
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1793[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("from"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1799 := z.EncBinary()
						_ = yym1799
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				}
			}
			if yyr1793 || yy2arr1793 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyIngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1800 := z.DecBinary()
	_ = yym1800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1801 := r.ContainerType()
		if yyct1801 == codecSelferValueTypeMap1234 {
			yyl1801 := r.ReadMapStart()
			if yyl1801 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1801, d)
			}
		} else if yyct1801 == codecSelferValueTypeArray1234 {
			yyl1801 := r.ReadArrayStart()
			if yyl1801 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1802Slc
	var yyhl1802 bool = l >= 0
	for yyj1802 := 0; ; yyj1802++ {
		if yyhl1802 {
			if yyj1802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1802Slc = r.DecodeBytes(yys1802Slc, true, true)
		yys1802 := string(yys1802Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1802 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1803 := &x.Ports
				yym1804 := z.DecBinary()
				_ = yym1804
				if false {
				} else {
					h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1803), d)
				}
			}
		case "from":
			if r.TryDecodeAsNil() {
				x.From = nil
			} else {
				yyv1805 := &x.From
				yym1806 := z.DecBinary()
				_ = yym1806
				if false {
				} else {
					h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1805), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1802)
		} // end switch yys1802
	} // end for yyj1802
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1807 int
	var yyb1807 bool
	var yyhl1807 bool = l >= 0
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1808 := &x.Ports
		yym1809 := z.DecBinary()
		_ = yym1809
		if false {
		} else {
			h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1808), d)
		}
	}
	yyj1807++
	if yyhl1807 {
		yyb1807 = yyj1807 > l
	} else {
		yyb1807 = r.CheckBreak()
	}
	if yyb1807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.From = nil
	} else {
		yyv1810 := &x.From
		yym1811 := z.DecBinary()
		_ = yym1811
		if false {
		} else {
			h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1810), d)
		}
	}
	for {
		yyj1807++
		if yyhl1807 {
			yyb1807 = yyj1807 > l
		} else {
			yyb1807 = r.CheckBreak()
		}
		if yyb1807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1812 := z.EncBinary()
		_ = yym1812
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1813 := !z.EncBinary()
			yy2arr1813 := z.EncBasicHandle().StructToArray
			var yyq1813 [2]bool
			_, _, _ = yysep1813, yyq1813, yy2arr1813
			const yyr1813 bool = false
			yyq1813[0] = x.Protocol != nil
			yyq1813[1] = x.Port != nil
			var yynn1813 int
			if yyr1813 || yy2arr1813 {
				r.EncodeArrayStart(2)
			} else {
				yynn1813 = 0
				for _, b := range yyq1813 {
					if b {
						yynn1813++
					}
				}
				r.EncodeMapStart(yynn1813)
				yynn1813 = 0
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1813[0] {
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1815 := *x.Protocol
						yym1816 := z.EncBinary()
						_ = yym1816
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1815) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1815))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1813[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1817 := *x.Protocol
						yym1818 := z.EncBinary()
						_ = yym1818
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1817) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1817))
						}
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1813[1] {
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1820 := z.EncBinary()
						_ = yym1820
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1820 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1813[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1821 := z.EncBinary()
						_ = yym1821
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1821 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1822 := z.DecBinary()
	_ = yym1822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1823 := r.ContainerType()
		if yyct1823 == codecSelferValueTypeMap1234 {
			yyl1823 := r.ReadMapStart()
			if yyl1823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1823, d)
			}
		} else if yyct1823 == codecSelferValueTypeArray1234 {
			yyl1823 := r.ReadArrayStart()
			if yyl1823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1824Slc
	var yyhl1824 bool = l >= 0
	for yyj1824 := 0; ; yyj1824++ {
		if yyhl1824 {
			if yyj1824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1824Slc = r.DecodeBytes(yys1824Slc, true, true)
		yys1824 := string(yys1824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1824 {
		case "protocol":
			if r.TryDecodeAsNil() {
				if x.Protocol != nil {
					x.Protocol = nil
				}
			} else {
				if x.Protocol == nil {
					x.Protocol = new(pkg2_v1.Protocol)
				}
				yym1826 := z.DecBinary()
				_ = yym1826
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Protocol) {
				} else {
					*((*string)(x.Protocol)) = r.DecodeString()
				}
			}
		case "port":
			if r.TryDecodeAsNil() {
				if x.Port != nil {
					x.Port = nil
				}
			} else {
				if x.Port == nil {
					x.Port = new(pkg5_intstr.IntOrString)
				}
				yym1828 := z.DecBinary()
				_ = yym1828
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Port) {
				} else if !yym1828 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Port)
				} else {
					z.DecFallback(x.Port, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1824)
		} // end switch yys1824
	} // end for yyj1824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1829 int
	var yyb1829 bool
	var yyhl1829 bool = l >= 0
	yyj1829++
	if yyhl1829 {
		yyb1829 = yyj1829 > l
	} else {
		yyb1829 = r.CheckBreak()
	}
	if yyb1829 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Protocol != nil {
			x.Protocol = nil
		}
	} else {
		if x.Protocol == nil {
			x.Protocol = new(pkg2_v1.Protocol)
		}
		yym1831 := z.DecBinary()
		_ = yym1831
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Protocol) {
		} else {
			*((*string)(x.Protocol)) = r.DecodeString()
		}
	}
	yyj1829++
	if yyhl1829 {
		yyb1829 = yyj1829 > l
	} else {
		yyb1829 = r.CheckBreak()
	}
	if yyb1829 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Port != nil {
			x.Port = nil
		}
	} else {
		if x.Port == nil {
			x.Port = new(pkg5_intstr.IntOrString)
		}
		yym1833 := z.DecBinary()
		_ = yym1833
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Port) {
		} else if !yym1833 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Port)
		} else {
			z.DecFallback(x.Port, false)
		}
	}
	for {
		yyj1829++
		if yyhl1829 {
			yyb1829 = yyj1829 > l
		} else {
			yyb1829 = r.CheckBreak()
		}
		if yyb1829 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1829-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPeer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1834 := z.EncBinary()
		_ = yym1834
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1835 := !z.EncBinary()
			yy2arr1835 := z.EncBasicHandle().StructToArray
			var yyq1835 [2]bool
			_, _, _ = yysep1835, yyq1835, yy2arr1835
			const yyr1835 bool = false
			yyq1835[0] = x.PodSelector != nil
			yyq1835[1] = x.NamespaceSelector != nil
			var yynn1835 int
			if yyr1835 || yy2arr1835 {
				r.EncodeArrayStart(2)
			} else {
				yynn1835 = 0
				for _, b := range yyq1835 {
					if b {
						yynn1835++
					}
				}
				r.EncodeMapStart(yynn1835)
				yynn1835 = 0
			}
			if yyr1835 || yy2arr1835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1835[0] {
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1837 := z.EncBinary()
						_ = yym1837
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1835[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1838 := z.EncBinary()
						_ = yym1838
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				}
			}
			if yyr1835 || yy2arr1835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1835[1] {
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1840 := z.EncBinary()
						_ = yym1840
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1835[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespaceSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1841 := z.EncBinary()
						_ = yym1841
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				}
			}
			if yyr1835 || yy2arr1835 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPeer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1842 := z.DecBinary()
	_ = yym1842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1843 := r.ContainerType()
		if yyct1843 == codecSelferValueTypeMap1234 {
			yyl1843 := r.ReadMapStart()
			if yyl1843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1843, d)
			}
		} else if yyct1843 == codecSelferValueTypeArray1234 {
			yyl1843 := r.ReadArrayStart()
			if yyl1843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1844Slc
	var yyhl1844 bool = l >= 0
	for yyj1844 := 0; ; yyj1844++ {
		if yyhl1844 {
			if yyj1844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1844Slc = r.DecodeBytes(yys1844Slc, true, true)
		yys1844 := string(yys1844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1844 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				if x.PodSelector != nil {
					x.PodSelector = nil
				}
			} else {
				if x.PodSelector == nil {
					x.PodSelector = new(pkg1_unversioned.LabelSelector)
				}
				yym1846 := z.DecBinary()
				_ = yym1846
				if false {
				} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
				} else {
					z.DecFallback(x.PodSelector, false)
				}
			}
		case "namespaceSelector":
			if r.TryDecodeAsNil() {
				if x.NamespaceSelector != nil {
					x.NamespaceSelector = nil
				}
			} else {
				if x.NamespaceSelector == nil {
					x.NamespaceSelector = new(pkg1_unversioned.LabelSelector)
				}
				yym1848 := z.DecBinary()
				_ = yym1848
				if false {
				} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
				} else {
					z.DecFallback(x.NamespaceSelector, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1844)
		} // end switch yys1844
	} // end for yyj1844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1849 int
	var yyb1849 bool
	var yyhl1849 bool = l >= 0
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodSelector != nil {
			x.PodSelector = nil
		}
	} else {
		if x.PodSelector == nil {
			x.PodSelector = new(pkg1_unversioned.LabelSelector)
		}
		yym1851 := z.DecBinary()
		_ = yym1851
		if false {
		} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
		} else {
			z.DecFallback(x.PodSelector, false)
		}
	}
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NamespaceSelector != nil {
			x.NamespaceSelector = nil
		}
	} else {
		if x.NamespaceSelector == nil {
			x.NamespaceSelector = new(pkg1_unversioned.LabelSelector)
		}
		yym1853 := z.DecBinary()
		_ = yym1853
		if false {
		} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
		} else {
			z.DecFallback(x.NamespaceSelector, false)
		}
	}
	for {
		yyj1849++
		if yyhl1849 {
			yyb1849 = yyj1849 > l
		} else {
			yyb1849 = r.CheckBreak()
		}
		if yyb1849 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1849-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1854 := z.EncBinary()
		_ = yym1854
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1855 := !z.EncBinary()
			yy2arr1855 := z.EncBasicHandle().StructToArray
			var yyq1855 [4]bool
			_, _, _ = yysep1855, yyq1855, yy2arr1855
			const yyr1855 bool = false
			yyq1855[0] = x.Kind != ""
			yyq1855[1] = x.APIVersion != ""
			yyq1855[2] = true
			var yynn1855 int
			if yyr1855 || yy2arr1855 {
				r.EncodeArrayStart(4)
			} else {
				yynn1855 = 1
				for _, b := range yyq1855 {
					if b {
						yynn1855++
					}
				}
				r.EncodeMapStart(yynn1855)
				yynn1855 = 0
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[0] {
					yym1857 := z.EncBinary()
					_ = yym1857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1855[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[1] {
					yym1860 := z.EncBinary()
					_ = yym1860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1855[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1861 := z.EncBinary()
					_ = yym1861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[2] {
					yy1863 := &x.ListMeta
					yym1864 := z.EncBinary()
					_ = yym1864
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1863) {
					} else {
						z.EncFallback(yy1863)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1855[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1865 := &x.ListMeta
					yym1866 := z.EncBinary()
					_ = yym1866
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1865) {
					} else {
						z.EncFallback(yy1865)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1868 := z.EncBinary()
					_ = yym1868
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1869 := z.EncBinary()
					_ = yym1869
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1870 := z.DecBinary()
	_ = yym1870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1871 := r.ContainerType()
		if yyct1871 == codecSelferValueTypeMap1234 {
			yyl1871 := r.ReadMapStart()
			if yyl1871 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1871, d)
			}
		} else if yyct1871 == codecSelferValueTypeArray1234 {
			yyl1871 := r.ReadArrayStart()
			if yyl1871 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1872Slc
	var yyhl1872 bool = l >= 0
	for yyj1872 := 0; ; yyj1872++ {
		if yyhl1872 {
			if yyj1872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1872Slc = r.DecodeBytes(yys1872Slc, true, true)
		yys1872 := string(yys1872Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1872 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1875 := &x.ListMeta
				yym1876 := z.DecBinary()
				_ = yym1876
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1875) {
				} else {
					z.DecFallback(yyv1875, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1877 := &x.Items
				yym1878 := z.DecBinary()
				_ = yym1878
				if false {
				} else {
					h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1877), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1872)
		} // end switch yys1872
	} // end for yyj1872
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1879 int
	var yyb1879 bool
	var yyhl1879 bool = l >= 0
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1882 := &x.ListMeta
		yym1883 := z.DecBinary()
		_ = yym1883
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1882) {
		} else {
			z.DecFallback(yyv1882, false)
		}
	}
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1884 := &x.Items
		yym1885 := z.DecBinary()
		_ = yym1885
		if false {
		} else {
			h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1884), d)
		}
	}
	for {
		yyj1879++
		if yyhl1879 {
			yyb1879 = yyj1879 > l
		} else {
			yyb1879 = r.CheckBreak()
		}
		if yyb1879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1886 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1887 := &yyv1886
		yy1887.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1888 := *v
	yyh1888, yyl1888 := z.DecSliceHelperStart()
	var yyc1888 bool
	if yyl1888 == 0 {
		if yyv1888 == nil {
			yyv1888 = []CustomMetricTarget{}
			yyc1888 = true
		} else if len(yyv1888) != 0 {
			yyv1888 = yyv1888[:0]
			yyc1888 = true
		}
	} else if yyl1888 > 0 {
		var yyrr1888, yyrl1888 int
		var yyrt1888 bool
		if yyl1888 > cap(yyv1888) {

			yyrg1888 := len(yyv1888) > 0
			yyv21888 := yyv1888
			yyrl1888, yyrt1888 = z.DecInferLen(yyl1888, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1888 {
				if yyrl1888 <= cap(yyv1888) {
					yyv1888 = yyv1888[:yyrl1888]
				} else {
					yyv1888 = make([]CustomMetricTarget, yyrl1888)
				}
			} else {
				yyv1888 = make([]CustomMetricTarget, yyrl1888)
			}
			yyc1888 = true
			yyrr1888 = len(yyv1888)
			if yyrg1888 {
				copy(yyv1888, yyv21888)
			}
		} else if yyl1888 != len(yyv1888) {
			yyv1888 = yyv1888[:yyl1888]
			yyc1888 = true
		}
		yyj1888 := 0
		for ; yyj1888 < yyrr1888; yyj1888++ {
			yyh1888.ElemContainerState(yyj1888)
			if r.TryDecodeAsNil() {
				yyv1888[yyj1888] = CustomMetricTarget{}
			} else {
				yyv1889 := &yyv1888[yyj1888]
				yyv1889.CodecDecodeSelf(d)
			}

		}
		if yyrt1888 {
			for ; yyj1888 < yyl1888; yyj1888++ {
				yyv1888 = append(yyv1888, CustomMetricTarget{})
				yyh1888.ElemContainerState(yyj1888)
				if r.TryDecodeAsNil() {
					yyv1888[yyj1888] = CustomMetricTarget{}
				} else {
					yyv1890 := &yyv1888[yyj1888]
					yyv1890.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1888 := 0
		for ; !r.CheckBreak(); yyj1888++ {

			if yyj1888 >= len(yyv1888) {
				yyv1888 = append(yyv1888, CustomMetricTarget{}) // var yyz1888 CustomMetricTarget
				yyc1888 = true
			}
			yyh1888.ElemContainerState(yyj1888)
			if yyj1888 < len(yyv1888) {
				if r.TryDecodeAsNil() {
					yyv1888[yyj1888] = CustomMetricTarget{}
				} else {
					yyv1891 := &yyv1888[yyj1888]
					yyv1891.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1888 < len(yyv1888) {
			yyv1888 = yyv1888[:yyj1888]
			yyc1888 = true
		} else if yyj1888 == 0 && yyv1888 == nil {
			yyv1888 = []CustomMetricTarget{}
			yyc1888 = true
		}
	}
	yyh1888.End()
	if yyc1888 {
		*v = yyv1888
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1892 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1893 := &yyv1892
		yy1893.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1894 := *v
	yyh1894, yyl1894 := z.DecSliceHelperStart()
	var yyc1894 bool
	if yyl1894 == 0 {
		if yyv1894 == nil {
			yyv1894 = []CustomMetricCurrentStatus{}
			yyc1894 = true
		} else if len(yyv1894) != 0 {
			yyv1894 = yyv1894[:0]
			yyc1894 = true
		}
	} else if yyl1894 > 0 {
		var yyrr1894, yyrl1894 int
		var yyrt1894 bool
		if yyl1894 > cap(yyv1894) {

			yyrg1894 := len(yyv1894) > 0
			yyv21894 := yyv1894
			yyrl1894, yyrt1894 = z.DecInferLen(yyl1894, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1894 {
				if yyrl1894 <= cap(yyv1894) {
					yyv1894 = yyv1894[:yyrl1894]
				} else {
					yyv1894 = make([]CustomMetricCurrentStatus, yyrl1894)
				}
			} else {
				yyv1894 = make([]CustomMetricCurrentStatus, yyrl1894)
			}
			yyc1894 = true
			yyrr1894 = len(yyv1894)
			if yyrg1894 {
				copy(yyv1894, yyv21894)
			}
		} else if yyl1894 != len(yyv1894) {
			yyv1894 = yyv1894[:yyl1894]
			yyc1894 = true
		}
		yyj1894 := 0
		for ; yyj1894 < yyrr1894; yyj1894++ {
			yyh1894.ElemContainerState(yyj1894)
			if r.TryDecodeAsNil() {
				yyv1894[yyj1894] = CustomMetricCurrentStatus{}
			} else {
				yyv1895 := &yyv1894[yyj1894]
				yyv1895.CodecDecodeSelf(d)
			}

		}
		if yyrt1894 {
			for ; yyj1894 < yyl1894; yyj1894++ {
				yyv1894 = append(yyv1894, CustomMetricCurrentStatus{})
				yyh1894.ElemContainerState(yyj1894)
				if r.TryDecodeAsNil() {
					yyv1894[yyj1894] = CustomMetricCurrentStatus{}
				} else {
					yyv1896 := &yyv1894[yyj1894]
					yyv1896.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1894 := 0
		for ; !r.CheckBreak(); yyj1894++ {

			if yyj1894 >= len(yyv1894) {
				yyv1894 = append(yyv1894, CustomMetricCurrentStatus{}) // var yyz1894 CustomMetricCurrentStatus
				yyc1894 = true
			}
			yyh1894.ElemContainerState(yyj1894)
			if yyj1894 < len(yyv1894) {
				if r.TryDecodeAsNil() {
					yyv1894[yyj1894] = CustomMetricCurrentStatus{}
				} else {
					yyv1897 := &yyv1894[yyj1894]
					yyv1897.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1894 < len(yyv1894) {
			yyv1894 = yyv1894[:yyj1894]
			yyc1894 = true
		} else if yyj1894 == 0 && yyv1894 == nil {
			yyv1894 = []CustomMetricCurrentStatus{}
			yyc1894 = true
		}
	}
	yyh1894.End()
	if yyc1894 {
		*v = yyv1894
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1898 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1899 := &yyv1898
		yy1899.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1900 := *v
	yyh1900, yyl1900 := z.DecSliceHelperStart()
	var yyc1900 bool
	if yyl1900 == 0 {
		if yyv1900 == nil {
			yyv1900 = []HorizontalPodAutoscaler{}
			yyc1900 = true
		} else if len(yyv1900) != 0 {
			yyv1900 = yyv1900[:0]
			yyc1900 = true
		}
	} else if yyl1900 > 0 {
		var yyrr1900, yyrl1900 int
		var yyrt1900 bool
		if yyl1900 > cap(yyv1900) {

			yyrg1900 := len(yyv1900) > 0
			yyv21900 := yyv1900
			yyrl1900, yyrt1900 = z.DecInferLen(yyl1900, z.DecBasicHandle().MaxInitLen, 376)
			if yyrt1900 {
				if yyrl1900 <= cap(yyv1900) {
					yyv1900 = yyv1900[:yyrl1900]
				} else {
					yyv1900 = make([]HorizontalPodAutoscaler, yyrl1900)
				}
			} else {
				yyv1900 = make([]HorizontalPodAutoscaler, yyrl1900)
			}
			yyc1900 = true
			yyrr1900 = len(yyv1900)
			if yyrg1900 {
				copy(yyv1900, yyv21900)
			}
		} else if yyl1900 != len(yyv1900) {
			yyv1900 = yyv1900[:yyl1900]
			yyc1900 = true
		}
		yyj1900 := 0
		for ; yyj1900 < yyrr1900; yyj1900++ {
			yyh1900.ElemContainerState(yyj1900)
			if r.TryDecodeAsNil() {
				yyv1900[yyj1900] = HorizontalPodAutoscaler{}
			} else {
				yyv1901 := &yyv1900[yyj1900]
				yyv1901.CodecDecodeSelf(d)
			}

		}
		if yyrt1900 {
			for ; yyj1900 < yyl1900; yyj1900++ {
				yyv1900 = append(yyv1900, HorizontalPodAutoscaler{})
				yyh1900.ElemContainerState(yyj1900)
				if r.TryDecodeAsNil() {
					yyv1900[yyj1900] = HorizontalPodAutoscaler{}
				} else {
					yyv1902 := &yyv1900[yyj1900]
					yyv1902.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1900 := 0
		for ; !r.CheckBreak(); yyj1900++ {

			if yyj1900 >= len(yyv1900) {
				yyv1900 = append(yyv1900, HorizontalPodAutoscaler{}) // var yyz1900 HorizontalPodAutoscaler
				yyc1900 = true
			}
			yyh1900.ElemContainerState(yyj1900)
			if yyj1900 < len(yyv1900) {
				if r.TryDecodeAsNil() {
					yyv1900[yyj1900] = HorizontalPodAutoscaler{}
				} else {
					yyv1903 := &yyv1900[yyj1900]
					yyv1903.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1900 < len(yyv1900) {
			yyv1900 = yyv1900[:yyj1900]
			yyc1900 = true
		} else if yyj1900 == 0 && yyv1900 == nil {
			yyv1900 = []HorizontalPodAutoscaler{}
			yyc1900 = true
		}
	}
	yyh1900.End()
	if yyc1900 {
		*v = yyv1900
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1904 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1905 := &yyv1904
		yy1905.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1906 := *v
	yyh1906, yyl1906 := z.DecSliceHelperStart()
	var yyc1906 bool
	if yyl1906 == 0 {
		if yyv1906 == nil {
			yyv1906 = []APIVersion{}
			yyc1906 = true
		} else if len(yyv1906) != 0 {
			yyv1906 = yyv1906[:0]
			yyc1906 = true
		}
	} else if yyl1906 > 0 {
		var yyrr1906, yyrl1906 int
		var yyrt1906 bool
		if yyl1906 > cap(yyv1906) {

			yyrg1906 := len(yyv1906) > 0
			yyv21906 := yyv1906
			yyrl1906, yyrt1906 = z.DecInferLen(yyl1906, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1906 {
				if yyrl1906 <= cap(yyv1906) {
					yyv1906 = yyv1906[:yyrl1906]
				} else {
					yyv1906 = make([]APIVersion, yyrl1906)
				}
			} else {
				yyv1906 = make([]APIVersion, yyrl1906)
			}
			yyc1906 = true
			yyrr1906 = len(yyv1906)
			if yyrg1906 {
				copy(yyv1906, yyv21906)
			}
		} else if yyl1906 != len(yyv1906) {
			yyv1906 = yyv1906[:yyl1906]
			yyc1906 = true
		}
		yyj1906 := 0
		for ; yyj1906 < yyrr1906; yyj1906++ {
			yyh1906.ElemContainerState(yyj1906)
			if r.TryDecodeAsNil() {
				yyv1906[yyj1906] = APIVersion{}
			} else {
				yyv1907 := &yyv1906[yyj1906]
				yyv1907.CodecDecodeSelf(d)
			}

		}
		if yyrt1906 {
			for ; yyj1906 < yyl1906; yyj1906++ {
				yyv1906 = append(yyv1906, APIVersion{})
				yyh1906.ElemContainerState(yyj1906)
				if r.TryDecodeAsNil() {
					yyv1906[yyj1906] = APIVersion{}
				} else {
					yyv1908 := &yyv1906[yyj1906]
					yyv1908.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1906 := 0
		for ; !r.CheckBreak(); yyj1906++ {

			if yyj1906 >= len(yyv1906) {
				yyv1906 = append(yyv1906, APIVersion{}) // var yyz1906 APIVersion
				yyc1906 = true
			}
			yyh1906.ElemContainerState(yyj1906)
			if yyj1906 < len(yyv1906) {
				if r.TryDecodeAsNil() {
					yyv1906[yyj1906] = APIVersion{}
				} else {
					yyv1909 := &yyv1906[yyj1906]
					yyv1909.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1906 < len(yyv1906) {
			yyv1906 = yyv1906[:yyj1906]
			yyc1906 = true
		} else if yyj1906 == 0 && yyv1906 == nil {
			yyv1906 = []APIVersion{}
			yyc1906 = true
		}
	}
	yyh1906.End()
	if yyc1906 {
		*v = yyv1906
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1910 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1911 := &yyv1910
		yy1911.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1912 := *v
	yyh1912, yyl1912 := z.DecSliceHelperStart()
	var yyc1912 bool
	if yyl1912 == 0 {
		if yyv1912 == nil {
			yyv1912 = []ThirdPartyResource{}
			yyc1912 = true
		} else if len(yyv1912) != 0 {
			yyv1912 = yyv1912[:0]
			yyc1912 = true
		}
	} else if yyl1912 > 0 {
		var yyrr1912, yyrl1912 int
		var yyrt1912 bool
		if yyl1912 > cap(yyv1912) {

			yyrg1912 := len(yyv1912) > 0
			yyv21912 := yyv1912
			yyrl1912, yyrt1912 = z.DecInferLen(yyl1912, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt1912 {
				if yyrl1912 <= cap(yyv1912) {
					yyv1912 = yyv1912[:yyrl1912]
				} else {
					yyv1912 = make([]ThirdPartyResource, yyrl1912)
				}
			} else {
				yyv1912 = make([]ThirdPartyResource, yyrl1912)
			}
			yyc1912 = true
			yyrr1912 = len(yyv1912)
			if yyrg1912 {
				copy(yyv1912, yyv21912)
			}
		} else if yyl1912 != len(yyv1912) {
			yyv1912 = yyv1912[:yyl1912]
			yyc1912 = true
		}
		yyj1912 := 0
		for ; yyj1912 < yyrr1912; yyj1912++ {
			yyh1912.ElemContainerState(yyj1912)
			if r.TryDecodeAsNil() {
				yyv1912[yyj1912] = ThirdPartyResource{}
			} else {
				yyv1913 := &yyv1912[yyj1912]
				yyv1913.CodecDecodeSelf(d)
			}

		}
		if yyrt1912 {
			for ; yyj1912 < yyl1912; yyj1912++ {
				yyv1912 = append(yyv1912, ThirdPartyResource{})
				yyh1912.ElemContainerState(yyj1912)
				if r.TryDecodeAsNil() {
					yyv1912[yyj1912] = ThirdPartyResource{}
				} else {
					yyv1914 := &yyv1912[yyj1912]
					yyv1914.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1912 := 0
		for ; !r.CheckBreak(); yyj1912++ {

			if yyj1912 >= len(yyv1912) {
				yyv1912 = append(yyv1912, ThirdPartyResource{}) // var yyz1912 ThirdPartyResource
				yyc1912 = true
			}
			yyh1912.ElemContainerState(yyj1912)
			if yyj1912 < len(yyv1912) {
				if r.TryDecodeAsNil() {
					yyv1912[yyj1912] = ThirdPartyResource{}
				} else {
					yyv1915 := &yyv1912[yyj1912]
					yyv1915.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1912 < len(yyv1912) {
			yyv1912 = yyv1912[:yyj1912]
			yyc1912 = true
		} else if yyj1912 == 0 && yyv1912 == nil {
			yyv1912 = []ThirdPartyResource{}
			yyc1912 = true
		}
	}
	yyh1912.End()
	if yyc1912 {
		*v = yyv1912
	}
}

func (x codecSelfer1234) encSliceDeploymentCondition(v []DeploymentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1916 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1917 := &yyv1916
		yy1917.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeploymentCondition(v *[]DeploymentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1918 := *v
	yyh1918, yyl1918 := z.DecSliceHelperStart()
	var yyc1918 bool
	if yyl1918 == 0 {
		if yyv1918 == nil {
			yyv1918 = []DeploymentCondition{}
			yyc1918 = true
		} else if len(yyv1918) != 0 {
			yyv1918 = yyv1918[:0]
			yyc1918 = true
		}
	} else if yyl1918 > 0 {
		var yyrr1918, yyrl1918 int
		var yyrt1918 bool
		if yyl1918 > cap(yyv1918) {

			yyrg1918 := len(yyv1918) > 0
			yyv21918 := yyv1918
			yyrl1918, yyrt1918 = z.DecInferLen(yyl1918, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1918 {
				if yyrl1918 <= cap(yyv1918) {
					yyv1918 = yyv1918[:yyrl1918]
				} else {
					yyv1918 = make([]DeploymentCondition, yyrl1918)
				}
			} else {
				yyv1918 = make([]DeploymentCondition, yyrl1918)
			}
			yyc1918 = true
			yyrr1918 = len(yyv1918)
			if yyrg1918 {
				copy(yyv1918, yyv21918)
			}
		} else if yyl1918 != len(yyv1918) {
			yyv1918 = yyv1918[:yyl1918]
			yyc1918 = true
		}
		yyj1918 := 0
		for ; yyj1918 < yyrr1918; yyj1918++ {
			yyh1918.ElemContainerState(yyj1918)
			if r.TryDecodeAsNil() {
				yyv1918[yyj1918] = DeploymentCondition{}
			} else {
				yyv1919 := &yyv1918[yyj1918]
				yyv1919.CodecDecodeSelf(d)
			}

		}
		if yyrt1918 {
			for ; yyj1918 < yyl1918; yyj1918++ {
				yyv1918 = append(yyv1918, DeploymentCondition{})
				yyh1918.ElemContainerState(yyj1918)
				if r.TryDecodeAsNil() {
					yyv1918[yyj1918] = DeploymentCondition{}
				} else {
					yyv1920 := &yyv1918[yyj1918]
					yyv1920.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1918 := 0
		for ; !r.CheckBreak(); yyj1918++ {

			if yyj1918 >= len(yyv1918) {
				yyv1918 = append(yyv1918, DeploymentCondition{}) // var yyz1918 DeploymentCondition
				yyc1918 = true
			}
			yyh1918.ElemContainerState(yyj1918)
			if yyj1918 < len(yyv1918) {
				if r.TryDecodeAsNil() {
					yyv1918[yyj1918] = DeploymentCondition{}
				} else {
					yyv1921 := &yyv1918[yyj1918]
					yyv1921.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1918 < len(yyv1918) {
			yyv1918 = yyv1918[:yyj1918]
			yyc1918 = true
		} else if yyj1918 == 0 && yyv1918 == nil {
			yyv1918 = []DeploymentCondition{}
			yyc1918 = true
		}
	}
	yyh1918.End()
	if yyc1918 {
		*v = yyv1918
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1922 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1923 := &yyv1922
		yy1923.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1924 := *v
	yyh1924, yyl1924 := z.DecSliceHelperStart()
	var yyc1924 bool
	if yyl1924 == 0 {
		if yyv1924 == nil {
			yyv1924 = []Deployment{}
			yyc1924 = true
		} else if len(yyv1924) != 0 {
			yyv1924 = yyv1924[:0]
			yyc1924 = true
		}
	} else if yyl1924 > 0 {
		var yyrr1924, yyrl1924 int
		var yyrt1924 bool
		if yyl1924 > cap(yyv1924) {

			yyrg1924 := len(yyv1924) > 0
			yyv21924 := yyv1924
			yyrl1924, yyrt1924 = z.DecInferLen(yyl1924, z.DecBasicHandle().MaxInitLen, 856)
			if yyrt1924 {
				if yyrl1924 <= cap(yyv1924) {
					yyv1924 = yyv1924[:yyrl1924]
				} else {
					yyv1924 = make([]Deployment, yyrl1924)
				}
			} else {
				yyv1924 = make([]Deployment, yyrl1924)
			}
			yyc1924 = true
			yyrr1924 = len(yyv1924)
			if yyrg1924 {
				copy(yyv1924, yyv21924)
			}
		} else if yyl1924 != len(yyv1924) {
			yyv1924 = yyv1924[:yyl1924]
			yyc1924 = true
		}
		yyj1924 := 0
		for ; yyj1924 < yyrr1924; yyj1924++ {
			yyh1924.ElemContainerState(yyj1924)
			if r.TryDecodeAsNil() {
				yyv1924[yyj1924] = Deployment{}
			} else {
				yyv1925 := &yyv1924[yyj1924]
				yyv1925.CodecDecodeSelf(d)
			}

		}
		if yyrt1924 {
			for ; yyj1924 < yyl1924; yyj1924++ {
				yyv1924 = append(yyv1924, Deployment{})
				yyh1924.ElemContainerState(yyj1924)
				if r.TryDecodeAsNil() {
					yyv1924[yyj1924] = Deployment{}
				} else {
					yyv1926 := &yyv1924[yyj1924]
					yyv1926.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1924 := 0
		for ; !r.CheckBreak(); yyj1924++ {

			if yyj1924 >= len(yyv1924) {
				yyv1924 = append(yyv1924, Deployment{}) // var yyz1924 Deployment
				yyc1924 = true
			}
			yyh1924.ElemContainerState(yyj1924)
			if yyj1924 < len(yyv1924) {
				if r.TryDecodeAsNil() {
					yyv1924[yyj1924] = Deployment{}
				} else {
					yyv1927 := &yyv1924[yyj1924]
					yyv1927.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1924 < len(yyv1924) {
			yyv1924 = yyv1924[:yyj1924]
			yyc1924 = true
		} else if yyj1924 == 0 && yyv1924 == nil {
			yyv1924 = []Deployment{}
			yyc1924 = true
		}
	}
	yyh1924.End()
	if yyc1924 {
		*v = yyv1924
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1928 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1929 := &yyv1928
		yy1929.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1930 := *v
	yyh1930, yyl1930 := z.DecSliceHelperStart()
	var yyc1930 bool
	if yyl1930 == 0 {
		if yyv1930 == nil {
			yyv1930 = []DaemonSet{}
			yyc1930 = true
		} else if len(yyv1930) != 0 {
			yyv1930 = yyv1930[:0]
			yyc1930 = true
		}
	} else if yyl1930 > 0 {
		var yyrr1930, yyrl1930 int
		var yyrt1930 bool
		if yyl1930 > cap(yyv1930) {

			yyrg1930 := len(yyv1930) > 0
			yyv21930 := yyv1930
			yyrl1930, yyrt1930 = z.DecInferLen(yyl1930, z.DecBasicHandle().MaxInitLen, 752)
			if yyrt1930 {
				if yyrl1930 <= cap(yyv1930) {
					yyv1930 = yyv1930[:yyrl1930]
				} else {
					yyv1930 = make([]DaemonSet, yyrl1930)
				}
			} else {
				yyv1930 = make([]DaemonSet, yyrl1930)
			}
			yyc1930 = true
			yyrr1930 = len(yyv1930)
			if yyrg1930 {
				copy(yyv1930, yyv21930)
			}
		} else if yyl1930 != len(yyv1930) {
			yyv1930 = yyv1930[:yyl1930]
			yyc1930 = true
		}
		yyj1930 := 0
		for ; yyj1930 < yyrr1930; yyj1930++ {
			yyh1930.ElemContainerState(yyj1930)
			if r.TryDecodeAsNil() {
				yyv1930[yyj1930] = DaemonSet{}
			} else {
				yyv1931 := &yyv1930[yyj1930]
				yyv1931.CodecDecodeSelf(d)
			}

		}
		if yyrt1930 {
			for ; yyj1930 < yyl1930; yyj1930++ {
				yyv1930 = append(yyv1930, DaemonSet{})
				yyh1930.ElemContainerState(yyj1930)
				if r.TryDecodeAsNil() {
					yyv1930[yyj1930] = DaemonSet{}
				} else {
					yyv1932 := &yyv1930[yyj1930]
					yyv1932.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1930 := 0
		for ; !r.CheckBreak(); yyj1930++ {

			if yyj1930 >= len(yyv1930) {
				yyv1930 = append(yyv1930, DaemonSet{}) // var yyz1930 DaemonSet
				yyc1930 = true
			}
			yyh1930.ElemContainerState(yyj1930)
			if yyj1930 < len(yyv1930) {
				if r.TryDecodeAsNil() {
					yyv1930[yyj1930] = DaemonSet{}
				} else {
					yyv1933 := &yyv1930[yyj1930]
					yyv1933.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1930 < len(yyv1930) {
			yyv1930 = yyv1930[:yyj1930]
			yyc1930 = true
		} else if yyj1930 == 0 && yyv1930 == nil {
			yyv1930 = []DaemonSet{}
			yyc1930 = true
		}
	}
	yyh1930.End()
	if yyc1930 {
		*v = yyv1930
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1934 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1935 := &yyv1934
		yy1935.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1936 := *v
	yyh1936, yyl1936 := z.DecSliceHelperStart()
	var yyc1936 bool
	if yyl1936 == 0 {
		if yyv1936 == nil {
			yyv1936 = []ThirdPartyResourceData{}
			yyc1936 = true
		} else if len(yyv1936) != 0 {
			yyv1936 = yyv1936[:0]
			yyc1936 = true
		}
	} else if yyl1936 > 0 {
		var yyrr1936, yyrl1936 int
		var yyrt1936 bool
		if yyl1936 > cap(yyv1936) {

			yyrg1936 := len(yyv1936) > 0
			yyv21936 := yyv1936
			yyrl1936, yyrt1936 = z.DecInferLen(yyl1936, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt1936 {
				if yyrl1936 <= cap(yyv1936) {
					yyv1936 = yyv1936[:yyrl1936]
				} else {
					yyv1936 = make([]ThirdPartyResourceData, yyrl1936)
				}
			} else {
				yyv1936 = make([]ThirdPartyResourceData, yyrl1936)
			}
			yyc1936 = true
			yyrr1936 = len(yyv1936)
			if yyrg1936 {
				copy(yyv1936, yyv21936)
			}
		} else if yyl1936 != len(yyv1936) {
			yyv1936 = yyv1936[:yyl1936]
			yyc1936 = true
		}
		yyj1936 := 0
		for ; yyj1936 < yyrr1936; yyj1936++ {
			yyh1936.ElemContainerState(yyj1936)
			if r.TryDecodeAsNil() {
				yyv1936[yyj1936] = ThirdPartyResourceData{}
			} else {
				yyv1937 := &yyv1936[yyj1936]
				yyv1937.CodecDecodeSelf(d)
			}

		}
		if yyrt1936 {
			for ; yyj1936 < yyl1936; yyj1936++ {
				yyv1936 = append(yyv1936, ThirdPartyResourceData{})
				yyh1936.ElemContainerState(yyj1936)
				if r.TryDecodeAsNil() {
					yyv1936[yyj1936] = ThirdPartyResourceData{}
				} else {
					yyv1938 := &yyv1936[yyj1936]
					yyv1938.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1936 := 0
		for ; !r.CheckBreak(); yyj1936++ {

			if yyj1936 >= len(yyv1936) {
				yyv1936 = append(yyv1936, ThirdPartyResourceData{}) // var yyz1936 ThirdPartyResourceData
				yyc1936 = true
			}
			yyh1936.ElemContainerState(yyj1936)
			if yyj1936 < len(yyv1936) {
				if r.TryDecodeAsNil() {
					yyv1936[yyj1936] = ThirdPartyResourceData{}
				} else {
					yyv1939 := &yyv1936[yyj1936]
					yyv1939.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1936 < len(yyv1936) {
			yyv1936 = yyv1936[:yyj1936]
			yyc1936 = true
		} else if yyj1936 == 0 && yyv1936 == nil {
			yyv1936 = []ThirdPartyResourceData{}
			yyc1936 = true
		}
	}
	yyh1936.End()
	if yyc1936 {
		*v = yyv1936
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1940 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1941 := &yyv1940
		yy1941.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1942 := *v
	yyh1942, yyl1942 := z.DecSliceHelperStart()
	var yyc1942 bool
	if yyl1942 == 0 {
		if yyv1942 == nil {
			yyv1942 = []Job{}
			yyc1942 = true
		} else if len(yyv1942) != 0 {
			yyv1942 = yyv1942[:0]
			yyc1942 = true
		}
	} else if yyl1942 > 0 {
		var yyrr1942, yyrl1942 int
		var yyrt1942 bool
		if yyl1942 > cap(yyv1942) {

			yyrg1942 := len(yyv1942) > 0
			yyv21942 := yyv1942
			yyrl1942, yyrt1942 = z.DecInferLen(yyl1942, z.DecBasicHandle().MaxInitLen, 824)
			if yyrt1942 {
				if yyrl1942 <= cap(yyv1942) {
					yyv1942 = yyv1942[:yyrl1942]
				} else {
					yyv1942 = make([]Job, yyrl1942)
				}
			} else {
				yyv1942 = make([]Job, yyrl1942)
			}
			yyc1942 = true
			yyrr1942 = len(yyv1942)
			if yyrg1942 {
				copy(yyv1942, yyv21942)
			}
		} else if yyl1942 != len(yyv1942) {
			yyv1942 = yyv1942[:yyl1942]
			yyc1942 = true
		}
		yyj1942 := 0
		for ; yyj1942 < yyrr1942; yyj1942++ {
			yyh1942.ElemContainerState(yyj1942)
			if r.TryDecodeAsNil() {
				yyv1942[yyj1942] = Job{}
			} else {
				yyv1943 := &yyv1942[yyj1942]
				yyv1943.CodecDecodeSelf(d)
			}

		}
		if yyrt1942 {
			for ; yyj1942 < yyl1942; yyj1942++ {
				yyv1942 = append(yyv1942, Job{})
				yyh1942.ElemContainerState(yyj1942)
				if r.TryDecodeAsNil() {
					yyv1942[yyj1942] = Job{}
				} else {
					yyv1944 := &yyv1942[yyj1942]
					yyv1944.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1942 := 0
		for ; !r.CheckBreak(); yyj1942++ {

			if yyj1942 >= len(yyv1942) {
				yyv1942 = append(yyv1942, Job{}) // var yyz1942 Job
				yyc1942 = true
			}
			yyh1942.ElemContainerState(yyj1942)
			if yyj1942 < len(yyv1942) {
				if r.TryDecodeAsNil() {
					yyv1942[yyj1942] = Job{}
				} else {
					yyv1945 := &yyv1942[yyj1942]
					yyv1945.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1942 < len(yyv1942) {
			yyv1942 = yyv1942[:yyj1942]
			yyc1942 = true
		} else if yyj1942 == 0 && yyv1942 == nil {
			yyv1942 = []Job{}
			yyc1942 = true
		}
	}
	yyh1942.End()
	if yyc1942 {
		*v = yyv1942
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1946 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1947 := &yyv1946
		yy1947.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1948 := *v
	yyh1948, yyl1948 := z.DecSliceHelperStart()
	var yyc1948 bool
	if yyl1948 == 0 {
		if yyv1948 == nil {
			yyv1948 = []JobCondition{}
			yyc1948 = true
		} else if len(yyv1948) != 0 {
			yyv1948 = yyv1948[:0]
			yyc1948 = true
		}
	} else if yyl1948 > 0 {
		var yyrr1948, yyrl1948 int
		var yyrt1948 bool
		if yyl1948 > cap(yyv1948) {

			yyrg1948 := len(yyv1948) > 0
			yyv21948 := yyv1948
			yyrl1948, yyrt1948 = z.DecInferLen(yyl1948, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1948 {
				if yyrl1948 <= cap(yyv1948) {
					yyv1948 = yyv1948[:yyrl1948]
				} else {
					yyv1948 = make([]JobCondition, yyrl1948)
				}
			} else {
				yyv1948 = make([]JobCondition, yyrl1948)
			}
			yyc1948 = true
			yyrr1948 = len(yyv1948)
			if yyrg1948 {
				copy(yyv1948, yyv21948)
			}
		} else if yyl1948 != len(yyv1948) {
			yyv1948 = yyv1948[:yyl1948]
			yyc1948 = true
		}
		yyj1948 := 0
		for ; yyj1948 < yyrr1948; yyj1948++ {
			yyh1948.ElemContainerState(yyj1948)
			if r.TryDecodeAsNil() {
				yyv1948[yyj1948] = JobCondition{}
			} else {
				yyv1949 := &yyv1948[yyj1948]
				yyv1949.CodecDecodeSelf(d)
			}

		}
		if yyrt1948 {
			for ; yyj1948 < yyl1948; yyj1948++ {
				yyv1948 = append(yyv1948, JobCondition{})
				yyh1948.ElemContainerState(yyj1948)
				if r.TryDecodeAsNil() {
					yyv1948[yyj1948] = JobCondition{}
				} else {
					yyv1950 := &yyv1948[yyj1948]
					yyv1950.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1948 := 0
		for ; !r.CheckBreak(); yyj1948++ {

			if yyj1948 >= len(yyv1948) {
				yyv1948 = append(yyv1948, JobCondition{}) // var yyz1948 JobCondition
				yyc1948 = true
			}
			yyh1948.ElemContainerState(yyj1948)
			if yyj1948 < len(yyv1948) {
				if r.TryDecodeAsNil() {
					yyv1948[yyj1948] = JobCondition{}
				} else {
					yyv1951 := &yyv1948[yyj1948]
					yyv1951.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1948 < len(yyv1948) {
			yyv1948 = yyv1948[:yyj1948]
			yyc1948 = true
		} else if yyj1948 == 0 && yyv1948 == nil {
			yyv1948 = []JobCondition{}
			yyc1948 = true
		}
	}
	yyh1948.End()
	if yyc1948 {
		*v = yyv1948
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1952 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1953 := &yyv1952
		yy1953.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1954 := *v
	yyh1954, yyl1954 := z.DecSliceHelperStart()
	var yyc1954 bool
	if yyl1954 == 0 {
		if yyv1954 == nil {
			yyv1954 = []Ingress{}
			yyc1954 = true
		} else if len(yyv1954) != 0 {
			yyv1954 = yyv1954[:0]
			yyc1954 = true
		}
	} else if yyl1954 > 0 {
		var yyrr1954, yyrl1954 int
		var yyrt1954 bool
		if yyl1954 > cap(yyv1954) {

			yyrg1954 := len(yyv1954) > 0
			yyv21954 := yyv1954
			yyrl1954, yyrt1954 = z.DecInferLen(yyl1954, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt1954 {
				if yyrl1954 <= cap(yyv1954) {
					yyv1954 = yyv1954[:yyrl1954]
				} else {
					yyv1954 = make([]Ingress, yyrl1954)
				}
			} else {
				yyv1954 = make([]Ingress, yyrl1954)
			}
			yyc1954 = true
			yyrr1954 = len(yyv1954)
			if yyrg1954 {
				copy(yyv1954, yyv21954)
			}
		} else if yyl1954 != len(yyv1954) {
			yyv1954 = yyv1954[:yyl1954]
			yyc1954 = true
		}
		yyj1954 := 0
		for ; yyj1954 < yyrr1954; yyj1954++ {
			yyh1954.ElemContainerState(yyj1954)
			if r.TryDecodeAsNil() {
				yyv1954[yyj1954] = Ingress{}
			} else {
				yyv1955 := &yyv1954[yyj1954]
				yyv1955.CodecDecodeSelf(d)
			}

		}
		if yyrt1954 {
			for ; yyj1954 < yyl1954; yyj1954++ {
				yyv1954 = append(yyv1954, Ingress{})
				yyh1954.ElemContainerState(yyj1954)
				if r.TryDecodeAsNil() {
					yyv1954[yyj1954] = Ingress{}
				} else {
					yyv1956 := &yyv1954[yyj1954]
					yyv1956.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1954 := 0
		for ; !r.CheckBreak(); yyj1954++ {

			if yyj1954 >= len(yyv1954) {
				yyv1954 = append(yyv1954, Ingress{}) // var yyz1954 Ingress
				yyc1954 = true
			}
			yyh1954.ElemContainerState(yyj1954)
			if yyj1954 < len(yyv1954) {
				if r.TryDecodeAsNil() {
					yyv1954[yyj1954] = Ingress{}
				} else {
					yyv1957 := &yyv1954[yyj1954]
					yyv1957.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1954 < len(yyv1954) {
			yyv1954 = yyv1954[:yyj1954]
			yyc1954 = true
		} else if yyj1954 == 0 && yyv1954 == nil {
			yyv1954 = []Ingress{}
			yyc1954 = true
		}
	}
	yyh1954.End()
	if yyc1954 {
		*v = yyv1954
	}
}

func (x codecSelfer1234) encSliceIngressTLS(v []IngressTLS, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1958 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1959 := &yyv1958
		yy1959.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressTLS(v *[]IngressTLS, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1960 := *v
	yyh1960, yyl1960 := z.DecSliceHelperStart()
	var yyc1960 bool
	if yyl1960 == 0 {
		if yyv1960 == nil {
			yyv1960 = []IngressTLS{}
			yyc1960 = true
		} else if len(yyv1960) != 0 {
			yyv1960 = yyv1960[:0]
			yyc1960 = true
		}
	} else if yyl1960 > 0 {
		var yyrr1960, yyrl1960 int
		var yyrt1960 bool
		if yyl1960 > cap(yyv1960) {

			yyrg1960 := len(yyv1960) > 0
			yyv21960 := yyv1960
			yyrl1960, yyrt1960 = z.DecInferLen(yyl1960, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1960 {
				if yyrl1960 <= cap(yyv1960) {
					yyv1960 = yyv1960[:yyrl1960]
				} else {
					yyv1960 = make([]IngressTLS, yyrl1960)
				}
			} else {
				yyv1960 = make([]IngressTLS, yyrl1960)
			}
			yyc1960 = true
			yyrr1960 = len(yyv1960)
			if yyrg1960 {
				copy(yyv1960, yyv21960)
			}
		} else if yyl1960 != len(yyv1960) {
			yyv1960 = yyv1960[:yyl1960]
			yyc1960 = true
		}
		yyj1960 := 0
		for ; yyj1960 < yyrr1960; yyj1960++ {
			yyh1960.ElemContainerState(yyj1960)
			if r.TryDecodeAsNil() {
				yyv1960[yyj1960] = IngressTLS{}
			} else {
				yyv1961 := &yyv1960[yyj1960]
				yyv1961.CodecDecodeSelf(d)
			}

		}
		if yyrt1960 {
			for ; yyj1960 < yyl1960; yyj1960++ {
				yyv1960 = append(yyv1960, IngressTLS{})
				yyh1960.ElemContainerState(yyj1960)
				if r.TryDecodeAsNil() {
					yyv1960[yyj1960] = IngressTLS{}
				} else {
					yyv1962 := &yyv1960[yyj1960]
					yyv1962.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1960 := 0
		for ; !r.CheckBreak(); yyj1960++ {

			if yyj1960 >= len(yyv1960) {
				yyv1960 = append(yyv1960, IngressTLS{}) // var yyz1960 IngressTLS
				yyc1960 = true
			}
			yyh1960.ElemContainerState(yyj1960)
			if yyj1960 < len(yyv1960) {
				if r.TryDecodeAsNil() {
					yyv1960[yyj1960] = IngressTLS{}
				} else {
					yyv1963 := &yyv1960[yyj1960]
					yyv1963.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1960 < len(yyv1960) {
			yyv1960 = yyv1960[:yyj1960]
			yyc1960 = true
		} else if yyj1960 == 0 && yyv1960 == nil {
			yyv1960 = []IngressTLS{}
			yyc1960 = true
		}
	}
	yyh1960.End()
	if yyc1960 {
		*v = yyv1960
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1964 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1965 := &yyv1964
		yy1965.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1966 := *v
	yyh1966, yyl1966 := z.DecSliceHelperStart()
	var yyc1966 bool
	if yyl1966 == 0 {
		if yyv1966 == nil {
			yyv1966 = []IngressRule{}
			yyc1966 = true
		} else if len(yyv1966) != 0 {
			yyv1966 = yyv1966[:0]
			yyc1966 = true
		}
	} else if yyl1966 > 0 {
		var yyrr1966, yyrl1966 int
		var yyrt1966 bool
		if yyl1966 > cap(yyv1966) {

			yyrg1966 := len(yyv1966) > 0
			yyv21966 := yyv1966
			yyrl1966, yyrt1966 = z.DecInferLen(yyl1966, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1966 {
				if yyrl1966 <= cap(yyv1966) {
					yyv1966 = yyv1966[:yyrl1966]
				} else {
					yyv1966 = make([]IngressRule, yyrl1966)
				}
			} else {
				yyv1966 = make([]IngressRule, yyrl1966)
			}
			yyc1966 = true
			yyrr1966 = len(yyv1966)
			if yyrg1966 {
				copy(yyv1966, yyv21966)
			}
		} else if yyl1966 != len(yyv1966) {
			yyv1966 = yyv1966[:yyl1966]
			yyc1966 = true
		}
		yyj1966 := 0
		for ; yyj1966 < yyrr1966; yyj1966++ {
			yyh1966.ElemContainerState(yyj1966)
			if r.TryDecodeAsNil() {
				yyv1966[yyj1966] = IngressRule{}
			} else {
				yyv1967 := &yyv1966[yyj1966]
				yyv1967.CodecDecodeSelf(d)
			}

		}
		if yyrt1966 {
			for ; yyj1966 < yyl1966; yyj1966++ {
				yyv1966 = append(yyv1966, IngressRule{})
				yyh1966.ElemContainerState(yyj1966)
				if r.TryDecodeAsNil() {
					yyv1966[yyj1966] = IngressRule{}
				} else {
					yyv1968 := &yyv1966[yyj1966]
					yyv1968.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1966 := 0
		for ; !r.CheckBreak(); yyj1966++ {

			if yyj1966 >= len(yyv1966) {
				yyv1966 = append(yyv1966, IngressRule{}) // var yyz1966 IngressRule
				yyc1966 = true
			}
			yyh1966.ElemContainerState(yyj1966)
			if yyj1966 < len(yyv1966) {
				if r.TryDecodeAsNil() {
					yyv1966[yyj1966] = IngressRule{}
				} else {
					yyv1969 := &yyv1966[yyj1966]
					yyv1969.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1966 < len(yyv1966) {
			yyv1966 = yyv1966[:yyj1966]
			yyc1966 = true
		} else if yyj1966 == 0 && yyv1966 == nil {
			yyv1966 = []IngressRule{}
			yyc1966 = true
		}
	}
	yyh1966.End()
	if yyc1966 {
		*v = yyv1966
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1970 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1971 := &yyv1970
		yy1971.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1972 := *v
	yyh1972, yyl1972 := z.DecSliceHelperStart()
	var yyc1972 bool
	if yyl1972 == 0 {
		if yyv1972 == nil {
			yyv1972 = []HTTPIngressPath{}
			yyc1972 = true
		} else if len(yyv1972) != 0 {
			yyv1972 = yyv1972[:0]
			yyc1972 = true
		}
	} else if yyl1972 > 0 {
		var yyrr1972, yyrl1972 int
		var yyrt1972 bool
		if yyl1972 > cap(yyv1972) {

			yyrg1972 := len(yyv1972) > 0
			yyv21972 := yyv1972
			yyrl1972, yyrt1972 = z.DecInferLen(yyl1972, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1972 {
				if yyrl1972 <= cap(yyv1972) {
					yyv1972 = yyv1972[:yyrl1972]
				} else {
					yyv1972 = make([]HTTPIngressPath, yyrl1972)
				}
			} else {
				yyv1972 = make([]HTTPIngressPath, yyrl1972)
			}
			yyc1972 = true
			yyrr1972 = len(yyv1972)
			if yyrg1972 {
				copy(yyv1972, yyv21972)
			}
		} else if yyl1972 != len(yyv1972) {
			yyv1972 = yyv1972[:yyl1972]
			yyc1972 = true
		}
		yyj1972 := 0
		for ; yyj1972 < yyrr1972; yyj1972++ {
			yyh1972.ElemContainerState(yyj1972)
			if r.TryDecodeAsNil() {
				yyv1972[yyj1972] = HTTPIngressPath{}
			} else {
				yyv1973 := &yyv1972[yyj1972]
				yyv1973.CodecDecodeSelf(d)
			}

		}
		if yyrt1972 {
			for ; yyj1972 < yyl1972; yyj1972++ {
				yyv1972 = append(yyv1972, HTTPIngressPath{})
				yyh1972.ElemContainerState(yyj1972)
				if r.TryDecodeAsNil() {
					yyv1972[yyj1972] = HTTPIngressPath{}
				} else {
					yyv1974 := &yyv1972[yyj1972]
					yyv1974.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1972 := 0
		for ; !r.CheckBreak(); yyj1972++ {

			if yyj1972 >= len(yyv1972) {
				yyv1972 = append(yyv1972, HTTPIngressPath{}) // var yyz1972 HTTPIngressPath
				yyc1972 = true
			}
			yyh1972.ElemContainerState(yyj1972)
			if yyj1972 < len(yyv1972) {
				if r.TryDecodeAsNil() {
					yyv1972[yyj1972] = HTTPIngressPath{}
				} else {
					yyv1975 := &yyv1972[yyj1972]
					yyv1975.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1972 < len(yyv1972) {
			yyv1972 = yyv1972[:yyj1972]
			yyc1972 = true
		} else if yyj1972 == 0 && yyv1972 == nil {
			yyv1972 = []HTTPIngressPath{}
			yyc1972 = true
		}
	}
	yyh1972.End()
	if yyc1972 {
		*v = yyv1972
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1976 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1977 := &yyv1976
		yy1977.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1978 := *v
	yyh1978, yyl1978 := z.DecSliceHelperStart()
	var yyc1978 bool
	if yyl1978 == 0 {
		if yyv1978 == nil {
			yyv1978 = []ReplicaSet{}
			yyc1978 = true
		} else if len(yyv1978) != 0 {
			yyv1978 = yyv1978[:0]
			yyc1978 = true
		}
	} else if yyl1978 > 0 {
		var yyrr1978, yyrl1978 int
		var yyrt1978 bool
		if yyl1978 > cap(yyv1978) {

			yyrg1978 := len(yyv1978) > 0
			yyv21978 := yyv1978
			yyrl1978, yyrt1978 = z.DecInferLen(yyl1978, z.DecBasicHandle().MaxInitLen, 800)
			if yyrt1978 {
				if yyrl1978 <= cap(yyv1978) {
					yyv1978 = yyv1978[:yyrl1978]
				} else {
					yyv1978 = make([]ReplicaSet, yyrl1978)
				}
			} else {
				yyv1978 = make([]ReplicaSet, yyrl1978)
			}
			yyc1978 = true
			yyrr1978 = len(yyv1978)
			if yyrg1978 {
				copy(yyv1978, yyv21978)
			}
		} else if yyl1978 != len(yyv1978) {
			yyv1978 = yyv1978[:yyl1978]
			yyc1978 = true
		}
		yyj1978 := 0
		for ; yyj1978 < yyrr1978; yyj1978++ {
			yyh1978.ElemContainerState(yyj1978)
			if r.TryDecodeAsNil() {
				yyv1978[yyj1978] = ReplicaSet{}
			} else {
				yyv1979 := &yyv1978[yyj1978]
				yyv1979.CodecDecodeSelf(d)
			}

		}
		if yyrt1978 {
			for ; yyj1978 < yyl1978; yyj1978++ {
				yyv1978 = append(yyv1978, ReplicaSet{})
				yyh1978.ElemContainerState(yyj1978)
				if r.TryDecodeAsNil() {
					yyv1978[yyj1978] = ReplicaSet{}
				} else {
					yyv1980 := &yyv1978[yyj1978]
					yyv1980.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1978 := 0
		for ; !r.CheckBreak(); yyj1978++ {

			if yyj1978 >= len(yyv1978) {
				yyv1978 = append(yyv1978, ReplicaSet{}) // var yyz1978 ReplicaSet
				yyc1978 = true
			}
			yyh1978.ElemContainerState(yyj1978)
			if yyj1978 < len(yyv1978) {
				if r.TryDecodeAsNil() {
					yyv1978[yyj1978] = ReplicaSet{}
				} else {
					yyv1981 := &yyv1978[yyj1978]
					yyv1981.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1978 < len(yyv1978) {
			yyv1978 = yyv1978[:yyj1978]
			yyc1978 = true
		} else if yyj1978 == 0 && yyv1978 == nil {
			yyv1978 = []ReplicaSet{}
			yyc1978 = true
		}
	}
	yyh1978.End()
	if yyc1978 {
		*v = yyv1978
	}
}

func (x codecSelfer1234) encSliceReplicaSetCondition(v []ReplicaSetCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1982 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1983 := &yyv1982
		yy1983.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSetCondition(v *[]ReplicaSetCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1984 := *v
	yyh1984, yyl1984 := z.DecSliceHelperStart()
	var yyc1984 bool
	if yyl1984 == 0 {
		if yyv1984 == nil {
			yyv1984 = []ReplicaSetCondition{}
			yyc1984 = true
		} else if len(yyv1984) != 0 {
			yyv1984 = yyv1984[:0]
			yyc1984 = true
		}
	} else if yyl1984 > 0 {
		var yyrr1984, yyrl1984 int
		var yyrt1984 bool
		if yyl1984 > cap(yyv1984) {

			yyrg1984 := len(yyv1984) > 0
			yyv21984 := yyv1984
			yyrl1984, yyrt1984 = z.DecInferLen(yyl1984, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt1984 {
				if yyrl1984 <= cap(yyv1984) {
					yyv1984 = yyv1984[:yyrl1984]
				} else {
					yyv1984 = make([]ReplicaSetCondition, yyrl1984)
				}
			} else {
				yyv1984 = make([]ReplicaSetCondition, yyrl1984)
			}
			yyc1984 = true
			yyrr1984 = len(yyv1984)
			if yyrg1984 {
				copy(yyv1984, yyv21984)
			}
		} else if yyl1984 != len(yyv1984) {
			yyv1984 = yyv1984[:yyl1984]
			yyc1984 = true
		}
		yyj1984 := 0
		for ; yyj1984 < yyrr1984; yyj1984++ {
			yyh1984.ElemContainerState(yyj1984)
			if r.TryDecodeAsNil() {
				yyv1984[yyj1984] = ReplicaSetCondition{}
			} else {
				yyv1985 := &yyv1984[yyj1984]
				yyv1985.CodecDecodeSelf(d)
			}

		}
		if yyrt1984 {
			for ; yyj1984 < yyl1984; yyj1984++ {
				yyv1984 = append(yyv1984, ReplicaSetCondition{})
				yyh1984.ElemContainerState(yyj1984)
				if r.TryDecodeAsNil() {
					yyv1984[yyj1984] = ReplicaSetCondition{}
				} else {
					yyv1986 := &yyv1984[yyj1984]
					yyv1986.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1984 := 0
		for ; !r.CheckBreak(); yyj1984++ {

			if yyj1984 >= len(yyv1984) {
				yyv1984 = append(yyv1984, ReplicaSetCondition{}) // var yyz1984 ReplicaSetCondition
				yyc1984 = true
			}
			yyh1984.ElemContainerState(yyj1984)
			if yyj1984 < len(yyv1984) {
				if r.TryDecodeAsNil() {
					yyv1984[yyj1984] = ReplicaSetCondition{}
				} else {
					yyv1987 := &yyv1984[yyj1984]
					yyv1987.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1984 < len(yyv1984) {
			yyv1984 = yyv1984[:yyj1984]
			yyc1984 = true
		} else if yyj1984 == 0 && yyv1984 == nil {
			yyv1984 = []ReplicaSetCondition{}
			yyc1984 = true
		}
	}
	yyh1984.End()
	if yyc1984 {
		*v = yyv1984
	}
}

func (x codecSelfer1234) encSlicev1_Capability(v []pkg2_v1.Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1988 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yym1989 := z.EncBinary()
		_ = yym1989
		if false {
		} else if z.HasExtensions() && z.EncExt(yyv1988) {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyv1988))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicev1_Capability(v *[]pkg2_v1.Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1990 := *v
	yyh1990, yyl1990 := z.DecSliceHelperStart()
	var yyc1990 bool
	if yyl1990 == 0 {
		if yyv1990 == nil {
			yyv1990 = []pkg2_v1.Capability{}
			yyc1990 = true
		} else if len(yyv1990) != 0 {
			yyv1990 = yyv1990[:0]
			yyc1990 = true
		}
	} else if yyl1990 > 0 {
		var yyrr1990, yyrl1990 int
		var yyrt1990 bool
		if yyl1990 > cap(yyv1990) {

			yyrl1990, yyrt1990 = z.DecInferLen(yyl1990, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1990 {
				if yyrl1990 <= cap(yyv1990) {
					yyv1990 = yyv1990[:yyrl1990]
				} else {
					yyv1990 = make([]pkg2_v1.Capability, yyrl1990)
				}
			} else {
				yyv1990 = make([]pkg2_v1.Capability, yyrl1990)
			}
			yyc1990 = true
			yyrr1990 = len(yyv1990)
		} else if yyl1990 != len(yyv1990) {
			yyv1990 = yyv1990[:yyl1990]
			yyc1990 = true
		}
		yyj1990 := 0
		for ; yyj1990 < yyrr1990; yyj1990++ {
			yyh1990.ElemContainerState(yyj1990)
			if r.TryDecodeAsNil() {
				yyv1990[yyj1990] = ""
			} else {
				yyv1990[yyj1990] = pkg2_v1.Capability(r.DecodeString())
			}

		}
		if yyrt1990 {
			for ; yyj1990 < yyl1990; yyj1990++ {
				yyv1990 = append(yyv1990, "")
				yyh1990.ElemContainerState(yyj1990)
				if r.TryDecodeAsNil() {
					yyv1990[yyj1990] = ""
				} else {
					yyv1990[yyj1990] = pkg2_v1.Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj1990 := 0
		for ; !r.CheckBreak(); yyj1990++ {

			if yyj1990 >= len(yyv1990) {
				yyv1990 = append(yyv1990, "") // var yyz1990 pkg2_v1.Capability
				yyc1990 = true
			}
			yyh1990.ElemContainerState(yyj1990)
			if yyj1990 < len(yyv1990) {
				if r.TryDecodeAsNil() {
					yyv1990[yyj1990] = ""
				} else {
					yyv1990[yyj1990] = pkg2_v1.Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1990 < len(yyv1990) {
			yyv1990 = yyv1990[:yyj1990]
			yyc1990 = true
		} else if yyj1990 == 0 && yyv1990 == nil {
			yyv1990 = []pkg2_v1.Capability{}
			yyc1990 = true
		}
	}
	yyh1990.End()
	if yyc1990 {
		*v = yyv1990
	}
}

func (x codecSelfer1234) encSliceFSType(v []FSType, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1994 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv1994.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFSType(v *[]FSType, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1995 := *v
	yyh1995, yyl1995 := z.DecSliceHelperStart()
	var yyc1995 bool
	if yyl1995 == 0 {
		if yyv1995 == nil {
			yyv1995 = []FSType{}
			yyc1995 = true
		} else if len(yyv1995) != 0 {
			yyv1995 = yyv1995[:0]
			yyc1995 = true
		}
	} else if yyl1995 > 0 {
		var yyrr1995, yyrl1995 int
		var yyrt1995 bool
		if yyl1995 > cap(yyv1995) {

			yyrl1995, yyrt1995 = z.DecInferLen(yyl1995, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1995 {
				if yyrl1995 <= cap(yyv1995) {
					yyv1995 = yyv1995[:yyrl1995]
				} else {
					yyv1995 = make([]FSType, yyrl1995)
				}
			} else {
				yyv1995 = make([]FSType, yyrl1995)
			}
			yyc1995 = true
			yyrr1995 = len(yyv1995)
		} else if yyl1995 != len(yyv1995) {
			yyv1995 = yyv1995[:yyl1995]
			yyc1995 = true
		}
		yyj1995 := 0
		for ; yyj1995 < yyrr1995; yyj1995++ {
			yyh1995.ElemContainerState(yyj1995)
			if r.TryDecodeAsNil() {
				yyv1995[yyj1995] = ""
			} else {
				yyv1995[yyj1995] = FSType(r.DecodeString())
			}

		}
		if yyrt1995 {
			for ; yyj1995 < yyl1995; yyj1995++ {
				yyv1995 = append(yyv1995, "")
				yyh1995.ElemContainerState(yyj1995)
				if r.TryDecodeAsNil() {
					yyv1995[yyj1995] = ""
				} else {
					yyv1995[yyj1995] = FSType(r.DecodeString())
				}

			}
		}

	} else {
		yyj1995 := 0
		for ; !r.CheckBreak(); yyj1995++ {

			if yyj1995 >= len(yyv1995) {
				yyv1995 = append(yyv1995, "") // var yyz1995 FSType
				yyc1995 = true
			}
			yyh1995.ElemContainerState(yyj1995)
			if yyj1995 < len(yyv1995) {
				if r.TryDecodeAsNil() {
					yyv1995[yyj1995] = ""
				} else {
					yyv1995[yyj1995] = FSType(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1995 < len(yyv1995) {
			yyv1995 = yyv1995[:yyj1995]
			yyc1995 = true
		} else if yyj1995 == 0 && yyv1995 == nil {
			yyv1995 = []FSType{}
			yyc1995 = true
		}
	}
	yyh1995.End()
	if yyc1995 {
		*v = yyv1995
	}
}

func (x codecSelfer1234) encSliceHostPortRange(v []HostPortRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1999 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy2000 := &yyv1999
		yy2000.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHostPortRange(v *[]HostPortRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv2001 := *v
	yyh2001, yyl2001 := z.DecSliceHelperStart()
	var yyc2001 bool
	if yyl2001 == 0 {
		if yyv2001 == nil {
			yyv2001 = []HostPortRange{}
			yyc2001 = true
		} else if len(yyv2001) != 0 {
			yyv2001 = yyv2001[:0]
			yyc2001 = true
		}
	} else if yyl2001 > 0 {
		var yyrr2001, yyrl2001 int
		var yyrt2001 bool
		if yyl2001 > cap(yyv2001) {

			yyrg2001 := len(yyv2001) > 0
			yyv22001 := yyv2001
			yyrl2001, yyrt2001 = z.DecInferLen(yyl2001, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt2001 {
				if yyrl2001 <= cap(yyv2001) {
					yyv2001 = yyv2001[:yyrl2001]
				} else {
					yyv2001 = make([]HostPortRange, yyrl2001)
				}
			} else {
				yyv2001 = make([]HostPortRange, yyrl2001)
			}
			yyc2001 = true
			yyrr2001 = len(yyv2001)
			if yyrg2001 {
				copy(yyv2001, yyv22001)
			}
		} else if yyl2001 != len(yyv2001) {
			yyv2001 = yyv2001[:yyl2001]
			yyc2001 = true
		}
		yyj2001 := 0
		for ; yyj2001 < yyrr2001; yyj2001++ {
			yyh2001.ElemContainerState(yyj2001)
			if r.TryDecodeAsNil() {
				yyv2001[yyj2001] = HostPortRange{}
			} else {
				yyv2002 := &yyv2001[yyj2001]
				yyv2002.CodecDecodeSelf(d)
			}

		}
		if yyrt2001 {
			for ; yyj2001 < yyl2001; yyj2001++ {
				yyv2001 = append(yyv2001, HostPortRange{})
				yyh2001.ElemContainerState(yyj2001)
				if r.TryDecodeAsNil() {
					yyv2001[yyj2001] = HostPortRange{}
				} else {
					yyv2003 := &yyv2001[yyj2001]
					yyv2003.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj2001 := 0
		for ; !r.CheckBreak(); yyj2001++ {

			if yyj2001 >= len(yyv2001) {
				yyv2001 = append(yyv2001, HostPortRange{}) // var yyz2001 HostPortRange
				yyc2001 = true
			}
			yyh2001.ElemContainerState(yyj2001)
			if yyj2001 < len(yyv2001) {
				if r.TryDecodeAsNil() {
					yyv2001[yyj2001] = HostPortRange{}
				} else {
					yyv2004 := &yyv2001[yyj2001]
					yyv2004.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj2001 < len(yyv2001) {
			yyv2001 = yyv2001[:yyj2001]
			yyc2001 = true
		} else if yyj2001 == 0 && yyv2001 == nil {
			yyv2001 = []HostPortRange{}
			yyc2001 = true
		}
	}
	yyh2001.End()
	if yyc2001 {
		*v = yyv2001
	}
}

func (x codecSelfer1234) encSliceIDRange(v []IDRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv2005 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy2006 := &yyv2005
		yy2006.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIDRange(v *[]IDRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv2007 := *v
	yyh2007, yyl2007 := z.DecSliceHelperStart()
	var yyc2007 bool
	if yyl2007 == 0 {
		if yyv2007 == nil {
			yyv2007 = []IDRange{}
			yyc2007 = true
		} else if len(yyv2007) != 0 {
			yyv2007 = yyv2007[:0]
			yyc2007 = true
		}
	} else if yyl2007 > 0 {
		var yyrr2007, yyrl2007 int
		var yyrt2007 bool
		if yyl2007 > cap(yyv2007) {

			yyrg2007 := len(yyv2007) > 0
			yyv22007 := yyv2007
			yyrl2007, yyrt2007 = z.DecInferLen(yyl2007, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt2007 {
				if yyrl2007 <= cap(yyv2007) {
					yyv2007 = yyv2007[:yyrl2007]
				} else {
					yyv2007 = make([]IDRange, yyrl2007)
				}
			} else {
				yyv2007 = make([]IDRange, yyrl2007)
			}
			yyc2007 = true
			yyrr2007 = len(yyv2007)
			if yyrg2007 {
				copy(yyv2007, yyv22007)
			}
		} else if yyl2007 != len(yyv2007) {
			yyv2007 = yyv2007[:yyl2007]
			yyc2007 = true
		}
		yyj2007 := 0
		for ; yyj2007 < yyrr2007; yyj2007++ {
			yyh2007.ElemContainerState(yyj2007)
			if r.TryDecodeAsNil() {
				yyv2007[yyj2007] = IDRange{}
			} else {
				yyv2008 := &yyv2007[yyj2007]
				yyv2008.CodecDecodeSelf(d)
			}

		}
		if yyrt2007 {
			for ; yyj2007 < yyl2007; yyj2007++ {
				yyv2007 = append(yyv2007, IDRange{})
				yyh2007.ElemContainerState(yyj2007)
				if r.TryDecodeAsNil() {
					yyv2007[yyj2007] = IDRange{}
				} else {
					yyv2009 := &yyv2007[yyj2007]
					yyv2009.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj2007 := 0
		for ; !r.CheckBreak(); yyj2007++ {

			if yyj2007 >= len(yyv2007) {
				yyv2007 = append(yyv2007, IDRange{}) // var yyz2007 IDRange
				yyc2007 = true
			}
			yyh2007.ElemContainerState(yyj2007)
			if yyj2007 < len(yyv2007) {
				if r.TryDecodeAsNil() {
					yyv2007[yyj2007] = IDRange{}
				} else {
					yyv2010 := &yyv2007[yyj2007]
					yyv2010.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj2007 < len(yyv2007) {
			yyv2007 = yyv2007[:yyj2007]
			yyc2007 = true
		} else if yyj2007 == 0 && yyv2007 == nil {
			yyv2007 = []IDRange{}
			yyc2007 = true
		}
	}
	yyh2007.End()
	if yyc2007 {
		*v = yyv2007
	}
}

func (x codecSelfer1234) encSlicePodSecurityPolicy(v []PodSecurityPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv2011 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy2012 := &yyv2011
		yy2012.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodSecurityPolicy(v *[]PodSecurityPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv2013 := *v
	yyh2013, yyl2013 := z.DecSliceHelperStart()
	var yyc2013 bool
	if yyl2013 == 0 {
		if yyv2013 == nil {
			yyv2013 = []PodSecurityPolicy{}
			yyc2013 = true
		} else if len(yyv2013) != 0 {
			yyv2013 = yyv2013[:0]
			yyc2013 = true
		}
	} else if yyl2013 > 0 {
		var yyrr2013, yyrl2013 int
		var yyrt2013 bool
		if yyl2013 > cap(yyv2013) {

			yyrg2013 := len(yyv2013) > 0
			yyv22013 := yyv2013
			yyrl2013, yyrt2013 = z.DecInferLen(yyl2013, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt2013 {
				if yyrl2013 <= cap(yyv2013) {
					yyv2013 = yyv2013[:yyrl2013]
				} else {
					yyv2013 = make([]PodSecurityPolicy, yyrl2013)
				}
			} else {
				yyv2013 = make([]PodSecurityPolicy, yyrl2013)
			}
			yyc2013 = true
			yyrr2013 = len(yyv2013)
			if yyrg2013 {
				copy(yyv2013, yyv22013)
			}
		} else if yyl2013 != len(yyv2013) {
			yyv2013 = yyv2013[:yyl2013]
			yyc2013 = true
		}
		yyj2013 := 0
		for ; yyj2013 < yyrr2013; yyj2013++ {
			yyh2013.ElemContainerState(yyj2013)
			if r.TryDecodeAsNil() {
				yyv2013[yyj2013] = PodSecurityPolicy{}
			} else {
				yyv2014 := &yyv2013[yyj2013]
				yyv2014.CodecDecodeSelf(d)
			}

		}
		if yyrt2013 {
			for ; yyj2013 < yyl2013; yyj2013++ {
				yyv2013 = append(yyv2013, PodSecurityPolicy{})
				yyh2013.ElemContainerState(yyj2013)
				if r.TryDecodeAsNil() {
					yyv2013[yyj2013] = PodSecurityPolicy{}
				} else {
					yyv2015 := &yyv2013[yyj2013]
					yyv2015.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj2013 := 0
		for ; !r.CheckBreak(); yyj2013++ {

			if yyj2013 >= len(yyv2013) {
				yyv2013 = append(yyv2013, PodSecurityPolicy{}) // var yyz2013 PodSecurityPolicy
				yyc2013 = true
			}
			yyh2013.ElemContainerState(yyj2013)
			if yyj2013 < len(yyv2013) {
				if r.TryDecodeAsNil() {
					yyv2013[yyj2013] = PodSecurityPolicy{}
				} else {
					yyv2016 := &yyv2013[yyj2013]
					yyv2016.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj2013 < len(yyv2013) {
			yyv2013 = yyv2013[:yyj2013]
			yyc2013 = true
		} else if yyj2013 == 0 && yyv2013 == nil {
			yyv2013 = []PodSecurityPolicy{}
			yyc2013 = true
		}
	}
	yyh2013.End()
	if yyc2013 {
		*v = yyv2013
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyIngressRule(v []NetworkPolicyIngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv2017 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy2018 := &yyv2017
		yy2018.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyIngressRule(v *[]NetworkPolicyIngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv2019 := *v
	yyh2019, yyl2019 := z.DecSliceHelperStart()
	var yyc2019 bool
	if yyl2019 == 0 {
		if yyv2019 == nil {
			yyv2019 = []NetworkPolicyIngressRule{}
			yyc2019 = true
		} else if len(yyv2019) != 0 {
			yyv2019 = yyv2019[:0]
			yyc2019 = true
		}
	} else if yyl2019 > 0 {
		var yyrr2019, yyrl2019 int
		var yyrt2019 bool
		if yyl2019 > cap(yyv2019) {

			yyrg2019 := len(yyv2019) > 0
			yyv22019 := yyv2019
			yyrl2019, yyrt2019 = z.DecInferLen(yyl2019, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt2019 {
				if yyrl2019 <= cap(yyv2019) {
					yyv2019 = yyv2019[:yyrl2019]
				} else {
					yyv2019 = make([]NetworkPolicyIngressRule, yyrl2019)
				}
			} else {
				yyv2019 = make([]NetworkPolicyIngressRule, yyrl2019)
			}
			yyc2019 = true
			yyrr2019 = len(yyv2019)
			if yyrg2019 {
				copy(yyv2019, yyv22019)
			}
		} else if yyl2019 != len(yyv2019) {
			yyv2019 = yyv2019[:yyl2019]
			yyc2019 = true
		}
		yyj2019 := 0
		for ; yyj2019 < yyrr2019; yyj2019++ {
			yyh2019.ElemContainerState(yyj2019)
			if r.TryDecodeAsNil() {
				yyv2019[yyj2019] = NetworkPolicyIngressRule{}
			} else {
				yyv2020 := &yyv2019[yyj2019]
				yyv2020.CodecDecodeSelf(d)
			}

		}
		if yyrt2019 {
			for ; yyj2019 < yyl2019; yyj2019++ {
				yyv2019 = append(yyv2019, NetworkPolicyIngressRule{})
				yyh2019.ElemContainerState(yyj2019)
				if r.TryDecodeAsNil() {
					yyv2019[yyj2019] = NetworkPolicyIngressRule{}
				} else {
					yyv2021 := &yyv2019[yyj2019]
					yyv2021.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj2019 := 0
		for ; !r.CheckBreak(); yyj2019++ {

			if yyj2019 >= len(yyv2019) {
				yyv2019 = append(yyv2019, NetworkPolicyIngressRule{}) // var yyz2019 NetworkPolicyIngressRule
				yyc2019 = true
			}
			yyh2019.ElemContainerState(yyj2019)
			if yyj2019 < len(yyv2019) {
				if r.TryDecodeAsNil() {
					yyv2019[yyj2019] = NetworkPolicyIngressRule{}
				} else {
					yyv2022 := &yyv2019[yyj2019]
					yyv2022.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj2019 < len(yyv2019) {
			yyv2019 = yyv2019[:yyj2019]
			yyc2019 = true
		} else if yyj2019 == 0 && yyv2019 == nil {
			yyv2019 = []NetworkPolicyIngressRule{}
			yyc2019 = true
		}
	}
	yyh2019.End()
	if yyc2019 {
		*v = yyv2019
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPort(v []NetworkPolicyPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv2023 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy2024 := &yyv2023
		yy2024.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPort(v *[]NetworkPolicyPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv2025 := *v
	yyh2025, yyl2025 := z.DecSliceHelperStart()
	var yyc2025 bool
	if yyl2025 == 0 {
		if yyv2025 == nil {
			yyv2025 = []NetworkPolicyPort{}
			yyc2025 = true
		} else if len(yyv2025) != 0 {
			yyv2025 = yyv2025[:0]
			yyc2025 = true
		}
	} else if yyl2025 > 0 {
		var yyrr2025, yyrl2025 int
		var yyrt2025 bool
		if yyl2025 > cap(yyv2025) {

			yyrg2025 := len(yyv2025) > 0
			yyv22025 := yyv2025
			yyrl2025, yyrt2025 = z.DecInferLen(yyl2025, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt2025 {
				if yyrl2025 <= cap(yyv2025) {
					yyv2025 = yyv2025[:yyrl2025]
				} else {
					yyv2025 = make([]NetworkPolicyPort, yyrl2025)
				}
			} else {
				yyv2025 = make([]NetworkPolicyPort, yyrl2025)
			}
			yyc2025 = true
			yyrr2025 = len(yyv2025)
			if yyrg2025 {
				copy(yyv2025, yyv22025)
			}
		} else if yyl2025 != len(yyv2025) {
			yyv2025 = yyv2025[:yyl2025]
			yyc2025 = true
		}
		yyj2025 := 0
		for ; yyj2025 < yyrr2025; yyj2025++ {
			yyh2025.ElemContainerState(yyj2025)
			if r.TryDecodeAsNil() {
				yyv2025[yyj2025] = NetworkPolicyPort{}
			} else {
				yyv2026 := &yyv2025[yyj2025]
				yyv2026.CodecDecodeSelf(d)
			}

		}
		if yyrt2025 {
			for ; yyj2025 < yyl2025; yyj2025++ {
				yyv2025 = append(yyv2025, NetworkPolicyPort{})
				yyh2025.ElemContainerState(yyj2025)
				if r.TryDecodeAsNil() {
					yyv2025[yyj2025] = NetworkPolicyPort{}
				} else {
					yyv2027 := &yyv2025[yyj2025]
					yyv2027.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj2025 := 0
		for ; !r.CheckBreak(); yyj2025++ {

			if yyj2025 >= len(yyv2025) {
				yyv2025 = append(yyv2025, NetworkPolicyPort{}) // var yyz2025 NetworkPolicyPort
				yyc2025 = true
			}
			yyh2025.ElemContainerState(yyj2025)
			if yyj2025 < len(yyv2025) {
				if r.TryDecodeAsNil() {
					yyv2025[yyj2025] = NetworkPolicyPort{}
				} else {
					yyv2028 := &yyv2025[yyj2025]
					yyv2028.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj2025 < len(yyv2025) {
			yyv2025 = yyv2025[:yyj2025]
			yyc2025 = true
		} else if yyj2025 == 0 && yyv2025 == nil {
			yyv2025 = []NetworkPolicyPort{}
			yyc2025 = true
		}
	}
	yyh2025.End()
	if yyc2025 {
		*v = yyv2025
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPeer(v []NetworkPolicyPeer, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv2029 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy2030 := &yyv2029
		yy2030.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPeer(v *[]NetworkPolicyPeer, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv2031 := *v
	yyh2031, yyl2031 := z.DecSliceHelperStart()
	var yyc2031 bool
	if yyl2031 == 0 {
		if yyv2031 == nil {
			yyv2031 = []NetworkPolicyPeer{}
			yyc2031 = true
		} else if len(yyv2031) != 0 {
			yyv2031 = yyv2031[:0]
			yyc2031 = true
		}
	} else if yyl2031 > 0 {
		var yyrr2031, yyrl2031 int
		var yyrt2031 bool
		if yyl2031 > cap(yyv2031) {

			yyrg2031 := len(yyv2031) > 0
			yyv22031 := yyv2031
			yyrl2031, yyrt2031 = z.DecInferLen(yyl2031, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt2031 {
				if yyrl2031 <= cap(yyv2031) {
					yyv2031 = yyv2031[:yyrl2031]
				} else {
					yyv2031 = make([]NetworkPolicyPeer, yyrl2031)
				}
			} else {
				yyv2031 = make([]NetworkPolicyPeer, yyrl2031)
			}
			yyc2031 = true
			yyrr2031 = len(yyv2031)
			if yyrg2031 {
				copy(yyv2031, yyv22031)
			}
		} else if yyl2031 != len(yyv2031) {
			yyv2031 = yyv2031[:yyl2031]
			yyc2031 = true
		}
		yyj2031 := 0
		for ; yyj2031 < yyrr2031; yyj2031++ {
			yyh2031.ElemContainerState(yyj2031)
			if r.TryDecodeAsNil() {
				yyv2031[yyj2031] = NetworkPolicyPeer{}
			} else {
				yyv2032 := &yyv2031[yyj2031]
				yyv2032.CodecDecodeSelf(d)
			}

		}
		if yyrt2031 {
			for ; yyj2031 < yyl2031; yyj2031++ {
				yyv2031 = append(yyv2031, NetworkPolicyPeer{})
				yyh2031.ElemContainerState(yyj2031)
				if r.TryDecodeAsNil() {
					yyv2031[yyj2031] = NetworkPolicyPeer{}
				} else {
					yyv2033 := &yyv2031[yyj2031]
					yyv2033.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj2031 := 0
		for ; !r.CheckBreak(); yyj2031++ {

			if yyj2031 >= len(yyv2031) {
				yyv2031 = append(yyv2031, NetworkPolicyPeer{}) // var yyz2031 NetworkPolicyPeer
				yyc2031 = true
			}
			yyh2031.ElemContainerState(yyj2031)
			if yyj2031 < len(yyv2031) {
				if r.TryDecodeAsNil() {
					yyv2031[yyj2031] = NetworkPolicyPeer{}
				} else {
					yyv2034 := &yyv2031[yyj2031]
					yyv2034.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj2031 < len(yyv2031) {
			yyv2031 = yyv2031[:yyj2031]
			yyc2031 = true
		} else if yyj2031 == 0 && yyv2031 == nil {
			yyv2031 = []NetworkPolicyPeer{}
			yyc2031 = true
		}
	}
	yyh2031.End()
	if yyc2031 {
		*v = yyv2031
	}
}

func (x codecSelfer1234) encSliceNetworkPolicy(v []NetworkPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv2035 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy2036 := &yyv2035
		yy2036.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicy(v *[]NetworkPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv2037 := *v
	yyh2037, yyl2037 := z.DecSliceHelperStart()
	var yyc2037 bool
	if yyl2037 == 0 {
		if yyv2037 == nil {
			yyv2037 = []NetworkPolicy{}
			yyc2037 = true
		} else if len(yyv2037) != 0 {
			yyv2037 = yyv2037[:0]
			yyc2037 = true
		}
	} else if yyl2037 > 0 {
		var yyrr2037, yyrl2037 int
		var yyrt2037 bool
		if yyl2037 > cap(yyv2037) {

			yyrg2037 := len(yyv2037) > 0
			yyv22037 := yyv2037
			yyrl2037, yyrt2037 = z.DecInferLen(yyl2037, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt2037 {
				if yyrl2037 <= cap(yyv2037) {
					yyv2037 = yyv2037[:yyrl2037]
				} else {
					yyv2037 = make([]NetworkPolicy, yyrl2037)
				}
			} else {
				yyv2037 = make([]NetworkPolicy, yyrl2037)
			}
			yyc2037 = true
			yyrr2037 = len(yyv2037)
			if yyrg2037 {
				copy(yyv2037, yyv22037)
			}
		} else if yyl2037 != len(yyv2037) {
			yyv2037 = yyv2037[:yyl2037]
			yyc2037 = true
		}
		yyj2037 := 0
		for ; yyj2037 < yyrr2037; yyj2037++ {
			yyh2037.ElemContainerState(yyj2037)
			if r.TryDecodeAsNil() {
				yyv2037[yyj2037] = NetworkPolicy{}
			} else {
				yyv2038 := &yyv2037[yyj2037]
				yyv2038.CodecDecodeSelf(d)
			}

		}
		if yyrt2037 {
			for ; yyj2037 < yyl2037; yyj2037++ {
				yyv2037 = append(yyv2037, NetworkPolicy{})
				yyh2037.ElemContainerState(yyj2037)
				if r.TryDecodeAsNil() {
					yyv2037[yyj2037] = NetworkPolicy{}
				} else {
					yyv2039 := &yyv2037[yyj2037]
					yyv2039.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj2037 := 0
		for ; !r.CheckBreak(); yyj2037++ {

			if yyj2037 >= len(yyv2037) {
				yyv2037 = append(yyv2037, NetworkPolicy{}) // var yyz2037 NetworkPolicy
				yyc2037 = true
			}
			yyh2037.ElemContainerState(yyj2037)
			if yyj2037 < len(yyv2037) {
				if r.TryDecodeAsNil() {
					yyv2037[yyj2037] = NetworkPolicy{}
				} else {
					yyv2040 := &yyv2037[yyj2037]
					yyv2040.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj2037 < len(yyv2037) {
			yyv2037 = yyv2037[:yyj2037]
			yyc2037 = true
		} else if yyj2037 == 0 && yyv2037 == nil {
			yyv2037 = []NetworkPolicy{}
			yyc2037 = true
		}
	}
	yyh2037.End()
	if yyc2037 {
		*v = yyv2037
	}
}
